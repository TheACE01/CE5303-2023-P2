
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	@ 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	@ 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	@ 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	@ 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	@ 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	@ 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	@ 0x228000
    8060:	ea001d4c 	b	f598 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

Disassembly of section .text:

00008070 <main>:
    8070:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    8074:	e24ddc1e 	sub	sp, sp, #7680	@ 0x1e00
    8078:	e24dd004 	sub	sp, sp, #4
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000009 	bl	80ac <CKernel::CKernel()>
    8084:	e1a0000d 	mov	r0, sp
    8088:	eb00003f 	bl	818c <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000003 	beq	80a4 <main+0x34>
    8094:	e1a0000d 	mov	r0, sp
    8098:	eb00009b 	bl	830c <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	0a000000 	beq	80a8 <main+0x38>
    80a4:	eb001d2d 	bl	f560 <halt>
    80a8:	eb001d31 	bl	f574 <reboot>

000080ac <CKernel::CKernel()>:
    80ac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    80b0:	e1a04000 	mov	r4, r0
    80b4:	e3a01000 	mov	r1, #0
    80b8:	e24dd00c 	sub	sp, sp, #12
    80bc:	e284600c 	add	r6, r4, #12
    80c0:	eb0000f9 	bl	84ac <CActLED::CActLED(bool)>
    80c4:	e1a00006 	mov	r0, r6
    80c8:	eb00070d 	bl	9d04 <CKernelOptions::CKernelOptions()>
    80cc:	e2840e8a 	add	r0, r4, #2208	@ 0x8a0
    80d0:	eb000170 	bl	8698 <CDeviceNameService::CDeviceNameService()>
    80d4:	e1a00006 	mov	r0, r6
    80d8:	eb000638 	bl	99c0 <CKernelOptions::GetWidth() const>
    80dc:	e1a07000 	mov	r7, r0
    80e0:	e1a00006 	mov	r0, r6
    80e4:	e3a05000 	mov	r5, #0
    80e8:	eb000636 	bl	99c8 <CKernelOptions::GetHeight() const>
    80ec:	e1a02000 	mov	r2, r0
    80f0:	e2840e8a 	add	r0, r4, #2208	@ 0x8a0
    80f4:	e1a01007 	mov	r1, r7
    80f8:	e1a03005 	mov	r3, r5
    80fc:	e58d5000 	str	r5, [sp]
    8100:	e2800008 	add	r0, r0, #8
    8104:	e2847c1a 	add	r7, r4, #6656	@ 0x1a00
    8108:	eb000d02 	bl	b518 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
    810c:	e2840e93 	add	r0, r4, #2352	@ 0x930
    8110:	e1a03005 	mov	r3, r5
    8114:	e1a02005 	mov	r2, r5
    8118:	e1a01005 	mov	r1, r5
    811c:	e2800008 	add	r0, r0, #8
    8120:	eb001384 	bl	cf38 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8124:	e2840c1a 	add	r0, r4, #6656	@ 0x1a00
    8128:	e2877024 	add	r7, r7, #36	@ 0x24
    812c:	e2800020 	add	r0, r0, #32
    8130:	eb00260b 	bl	11964 <CExceptionHandler::CExceptionHandler()>
    8134:	e1a00007 	mov	r0, r7
    8138:	eb002834 	bl	12210 <CInterruptSystem::CInterruptSystem()>
    813c:	e2840d73 	add	r0, r4, #7360	@ 0x1cc0
    8140:	e1a01007 	mov	r1, r7
    8144:	e2800004 	add	r0, r0, #4
    8148:	eb001d54 	bl	f6a0 <CTimer::CTimer(CInterruptSystem*)>
    814c:	e1a00006 	mov	r0, r6
    8150:	eb000621 	bl	99dc <CKernelOptions::GetLogLevel() const>
    8154:	e1a01000 	mov	r1, r0
    8158:	e2840c1d 	add	r0, r4, #7424	@ 0x1d00
    815c:	e1a02005 	mov	r2, r5
    8160:	e3a03001 	mov	r3, #1
    8164:	e2800004 	add	r0, r0, #4
    8168:	eb000823 	bl	a1fc <CLogger::CLogger(unsigned int, CTimer*, bool)>
    816c:	e1a00004 	mov	r0, r4
    8170:	e3a03f7d 	mov	r3, #500	@ 0x1f4
    8174:	e3a020c8 	mov	r2, #200	@ 0xc8
    8178:	e3a01005 	mov	r1, #5
    817c:	eb00011b 	bl	85f0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8180:	e1a00004 	mov	r0, r4
    8184:	e28dd00c 	add	sp, sp, #12
    8188:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000818c <CKernel::Initialize()>:
    818c:	e92d4070 	push	{r4, r5, r6, lr}
    8190:	e2805e8a 	add	r5, r0, #2208	@ 0x8a0
    8194:	e2855008 	add	r5, r5, #8
    8198:	e24dd008 	sub	sp, sp, #8
    819c:	e1a04000 	mov	r4, r0
    81a0:	e1a00005 	mov	r0, r5
    81a4:	eb001098 	bl	c40c <CScreenDevice::Initialize()>
    81a8:	e3500000 	cmp	r0, #0
    81ac:	1a000002 	bne	81bc <CKernel::Initialize()+0x30>
    81b0:	e3a00000 	mov	r0, #0
    81b4:	e28dd008 	add	sp, sp, #8
    81b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    81bc:	e3a02008 	mov	r2, #8
    81c0:	e2840e93 	add	r0, r4, #2352	@ 0x930
    81c4:	e3a06000 	mov	r6, #0
    81c8:	e3a03001 	mov	r3, #1
    81cc:	e0800002 	add	r0, r0, r2
    81d0:	e3a01cc2 	mov	r1, #49664	@ 0xc200
    81d4:	e3401001 	movt	r1, #1
    81d8:	e58d6000 	str	r6, [sp]
    81dc:	eb0013bf 	bl	d0e0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
    81e0:	e1500006 	cmp	r0, r6
    81e4:	0afffff1 	beq	81b0 <CKernel::Initialize()+0x24>
    81e8:	e284000c 	add	r0, r4, #12
    81ec:	eb0005f7 	bl	99d0 <CKernelOptions::GetLogDevice() const>
    81f0:	e1a02006 	mov	r2, r6
    81f4:	e1a01000 	mov	r1, r0
    81f8:	e2840e8a 	add	r0, r4, #2208	@ 0x8a0
    81fc:	eb0001be 	bl	88fc <CDeviceNameService::GetDevice(char const*, bool)>
    8200:	e1a01000 	mov	r1, r0
    8204:	e1510006 	cmp	r1, r6
    8208:	e2840c1d 	add	r0, r4, #7424	@ 0x1d00
    820c:	01a01005 	moveq	r1, r5
    8210:	e2800004 	add	r0, r0, #4
    8214:	eb000a05 	bl	aa30 <CLogger::Initialize(CDevice*)>
    8218:	e1500006 	cmp	r0, r6
    821c:	0affffe3 	beq	81b0 <CKernel::Initialize()+0x24>
    8220:	e2840c1a 	add	r0, r4, #6656	@ 0x1a00
    8224:	e2800024 	add	r0, r0, #36	@ 0x24
    8228:	eb002813 	bl	1227c <CInterruptSystem::Initialize()>
    822c:	e1500006 	cmp	r0, r6
    8230:	0affffde 	beq	81b0 <CKernel::Initialize()+0x24>
    8234:	e2840d73 	add	r0, r4, #7360	@ 0x1cc0
    8238:	e2800004 	add	r0, r0, #4
    823c:	e28dd008 	add	sp, sp, #8
    8240:	e8bd4070 	pop	{r4, r5, r6, lr}
    8244:	ea001fd5 	b	101a0 <CTimer::Initialize()>

00008248 <clearBuffer(void*, unsigned int)>:
    8248:	e3510000 	cmp	r1, #0
    824c:	012fff1e 	bxeq	lr
    8250:	e0801001 	add	r1, r0, r1
    8254:	e3a03000 	mov	r3, #0
    8258:	e4c03001 	strb	r3, [r0], #1
    825c:	e1510000 	cmp	r1, r0
    8260:	1afffffc 	bne	8258 <clearBuffer(void*, unsigned int)+0x10>
    8264:	e12fff1e 	bx	lr

00008268 <my_strlen(char const*)>:
    8268:	e1d010d0 	ldrsb	r1, [r0]
    826c:	e3510000 	cmp	r1, #0
    8270:	0a000007 	beq	8294 <my_strlen(char const*)+0x2c>
    8274:	e1a03000 	mov	r3, r0
    8278:	e1a01003 	mov	r1, r3
    827c:	e1f320d1 	ldrsb	r2, [r3, #1]!
    8280:	e3520000 	cmp	r2, #0
    8284:	1afffffb 	bne	8278 <my_strlen(char const*)+0x10>
    8288:	e2600001 	rsb	r0, r0, #1
    828c:	e0810000 	add	r0, r1, r0
    8290:	e12fff1e 	bx	lr
    8294:	e1a00001 	mov	r0, r1
    8298:	e12fff1e 	bx	lr

0000829c <CKernel::~CKernel()>:
    829c:	e92d4010 	push	{r4, lr}
    82a0:	e1a04000 	mov	r4, r0
    82a4:	e2800c1d 	add	r0, r0, #7424	@ 0x1d00
    82a8:	e2800004 	add	r0, r0, #4
    82ac:	eb0007ea 	bl	a25c <CLogger::~CLogger()>
    82b0:	e2840d73 	add	r0, r4, #7360	@ 0x1cc0
    82b4:	e2800004 	add	r0, r0, #4
    82b8:	eb001d1a 	bl	f728 <CTimer::~CTimer()>
    82bc:	e2840c1a 	add	r0, r4, #6656	@ 0x1a00
    82c0:	e2800024 	add	r0, r0, #36	@ 0x24
    82c4:	eb0027dc 	bl	1223c <CInterruptSystem::~CInterruptSystem()>
    82c8:	e2840c1a 	add	r0, r4, #6656	@ 0x1a00
    82cc:	e2800020 	add	r0, r0, #32
    82d0:	eb002547 	bl	117f4 <CExceptionHandler::~CExceptionHandler()>
    82d4:	e2840e93 	add	r0, r4, #2352	@ 0x930
    82d8:	e2800008 	add	r0, r0, #8
    82dc:	eb001648 	bl	dc04 <CSerialDevice::~CSerialDevice()>
    82e0:	e2840e8a 	add	r0, r4, #2208	@ 0x8a0
    82e4:	e2800008 	add	r0, r0, #8
    82e8:	eb000c16 	bl	b348 <CScreenDevice::~CScreenDevice()>
    82ec:	e2840e8a 	add	r0, r4, #2208	@ 0x8a0
    82f0:	eb0000f9 	bl	86dc <CDeviceNameService::~CDeviceNameService()>
    82f4:	e284000c 	add	r0, r4, #12
    82f8:	eb000595 	bl	9954 <CKernelOptions::~CKernelOptions()>
    82fc:	e1a00004 	mov	r0, r4
    8300:	eb00009f 	bl	8584 <CActLED::~CActLED()>
    8304:	e1a00004 	mov	r0, r4
    8308:	e8bd8010 	pop	{r4, pc}

0000830c <CKernel::Run()>:
    830c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8310:	e1a04000 	mov	r4, r0
    8314:	e2800c1d 	add	r0, r0, #7424	@ 0x1d00
    8318:	e24dd04c 	sub	sp, sp, #76	@ 0x4c
    831c:	e3a02003 	mov	r2, #3
    8320:	e2800004 	add	r0, r0, #4
    8324:	e3043e8c 	movw	r3, #20108	@ 0x4e8c
    8328:	e3403001 	movt	r3, #1
    832c:	e3041eb8 	movw	r1, #20152	@ 0x4eb8
    8330:	e3401001 	movt	r1, #1
    8334:	eb0009b1 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8338:	e304ee68 	movw	lr, #20072	@ 0x4e68
    833c:	e340e001 	movt	lr, #1
    8340:	e1a0300e 	mov	r3, lr
    8344:	e1a0b003 	mov	fp, r3
    8348:	e2833001 	add	r3, r3, #1
    834c:	e1db20d1 	ldrsb	r2, [fp, #1]
    8350:	e3520000 	cmp	r2, #0
    8354:	1afffffa 	bne	8344 <CKernel::Run()+0x38>
    8358:	e304ce70 	movw	ip, #20080	@ 0x4e70
    835c:	e340c001 	movt	ip, #1
    8360:	e1a0200c 	mov	r2, ip
    8364:	e1a03002 	mov	r3, r2
    8368:	e2822001 	add	r2, r2, #1
    836c:	e1d310d1 	ldrsb	r1, [r3, #1]
    8370:	e3510000 	cmp	r1, #0
    8374:	1afffffa 	bne	8364 <CKernel::Run()+0x58>
    8378:	e3040e74 	movw	r0, #20084	@ 0x4e74
    837c:	e3400001 	movt	r0, #1
    8380:	e1a02000 	mov	r2, r0
    8384:	e1a07002 	mov	r7, r2
    8388:	e1f210d1 	ldrsb	r1, [r2, #1]!
    838c:	e3510000 	cmp	r1, #0
    8390:	1afffffb 	bne	8384 <CKernel::Run()+0x78>
    8394:	e2846e93 	add	r6, r4, #2352	@ 0x930
    8398:	e26ee001 	rsb	lr, lr, #1
    839c:	e26cc001 	rsb	ip, ip, #1
    83a0:	e2600001 	rsb	r0, r0, #1
    83a4:	e2844e8a 	add	r4, r4, #2208	@ 0x8a0
    83a8:	e083300c 	add	r3, r3, ip
    83ac:	e304ae74 	movw	sl, #20084	@ 0x4e74
    83b0:	e340a001 	movt	sl, #1
    83b4:	e3049eb0 	movw	r9, #20144	@ 0x4eb0
    83b8:	e3409001 	movt	r9, #1
    83bc:	e3048eb4 	movw	r8, #20148	@ 0x4eb4
    83c0:	e3408001 	movt	r8, #1
    83c4:	e08bb00e 	add	fp, fp, lr
    83c8:	e0877000 	add	r7, r7, r0
    83cc:	e3a05001 	mov	r5, #1
    83d0:	e2866008 	add	r6, r6, #8
    83d4:	e2844008 	add	r4, r4, #8
    83d8:	e58d3004 	str	r3, [sp, #4]
    83dc:	ea000012 	b	842c <CKernel::Run()+0x120>
    83e0:	e1a02007 	mov	r2, r7
    83e4:	e1a0100a 	mov	r1, sl
    83e8:	e1a00004 	mov	r0, r4
    83ec:	e3a05000 	mov	r5, #0
    83f0:	eb00120e 	bl	cc30 <CScreenDevice::Write(void const*, unsigned int)>
    83f4:	e3a02040 	mov	r2, #64	@ 0x40
    83f8:	e28d1008 	add	r1, sp, #8
    83fc:	e1a00004 	mov	r0, r4
    8400:	eb00120a 	bl	cc30 <CScreenDevice::Write(void const*, unsigned int)>
    8404:	e3a02002 	mov	r2, #2
    8408:	e1a01009 	mov	r1, r9
    840c:	e1a00004 	mov	r0, r4
    8410:	eb001206 	bl	cc30 <CScreenDevice::Write(void const*, unsigned int)>
    8414:	e3a02001 	mov	r2, #1
    8418:	e1a01008 	mov	r1, r8
    841c:	e1a00004 	mov	r0, r4
    8420:	eb001202 	bl	cc30 <CScreenDevice::Write(void const*, unsigned int)>
    8424:	e3a00f7d 	mov	r0, #500	@ 0x1f4
    8428:	eb001fbf 	bl	1032c <CTimer::SimpleMsDelay(unsigned int)>
    842c:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
    8430:	e3a0203f 	mov	r2, #63	@ 0x3f
    8434:	e28d1008 	add	r1, sp, #8
    8438:	e1a00006 	mov	r0, r6
    843c:	edcd0b02 	vstr	d16, [sp, #8]
    8440:	edcd1b04 	vstr	d17, [sp, #16]
    8444:	edcd0b06 	vstr	d16, [sp, #24]
    8448:	edcd1b08 	vstr	d17, [sp, #32]
    844c:	edcd0b0a 	vstr	d16, [sp, #40]	@ 0x28
    8450:	edcd1b0c 	vstr	d17, [sp, #48]	@ 0x30
    8454:	edcd0b0e 	vstr	d16, [sp, #56]	@ 0x38
    8458:	edcd1b10 	vstr	d17, [sp, #64]	@ 0x40
    845c:	eb001253 	bl	cdb0 <CSerialDevice::Read(void*, unsigned int)>
    8460:	e3500000 	cmp	r0, #0
    8464:	0affffee 	beq	8424 <CKernel::Run()+0x118>
    8468:	e2803048 	add	r3, r0, #72	@ 0x48
    846c:	e08d0003 	add	r0, sp, r3
    8470:	e3a03000 	mov	r3, #0
    8474:	e1550003 	cmp	r5, r3
    8478:	e5403040 	strb	r3, [r0, #-64]	@ 0xffffffc0
    847c:	1affffd7 	bne	83e0 <CKernel::Run()+0xd4>
    8480:	e1a0200b 	mov	r2, fp
    8484:	e1a00004 	mov	r0, r4
    8488:	e3041e68 	movw	r1, #20072	@ 0x4e68
    848c:	e3401001 	movt	r1, #1
    8490:	eb0011e6 	bl	cc30 <CScreenDevice::Write(void const*, unsigned int)>
    8494:	e59d2004 	ldr	r2, [sp, #4]
    8498:	e1a00004 	mov	r0, r4
    849c:	e3041e70 	movw	r1, #20080	@ 0x4e70
    84a0:	e3401001 	movt	r1, #1
    84a4:	eb0011e1 	bl	cc30 <CScreenDevice::Write(void const*, unsigned int)>
    84a8:	eaffffcc 	b	83e0 <CKernel::Run()+0xd4>

000084ac <CActLED::CActLED(bool)>:
    84ac:	e30736e8 	movw	r3, #30440	@ 0x76e8
    84b0:	e3403001 	movt	r3, #1
    84b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84b8:	e3a02000 	mov	r2, #0
    84bc:	e1a06001 	mov	r6, r1
    84c0:	e5802000 	str	r2, [r0]
    84c4:	e1a05000 	mov	r5, r0
    84c8:	e5802004 	str	r2, [r0, #4]
    84cc:	e5830000 	str	r0, [r3]
    84d0:	eb000b91 	bl	b31c <CMachineInfo::Get()>
    84d4:	eb000aa2 	bl	af64 <CMachineInfo::GetActLEDInfo() const>
    84d8:	e1a04000 	mov	r4, r0
    84dc:	e2107080 	ands	r7, r0, #128	@ 0x80
    84e0:	0a000015 	beq	853c <CActLED::CActLED(bool)+0x90>
    84e4:	e3a00014 	mov	r0, #20
    84e8:	eb00230b 	bl	1111c <operator new(unsigned int)>
    84ec:	e1a02006 	mov	r2, r6
    84f0:	e204103f 	and	r1, r4, #63	@ 0x3f
    84f4:	e1a07000 	mov	r7, r0
    84f8:	eb002266 	bl	10e98 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
    84fc:	e5956000 	ldr	r6, [r5]
    8500:	e2144040 	ands	r4, r4, #64	@ 0x40
    8504:	e5857004 	str	r7, [r5, #4]
    8508:	03a03001 	moveq	r3, #1
    850c:	13a03000 	movne	r3, #0
    8510:	e3560000 	cmp	r6, #0
    8514:	e5c53008 	strb	r3, [r5, #8]
    8518:	1a000013 	bne	856c <CActLED::CActLED(bool)+0xc0>
    851c:	e3570000 	cmp	r7, #0
    8520:	0a000015 	beq	857c <CActLED::CActLED(bool)+0xd0>
    8524:	e2541000 	subs	r1, r4, #0
    8528:	e1a00007 	mov	r0, r7
    852c:	13a01001 	movne	r1, #1
    8530:	eb00220f 	bl	10d74 <CVirtualGPIOPin::Write(unsigned int)>
    8534:	e1a00005 	mov	r0, r5
    8538:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    853c:	e3a00028 	mov	r0, #40	@ 0x28
    8540:	eb0022f5 	bl	1111c <operator new(unsigned int)>
    8544:	e1a03007 	mov	r3, r7
    8548:	e204103f 	and	r1, r4, #63	@ 0x3f
    854c:	e3a02001 	mov	r2, #1
    8550:	e1a06000 	mov	r6, r0
    8554:	eb00048e 	bl	9794 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8558:	e2144040 	ands	r4, r4, #64	@ 0x40
    855c:	e5856000 	str	r6, [r5]
    8560:	03a03001 	moveq	r3, #1
    8564:	13a03000 	movne	r3, #0
    8568:	e5c53008 	strb	r3, [r5, #8]
    856c:	e2541000 	subs	r1, r4, #0
    8570:	e1a00006 	mov	r0, r6
    8574:	13a01001 	movne	r1, #1
    8578:	eb000214 	bl	8dd0 <CGPIOPin::Write(unsigned int)>
    857c:	e1a00005 	mov	r0, r5
    8580:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008584 <CActLED::~CActLED()>:
    8584:	e30736e8 	movw	r3, #30440	@ 0x76e8
    8588:	e3403001 	movt	r3, #1
    858c:	e3a02000 	mov	r2, #0
    8590:	e5832000 	str	r2, [r3]
    8594:	e12fff1e 	bx	lr

00008598 <CActLED::On()>:
    8598:	e1a03000 	mov	r3, r0
    859c:	e5900000 	ldr	r0, [r0]
    85a0:	e3500000 	cmp	r0, #0
    85a4:	e5d31008 	ldrb	r1, [r3, #8]
    85a8:	0a000000 	beq	85b0 <CActLED::On()+0x18>
    85ac:	ea000207 	b	8dd0 <CGPIOPin::Write(unsigned int)>
    85b0:	e5930004 	ldr	r0, [r3, #4]
    85b4:	e3500000 	cmp	r0, #0
    85b8:	012fff1e 	bxeq	lr
    85bc:	ea0021ec 	b	10d74 <CVirtualGPIOPin::Write(unsigned int)>

000085c0 <CActLED::Off()>:
    85c0:	e1a03000 	mov	r3, r0
    85c4:	e5900000 	ldr	r0, [r0]
    85c8:	e3500000 	cmp	r0, #0
    85cc:	e5d31008 	ldrb	r1, [r3, #8]
    85d0:	0a000001 	beq	85dc <CActLED::Off()+0x1c>
    85d4:	e2211001 	eor	r1, r1, #1
    85d8:	ea0001fc 	b	8dd0 <CGPIOPin::Write(unsigned int)>
    85dc:	e5930004 	ldr	r0, [r3, #4]
    85e0:	e3500000 	cmp	r0, #0
    85e4:	012fff1e 	bxeq	lr
    85e8:	e2211001 	eor	r1, r1, #1
    85ec:	ea0021e0 	b	10d74 <CVirtualGPIOPin::Write(unsigned int)>

000085f0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    85f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    85f4:	e2516000 	subs	r6, r1, #0
    85f8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    85fc:	e1a04000 	mov	r4, r0
    8600:	e1a07002 	mov	r7, r2
    8604:	e1a08003 	mov	r8, r3
    8608:	e3a05001 	mov	r5, #1
    860c:	ea00000d 	b	8648 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x58>
    8610:	eb0001ee 	bl	8dd0 <CGPIOPin::Write(unsigned int)>
    8614:	e1a00007 	mov	r0, r7
    8618:	eb001f43 	bl	1032c <CTimer::SimpleMsDelay(unsigned int)>
    861c:	e5940000 	ldr	r0, [r4]
    8620:	e3500000 	cmp	r0, #0
    8624:	0a000010 	beq	866c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x7c>
    8628:	e5d41008 	ldrb	r1, [r4, #8]
    862c:	e2211001 	eor	r1, r1, #1
    8630:	eb0001e6 	bl	8dd0 <CGPIOPin::Write(unsigned int)>
    8634:	e1a00008 	mov	r0, r8
    8638:	e2855001 	add	r5, r5, #1
    863c:	eb001f3a 	bl	1032c <CTimer::SimpleMsDelay(unsigned int)>
    8640:	e1560005 	cmp	r6, r5
    8644:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    8648:	e5940000 	ldr	r0, [r4]
    864c:	e5d41008 	ldrb	r1, [r4, #8]
    8650:	e3500000 	cmp	r0, #0
    8654:	1affffed 	bne	8610 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    8658:	e5940004 	ldr	r0, [r4, #4]
    865c:	e3500000 	cmp	r0, #0
    8660:	0affffeb 	beq	8614 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x24>
    8664:	eb0021c2 	bl	10d74 <CVirtualGPIOPin::Write(unsigned int)>
    8668:	eaffffe9 	b	8614 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x24>
    866c:	e5940004 	ldr	r0, [r4, #4]
    8670:	e3500000 	cmp	r0, #0
    8674:	0affffee 	beq	8634 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x44>
    8678:	e5d41008 	ldrb	r1, [r4, #8]
    867c:	e2211001 	eor	r1, r1, #1
    8680:	eb0021bb 	bl	10d74 <CVirtualGPIOPin::Write(unsigned int)>
    8684:	eaffffea 	b	8634 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x44>

00008688 <CActLED::Get()>:
    8688:	e30736e8 	movw	r3, #30440	@ 0x76e8
    868c:	e3403001 	movt	r3, #1
    8690:	e5930000 	ldr	r0, [r3]
    8694:	e12fff1e 	bx	lr

00008698 <CDeviceNameService::CDeviceNameService()>:
    8698:	e30726ec 	movw	r2, #30444	@ 0x76ec
    869c:	e3402001 	movt	r2, #1
    86a0:	e3a01000 	mov	r1, #0
    86a4:	e5801000 	str	r1, [r0]
    86a8:	e5801004 	str	r1, [r0, #4]
    86ac:	e592c000 	ldr	ip, [r2]
    86b0:	e15c0001 	cmp	ip, r1
    86b4:	1a000001 	bne	86c0 <CDeviceNameService::CDeviceNameService()+0x28>
    86b8:	e5820000 	str	r0, [r2]
    86bc:	e12fff1e 	bx	lr
    86c0:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    86c4:	e3401001 	movt	r1, #1
    86c8:	e3040ed8 	movw	r0, #20184	@ 0x4ed8
    86cc:	e3400001 	movt	r0, #1
    86d0:	e3a0201f 	mov	r2, #31
    86d4:	e92d4010 	push	{r4, lr}
    86d8:	eb00289c 	bl	12950 <assertion_failed>

000086dc <CDeviceNameService::~CDeviceNameService()>:
    86dc:	e92d4070 	push	{r4, r5, r6, lr}
    86e0:	e1a05000 	mov	r5, r0
    86e4:	e5904000 	ldr	r4, [r0]
    86e8:	e3540000 	cmp	r4, #0
    86ec:	0a00000b 	beq	8720 <CDeviceNameService::~CDeviceNameService()+0x44>
    86f0:	e1a03004 	mov	r3, r4
    86f4:	e5944000 	ldr	r4, [r4]
    86f8:	e5930004 	ldr	r0, [r3, #4]
    86fc:	e3500000 	cmp	r0, #0
    8700:	0a000000 	beq	8708 <CDeviceNameService::~CDeviceNameService()+0x2c>
    8704:	eb002296 	bl	11164 <operator delete[](void*)>
    8708:	e5950000 	ldr	r0, [r5]
    870c:	e3a01010 	mov	r1, #16
    8710:	eb002299 	bl	1117c <operator delete(void*, unsigned int)>
    8714:	e3540000 	cmp	r4, #0
    8718:	e5854000 	str	r4, [r5]
    871c:	1afffff3 	bne	86f0 <CDeviceNameService::~CDeviceNameService()+0x14>
    8720:	e30736ec 	movw	r3, #30444	@ 0x76ec
    8724:	e3403001 	movt	r3, #1
    8728:	e3a02000 	mov	r2, #0
    872c:	e1a00005 	mov	r0, r5
    8730:	e5832000 	str	r2, [r3]
    8734:	e8bd8070 	pop	{r4, r5, r6, pc}

00008738 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    8738:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    873c:	e1a05000 	mov	r5, r0
    8740:	e5900004 	ldr	r0, [r0, #4]
    8744:	e1a06001 	mov	r6, r1
    8748:	e1a07002 	mov	r7, r2
    874c:	e1a08003 	mov	r8, r3
    8750:	e3500000 	cmp	r0, #0
    8754:	1a000016 	bne	87b4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x7c>
    8758:	e3a00010 	mov	r0, #16
    875c:	eb00226e 	bl	1111c <operator new(unsigned int)>
    8760:	e3560000 	cmp	r6, #0
    8764:	e1a04000 	mov	r4, r0
    8768:	0a000013 	beq	87bc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x84>
    876c:	e1a00006 	mov	r0, r6
    8770:	eb001f5d 	bl	104ec <strlen>
    8774:	e2800001 	add	r0, r0, #1
    8778:	eb00226d 	bl	11134 <operator new[](unsigned int)>
    877c:	e1a01006 	mov	r1, r6
    8780:	e5840004 	str	r0, [r4, #4]
    8784:	eb001ff8 	bl	1076c <strcpy>
    8788:	e3570000 	cmp	r7, #0
    878c:	0a000010 	beq	87d4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
    8790:	e895000c 	ldm	r5, {r2, r3}
    8794:	e5842000 	str	r2, [r4]
    8798:	e5847008 	str	r7, [r4, #8]
    879c:	e3530000 	cmp	r3, #0
    87a0:	e5c4800c 	strb	r8, [r4, #12]
    87a4:	e5854000 	str	r4, [r5]
    87a8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    87ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    87b0:	ea002679 	b	1219c <LeaveCritical>
    87b4:	eb00264d 	bl	120f0 <EnterCritical>
    87b8:	eaffffe6 	b	8758 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    87bc:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    87c0:	e3401001 	movt	r1, #1
    87c4:	e3040ee4 	movw	r0, #20196	@ 0x4ee4
    87c8:	e3400001 	movt	r0, #1
    87cc:	e3a0203b 	mov	r2, #59	@ 0x3b
    87d0:	eb00285e 	bl	12950 <assertion_failed>
    87d4:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    87d8:	e3401001 	movt	r1, #1
    87dc:	e3040ef0 	movw	r0, #20208	@ 0x4ef0
    87e0:	e3400001 	movt	r0, #1
    87e4:	e3a02040 	mov	r2, #64	@ 0x40
    87e8:	eb002858 	bl	12950 <assertion_failed>

000087ec <CDeviceNameService::RemoveDevice(char const*, bool)>:
    87ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    87f0:	e2515000 	subs	r5, r1, #0
    87f4:	0a00003a 	beq	88e4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf8>
    87f8:	e1a08000 	mov	r8, r0
    87fc:	e5900004 	ldr	r0, [r0, #4]
    8800:	e1a07002 	mov	r7, r2
    8804:	e3500000 	cmp	r0, #0
    8808:	1a000019 	bne	8874 <CDeviceNameService::RemoveDevice(char const*, bool)+0x88>
    880c:	e5984000 	ldr	r4, [r8]
    8810:	e3540000 	cmp	r4, #0
    8814:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8818:	e3a06000 	mov	r6, #0
    881c:	ea00000b 	b	8850 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
    8820:	e1a00005 	mov	r0, r5
    8824:	eb001f3a 	bl	10514 <strcmp>
    8828:	e3500000 	cmp	r0, #0
    882c:	1a000002 	bne	883c <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
    8830:	e5d4300c 	ldrb	r3, [r4, #12]
    8834:	e1530007 	cmp	r3, r7
    8838:	0a000016 	beq	8898 <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>
    883c:	e5943000 	ldr	r3, [r4]
    8840:	e1a06004 	mov	r6, r4
    8844:	e3530000 	cmp	r3, #0
    8848:	0a00000d 	beq	8884 <CDeviceNameService::RemoveDevice(char const*, bool)+0x98>
    884c:	e1a04003 	mov	r4, r3
    8850:	e5941004 	ldr	r1, [r4, #4]
    8854:	e3510000 	cmp	r1, #0
    8858:	1afffff0 	bne	8820 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
    885c:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    8860:	e3401001 	movt	r1, #1
    8864:	e3040f00 	movw	r0, #20224	@ 0x4f00
    8868:	e3400001 	movt	r0, #1
    886c:	e3a0205e 	mov	r2, #94	@ 0x5e
    8870:	eb002836 	bl	12950 <assertion_failed>
    8874:	eb00261d 	bl	120f0 <EnterCritical>
    8878:	e5984000 	ldr	r4, [r8]
    887c:	e3540000 	cmp	r4, #0
    8880:	1affffe4 	bne	8818 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    8884:	e5983004 	ldr	r3, [r8, #4]
    8888:	e3530000 	cmp	r3, #0
    888c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8890:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8894:	ea002640 	b	1219c <LeaveCritical>
    8898:	e5943000 	ldr	r3, [r4]
    889c:	e3560000 	cmp	r6, #0
    88a0:	15863000 	strne	r3, [r6]
    88a4:	0a00000c 	beq	88dc <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
    88a8:	e5983004 	ldr	r3, [r8, #4]
    88ac:	e3530000 	cmp	r3, #0
    88b0:	1a000007 	bne	88d4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
    88b4:	e5940004 	ldr	r0, [r4, #4]
    88b8:	e3500000 	cmp	r0, #0
    88bc:	0a000000 	beq	88c4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd8>
    88c0:	eb002227 	bl	11164 <operator delete[](void*)>
    88c4:	e1a00004 	mov	r0, r4
    88c8:	e3a01010 	mov	r1, #16
    88cc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    88d0:	ea002229 	b	1117c <operator delete(void*, unsigned int)>
    88d4:	eb002630 	bl	1219c <LeaveCritical>
    88d8:	eafffff5 	b	88b4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc8>
    88dc:	e5883000 	str	r3, [r8]
    88e0:	eafffff0 	b	88a8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xbc>
    88e4:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    88e8:	e3401001 	movt	r1, #1
    88ec:	e3040ee4 	movw	r0, #20196	@ 0x4ee4
    88f0:	e3400001 	movt	r0, #1
    88f4:	e3a02056 	mov	r2, #86	@ 0x56
    88f8:	eb002814 	bl	12950 <assertion_failed>

000088fc <CDeviceNameService::GetDevice(char const*, bool)>:
    88fc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8900:	e2515000 	subs	r5, r1, #0
    8904:	e24dd00c 	sub	sp, sp, #12
    8908:	0a000026 	beq	89a8 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    890c:	e1a07000 	mov	r7, r0
    8910:	e5900004 	ldr	r0, [r0, #4]
    8914:	e1a06002 	mov	r6, r2
    8918:	e3500000 	cmp	r0, #0
    891c:	1a000016 	bne	897c <CDeviceNameService::GetDevice(char const*, bool)+0x80>
    8920:	e5974000 	ldr	r4, [r7]
    8924:	e3540000 	cmp	r4, #0
    8928:	1a00000a 	bne	8958 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    892c:	ea00001a 	b	899c <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
    8930:	e1a00005 	mov	r0, r5
    8934:	eb001ef6 	bl	10514 <strcmp>
    8938:	e3500000 	cmp	r0, #0
    893c:	1a000002 	bne	894c <CDeviceNameService::GetDevice(char const*, bool)+0x50>
    8940:	e5d4300c 	ldrb	r3, [r4, #12]
    8944:	e1530006 	cmp	r3, r6
    8948:	0a00001c 	beq	89c0 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
    894c:	e5944000 	ldr	r4, [r4]
    8950:	e3540000 	cmp	r4, #0
    8954:	0a00000c 	beq	898c <CDeviceNameService::GetDevice(char const*, bool)+0x90>
    8958:	e5941004 	ldr	r1, [r4, #4]
    895c:	e3510000 	cmp	r1, #0
    8960:	1afffff2 	bne	8930 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
    8964:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    8968:	e3401001 	movt	r1, #1
    896c:	e3040f00 	movw	r0, #20224	@ 0x4f00
    8970:	e3400001 	movt	r0, #1
    8974:	e3a02092 	mov	r2, #146	@ 0x92
    8978:	eb0027f4 	bl	12950 <assertion_failed>
    897c:	eb0025db 	bl	120f0 <EnterCritical>
    8980:	e5974000 	ldr	r4, [r7]
    8984:	e3540000 	cmp	r4, #0
    8988:	1afffff2 	bne	8958 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    898c:	e5973004 	ldr	r3, [r7, #4]
    8990:	e3530000 	cmp	r3, #0
    8994:	0a000000 	beq	899c <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
    8998:	eb0025ff 	bl	1219c <LeaveCritical>
    899c:	e3a00000 	mov	r0, #0
    89a0:	e28dd00c 	add	sp, sp, #12
    89a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    89a8:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    89ac:	e3401001 	movt	r1, #1
    89b0:	e3040ee4 	movw	r0, #20196	@ 0x4ee4
    89b4:	e3400001 	movt	r0, #1
    89b8:	e3a0208b 	mov	r2, #139	@ 0x8b
    89bc:	eb0027e3 	bl	12950 <assertion_failed>
    89c0:	e5973004 	ldr	r3, [r7, #4]
    89c4:	e5940008 	ldr	r0, [r4, #8]
    89c8:	e3530000 	cmp	r3, #0
    89cc:	1a000007 	bne	89f0 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
    89d0:	e3500000 	cmp	r0, #0
    89d4:	1afffff1 	bne	89a0 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    89d8:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    89dc:	e3401001 	movt	r1, #1
    89e0:	e3040f14 	movw	r0, #20244	@ 0x4f14
    89e4:	e3400001 	movt	r0, #1
    89e8:	e3a0209a 	mov	r2, #154	@ 0x9a
    89ec:	eb0027d7 	bl	12950 <assertion_failed>
    89f0:	e58d0004 	str	r0, [sp, #4]
    89f4:	eb0025e8 	bl	1219c <LeaveCritical>
    89f8:	e59d0004 	ldr	r0, [sp, #4]
    89fc:	eafffff3 	b	89d0 <CDeviceNameService::GetDevice(char const*, bool)+0xd4>

00008a00 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)>:
    8a00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a04:	e1a07000 	mov	r7, r0
    8a08:	e5900004 	ldr	r0, [r0, #4]
    8a0c:	e1a05001 	mov	r5, r1
    8a10:	e1a06002 	mov	r6, r2
    8a14:	e3500000 	cmp	r0, #0
    8a18:	1a000013 	bne	8a6c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x6c>
    8a1c:	e5974000 	ldr	r4, [r7]
    8a20:	e3540000 	cmp	r4, #0
    8a24:	1a000003 	bne	8a38 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
    8a28:	ea000015 	b	8a84 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x84>
    8a2c:	e5944000 	ldr	r4, [r4]
    8a30:	e3540000 	cmp	r4, #0
    8a34:	0a000010 	beq	8a7c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x7c>
    8a38:	e5d4200c 	ldrb	r2, [r4, #12]
    8a3c:	e1a03006 	mov	r3, r6
    8a40:	e5941004 	ldr	r1, [r4, #4]
    8a44:	e5940008 	ldr	r0, [r4, #8]
    8a48:	e12fff35 	blx	r5
    8a4c:	e2508000 	subs	r8, r0, #0
    8a50:	1afffff5 	bne	8a2c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x2c>
    8a54:	e5973004 	ldr	r3, [r7, #4]
    8a58:	e3530000 	cmp	r3, #0
    8a5c:	0a000000 	beq	8a64 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>
    8a60:	eb0025cd 	bl	1219c <LeaveCritical>
    8a64:	e1a00008 	mov	r0, r8
    8a68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8a6c:	eb00259f 	bl	120f0 <EnterCritical>
    8a70:	e5974000 	ldr	r4, [r7]
    8a74:	e3540000 	cmp	r4, #0
    8a78:	1affffee 	bne	8a38 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
    8a7c:	e3a08001 	mov	r8, #1
    8a80:	eafffff3 	b	8a54 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x54>
    8a84:	e3a08001 	mov	r8, #1
    8a88:	eafffff5 	b	8a64 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>

00008a8c <CDeviceNameService::Get()>:
    8a8c:	e30736ec 	movw	r3, #30444	@ 0x76ec
    8a90:	e3403001 	movt	r3, #1
    8a94:	e5930000 	ldr	r0, [r3]
    8a98:	e3500000 	cmp	r0, #0
    8a9c:	112fff1e 	bxne	lr
    8aa0:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    8aa4:	e3401001 	movt	r1, #1
    8aa8:	e3040f24 	movw	r0, #20260	@ 0x4f24
    8aac:	e3400001 	movt	r0, #1
    8ab0:	e3a020e5 	mov	r2, #229	@ 0xe5
    8ab4:	e92d4010 	push	{r4, lr}
    8ab8:	eb0027a4 	bl	12950 <assertion_failed>

00008abc <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    8abc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ac0:	e1a06001 	mov	r6, r1
    8ac4:	e1a07002 	mov	r7, r2
    8ac8:	e24dd010 	sub	sp, sp, #16
    8acc:	e1a04000 	mov	r4, r0
    8ad0:	e1a0000d 	mov	r0, sp
    8ad4:	e1a05003 	mov	r5, r3
    8ad8:	e5dd8028 	ldrb	r8, [sp, #40]	@ 0x28
    8adc:	eb0014d6 	bl	de3c <CString::CString()>
    8ae0:	e1a03007 	mov	r3, r7
    8ae4:	e1a02006 	mov	r2, r6
    8ae8:	e1a0000d 	mov	r0, sp
    8aec:	e3041f30 	movw	r1, #20272	@ 0x4f30
    8af0:	e3401001 	movt	r1, #1
    8af4:	eb001a89 	bl	f520 <CString::Format(char const*, ...)>
    8af8:	e1a0000d 	mov	r0, sp
    8afc:	eb001506 	bl	df1c <CString::operator char const*() const>
    8b00:	e1a03008 	mov	r3, r8
    8b04:	e1a01000 	mov	r1, r0
    8b08:	e1a02005 	mov	r2, r5
    8b0c:	e1a00004 	mov	r0, r4
    8b10:	ebffff08 	bl	8738 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8b14:	e1a0000d 	mov	r0, sp
    8b18:	eb001494 	bl	dd70 <CString::~CString()>
    8b1c:	e28dd010 	add	sp, sp, #16
    8b20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008b24 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    8b24:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8b28:	e1a06001 	mov	r6, r1
    8b2c:	e1a07002 	mov	r7, r2
    8b30:	e24dd014 	sub	sp, sp, #20
    8b34:	e1a04000 	mov	r4, r0
    8b38:	e1a0000d 	mov	r0, sp
    8b3c:	e1a05003 	mov	r5, r3
    8b40:	eb0014bd 	bl	de3c <CString::CString()>
    8b44:	e1a03007 	mov	r3, r7
    8b48:	e1a02006 	mov	r2, r6
    8b4c:	e1a0000d 	mov	r0, sp
    8b50:	e3041f30 	movw	r1, #20272	@ 0x4f30
    8b54:	e3401001 	movt	r1, #1
    8b58:	eb001a70 	bl	f520 <CString::Format(char const*, ...)>
    8b5c:	e1a0000d 	mov	r0, sp
    8b60:	eb0014ed 	bl	df1c <CString::operator char const*() const>
    8b64:	e1a02005 	mov	r2, r5
    8b68:	e1a01000 	mov	r1, r0
    8b6c:	e1a00004 	mov	r0, r4
    8b70:	ebffff1d 	bl	87ec <CDeviceNameService::RemoveDevice(char const*, bool)>
    8b74:	e1a0000d 	mov	r0, sp
    8b78:	eb00147c 	bl	dd70 <CString::~CString()>
    8b7c:	e28dd014 	add	sp, sp, #20
    8b80:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008b84 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    8b84:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8b88:	e1a06001 	mov	r6, r1
    8b8c:	e1a07002 	mov	r7, r2
    8b90:	e24dd014 	sub	sp, sp, #20
    8b94:	e1a04000 	mov	r4, r0
    8b98:	e1a0000d 	mov	r0, sp
    8b9c:	e1a05003 	mov	r5, r3
    8ba0:	eb0014a5 	bl	de3c <CString::CString()>
    8ba4:	e1a03007 	mov	r3, r7
    8ba8:	e1a02006 	mov	r2, r6
    8bac:	e1a0000d 	mov	r0, sp
    8bb0:	e3041f30 	movw	r1, #20272	@ 0x4f30
    8bb4:	e3401001 	movt	r1, #1
    8bb8:	eb001a58 	bl	f520 <CString::Format(char const*, ...)>
    8bbc:	e1a0000d 	mov	r0, sp
    8bc0:	eb0014d5 	bl	df1c <CString::operator char const*() const>
    8bc4:	e1a02005 	mov	r2, r5
    8bc8:	e1a01000 	mov	r1, r0
    8bcc:	e1a00004 	mov	r0, r4
    8bd0:	ebffff49 	bl	88fc <CDeviceNameService::GetDevice(char const*, bool)>
    8bd4:	e1a04000 	mov	r4, r0
    8bd8:	e1a0000d 	mov	r0, sp
    8bdc:	eb001463 	bl	dd70 <CString::~CString()>
    8be0:	e1a00004 	mov	r0, r4
    8be4:	e28dd014 	add	sp, sp, #20
    8be8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008bec <CDeviceNameService::ListDevices(CDevice*)>:
    8bec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8bf0:	e2517000 	subs	r7, r1, #0
    8bf4:	e24dd018 	sub	sp, sp, #24
    8bf8:	0a000038 	beq	8ce0 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
    8bfc:	e5904000 	ldr	r4, [r0]
    8c00:	e3540000 	cmp	r4, #0
    8c04:	0a000033 	beq	8cd8 <CDeviceNameService::ListDevices(CDevice*)+0xec>
    8c08:	e3048f48 	movw	r8, #20296	@ 0x4f48
    8c0c:	e3408001 	movt	r8, #1
    8c10:	e3a05000 	mov	r5, #0
    8c14:	ea000019 	b	8c80 <CDeviceNameService::ListDevices(CDevice*)+0x94>
    8c18:	e5d4200c 	ldrb	r2, [r4, #12]
    8c1c:	e2855001 	add	r5, r5, #1
    8c20:	e2159003 	ands	r9, r5, #3
    8c24:	e1a01008 	mov	r1, r8
    8c28:	13a0c020 	movne	ip, #32
    8c2c:	03a0c00a 	moveq	ip, #10
    8c30:	e2622063 	rsb	r2, r2, #99	@ 0x63
    8c34:	e58dc000 	str	ip, [sp]
    8c38:	e28d0008 	add	r0, sp, #8
    8c3c:	eb001a37 	bl	f520 <CString::Format(char const*, ...)>
    8c40:	e5973000 	ldr	r3, [r7]
    8c44:	e28d0008 	add	r0, sp, #8
    8c48:	e593a00c 	ldr	sl, [r3, #12]
    8c4c:	eb0014b2 	bl	df1c <CString::operator char const*() const>
    8c50:	e1a06000 	mov	r6, r0
    8c54:	e28d0008 	add	r0, sp, #8
    8c58:	eb0014ed 	bl	e014 <CString::GetLength() const>
    8c5c:	e1a01006 	mov	r1, r6
    8c60:	e1a02000 	mov	r2, r0
    8c64:	e1a00007 	mov	r0, r7
    8c68:	e12fff3a 	blx	sl
    8c6c:	e5944000 	ldr	r4, [r4]
    8c70:	e28d0008 	add	r0, sp, #8
    8c74:	eb00143d 	bl	dd70 <CString::~CString()>
    8c78:	e3540000 	cmp	r4, #0
    8c7c:	0a00000a 	beq	8cac <CDeviceNameService::ListDevices(CDevice*)+0xc0>
    8c80:	e28d0008 	add	r0, sp, #8
    8c84:	eb00146c 	bl	de3c <CString::CString()>
    8c88:	e5943004 	ldr	r3, [r4, #4]
    8c8c:	e3530000 	cmp	r3, #0
    8c90:	1affffe0 	bne	8c18 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
    8c94:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    8c98:	e3401001 	movt	r1, #1
    8c9c:	e3040f00 	movw	r0, #20224	@ 0x4f00
    8ca0:	e3400001 	movt	r0, #1
    8ca4:	e3a020d2 	mov	r2, #210	@ 0xd2
    8ca8:	eb002728 	bl	12950 <assertion_failed>
    8cac:	e3590000 	cmp	r9, #0
    8cb0:	0a000008 	beq	8cd8 <CDeviceNameService::ListDevices(CDevice*)+0xec>
    8cb4:	e5973000 	ldr	r3, [r7]
    8cb8:	e3a02001 	mov	r2, #1
    8cbc:	e1a00007 	mov	r0, r7
    8cc0:	e3041eb4 	movw	r1, #20148	@ 0x4eb4
    8cc4:	e3401001 	movt	r1, #1
    8cc8:	e593300c 	ldr	r3, [r3, #12]
    8ccc:	e28dd018 	add	sp, sp, #24
    8cd0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8cd4:	e12fff13 	bx	r3
    8cd8:	e28dd018 	add	sp, sp, #24
    8cdc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8ce0:	e3041ec0 	movw	r1, #20160	@ 0x4ec0
    8ce4:	e3401001 	movt	r1, #1
    8ce8:	e3040f38 	movw	r0, #20280	@ 0x4f38
    8cec:	e3400001 	movt	r0, #1
    8cf0:	e3a020c9 	mov	r2, #201	@ 0xc9
    8cf4:	eb002715 	bl	12950 <assertion_failed>

00008cf8 <CGPIOPin::~CGPIOPin()>:
    8cf8:	e12fff1e 	bx	lr

00008cfc <CGPIOPin::~CGPIOPin()>:
    8cfc:	e92d4010 	push	{r4, lr}
    8d00:	e3a01028 	mov	r1, #40	@ 0x28
    8d04:	e1a04000 	mov	r4, r0
    8d08:	eb00211b 	bl	1117c <operator delete(void*, unsigned int)>
    8d0c:	e1a00004 	mov	r0, r4
    8d10:	e8bd8010 	pop	{r4, pc}

00008d14 <CGPIOPin::CGPIOPin()>:
    8d14:	e59fc02c 	ldr	ip, [pc, #44]	@ 8d48 <CGPIOPin::CGPIOPin()+0x34>
    8d18:	e3a01000 	mov	r1, #0
    8d1c:	e3a02006 	mov	r2, #6
    8d20:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    8d24:	e3a0e036 	mov	lr, #54	@ 0x36
    8d28:	e5c02025 	strb	r2, [r0, #37]	@ 0x25
    8d2c:	e5c02026 	strb	r2, [r0, #38]	@ 0x26
    8d30:	e3a0200a 	mov	r2, #10
    8d34:	e8805000 	stm	r0, {ip, lr}
    8d38:	e5801018 	str	r1, [r0, #24]
    8d3c:	e580101c 	str	r1, [r0, #28]
    8d40:	e5c02010 	strb	r2, [r0, #16]
    8d44:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    8d48:	00014f60 	.word	0x00014f60

00008d4c <CGPIOPin::AssignPin(unsigned int)>:
    8d4c:	e5903004 	ldr	r3, [r0, #4]
    8d50:	e92d4070 	push	{r4, r5, r6, lr}
    8d54:	e3530036 	cmp	r3, #54	@ 0x36
    8d58:	1a000017 	bne	8dbc <CGPIOPin::AssignPin(unsigned int)+0x70>
    8d5c:	e1a05000 	mov	r5, r0
    8d60:	e1a04001 	mov	r4, r1
    8d64:	e3510035 	cmp	r1, #53	@ 0x35
    8d68:	e5801004 	str	r1, [r0, #4]
    8d6c:	8a000007 	bhi	8d90 <CGPIOPin::AssignPin(unsigned int)+0x44>
    8d70:	e1a022a4 	lsr	r2, r4, #5
    8d74:	e3a03001 	mov	r3, #1
    8d78:	e204401f 	and	r4, r4, #31
    8d7c:	e1a02102 	lsl	r2, r2, #2
    8d80:	e5852008 	str	r2, [r5, #8]
    8d84:	e1a03413 	lsl	r3, r3, r4
    8d88:	e585300c 	str	r3, [r5, #12]
    8d8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d90:	eb000961 	bl	b31c <CMachineInfo::Get()>
    8d94:	e6ef1074 	uxtb	r1, r4
    8d98:	eb0008c6 	bl	b0b8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    8d9c:	e1a04000 	mov	r4, r0
    8da0:	e3500035 	cmp	r0, #53	@ 0x35
    8da4:	e5850004 	str	r0, [r5, #4]
    8da8:	9afffff0 	bls	8d70 <CGPIOPin::AssignPin(unsigned int)+0x24>
    8dac:	e59f1018 	ldr	r1, [pc, #24]	@ 8dcc <CGPIOPin::AssignPin(unsigned int)+0x80>
    8db0:	e3a02047 	mov	r2, #71	@ 0x47
    8db4:	e2810020 	add	r0, r1, #32
    8db8:	eb0026e4 	bl	12950 <assertion_failed>
    8dbc:	e59f1008 	ldr	r1, [pc, #8]	@ 8dcc <CGPIOPin::AssignPin(unsigned int)+0x80>
    8dc0:	e3a02040 	mov	r2, #64	@ 0x40
    8dc4:	e281000c 	add	r0, r1, #12
    8dc8:	eb0026e0 	bl	12950 <assertion_failed>
    8dcc:	00014f68 	.word	0x00014f68

00008dd0 <CGPIOPin::Write(unsigned int)>:
    8dd0:	e5903004 	ldr	r3, [r0, #4]
    8dd4:	e92d4010 	push	{r4, lr}
    8dd8:	e3530035 	cmp	r3, #53	@ 0x35
    8ddc:	8a00000f 	bhi	8e20 <CGPIOPin::Write(unsigned int)+0x50>
    8de0:	e5d03010 	ldrb	r3, [r0, #16]
    8de4:	e3530003 	cmp	r3, #3
    8de8:	8a000010 	bhi	8e30 <CGPIOPin::Write(unsigned int)+0x60>
    8dec:	e3510001 	cmp	r1, #1
    8df0:	8a000012 	bhi	8e40 <CGPIOPin::Write(unsigned int)+0x70>
    8df4:	e3a0201c 	mov	r2, #28
    8df8:	e3432f20 	movt	r2, #16160	@ 0x3f20
    8dfc:	e3510000 	cmp	r1, #0
    8e00:	e590c008 	ldr	ip, [r0, #8]
    8e04:	e3a03028 	mov	r3, #40	@ 0x28
    8e08:	e3433f20 	movt	r3, #16160	@ 0x3f20
    8e0c:	11a03002 	movne	r3, r2
    8e10:	e590200c 	ldr	r2, [r0, #12]
    8e14:	e5801014 	str	r1, [r0, #20]
    8e18:	e783200c 	str	r2, [r3, ip]
    8e1c:	e8bd8010 	pop	{r4, pc}
    8e20:	e59f1028 	ldr	r1, [pc, #40]	@ 8e50 <CGPIOPin::Write(unsigned int)+0x80>
    8e24:	e3a02091 	mov	r2, #145	@ 0x91
    8e28:	e2810020 	add	r0, r1, #32
    8e2c:	eb0026c7 	bl	12950 <assertion_failed>
    8e30:	e59f1018 	ldr	r1, [pc, #24]	@ 8e50 <CGPIOPin::Write(unsigned int)+0x80>
    8e34:	e3a02094 	mov	r2, #148	@ 0x94
    8e38:	e2810034 	add	r0, r1, #52	@ 0x34
    8e3c:	eb0026c3 	bl	12950 <assertion_failed>
    8e40:	e59f1008 	ldr	r1, [pc, #8]	@ 8e50 <CGPIOPin::Write(unsigned int)+0x80>
    8e44:	e3a02098 	mov	r2, #152	@ 0x98
    8e48:	e2810058 	add	r0, r1, #88	@ 0x58
    8e4c:	eb0026bf 	bl	12950 <assertion_failed>
    8e50:	00014f68 	.word	0x00014f68

00008e54 <CGPIOPin::Read() const>:
    8e54:	e5903004 	ldr	r3, [r0, #4]
    8e58:	e92d4010 	push	{r4, lr}
    8e5c:	e3530035 	cmp	r3, #53	@ 0x35
    8e60:	8a00000d 	bhi	8e9c <CGPIOPin::Read() const+0x48>
    8e64:	e5d03010 	ldrb	r3, [r0, #16]
    8e68:	e2432002 	sub	r2, r3, #2
    8e6c:	e3530000 	cmp	r3, #0
    8e70:	13520001 	cmpne	r2, #1
    8e74:	8a00000c 	bhi	8eac <CGPIOPin::Read() const+0x58>
    8e78:	e5901008 	ldr	r1, [r0, #8]
    8e7c:	e3a03034 	mov	r3, #52	@ 0x34
    8e80:	e3433f20 	movt	r3, #16160	@ 0x3f20
    8e84:	e590200c 	ldr	r2, [r0, #12]
    8e88:	e7913003 	ldr	r3, [r1, r3]
    8e8c:	e1130002 	tst	r3, r2
    8e90:	13a00001 	movne	r0, #1
    8e94:	03a00000 	moveq	r0, #0
    8e98:	e8bd8010 	pop	{r4, pc}
    8e9c:	e59f1018 	ldr	r1, [pc, #24]	@ 8ebc <CGPIOPin::Read() const+0x68>
    8ea0:	e3a020a4 	mov	r2, #164	@ 0xa4
    8ea4:	e2810020 	add	r0, r1, #32
    8ea8:	eb0026a8 	bl	12950 <assertion_failed>
    8eac:	e59f1008 	ldr	r1, [pc, #8]	@ 8ebc <CGPIOPin::Read() const+0x68>
    8eb0:	e3a020a6 	mov	r2, #166	@ 0xa6
    8eb4:	e2810078 	add	r0, r1, #120	@ 0x78
    8eb8:	eb0026a4 	bl	12950 <assertion_failed>
    8ebc:	00014f68 	.word	0x00014f68

00008ec0 <CGPIOPin::Invert()>:
    8ec0:	e5d03010 	ldrb	r3, [r0, #16]
    8ec4:	e92d4010 	push	{r4, lr}
    8ec8:	e3530001 	cmp	r3, #1
    8ecc:	1a000011 	bne	8f18 <CGPIOPin::Invert()+0x58>
    8ed0:	e5902014 	ldr	r2, [r0, #20]
    8ed4:	e5903004 	ldr	r3, [r0, #4]
    8ed8:	e2221001 	eor	r1, r2, #1
    8edc:	e3530035 	cmp	r3, #53	@ 0x35
    8ee0:	8a000010 	bhi	8f28 <CGPIOPin::Invert()+0x68>
    8ee4:	e3510001 	cmp	r1, #1
    8ee8:	8a000012 	bhi	8f38 <CGPIOPin::Invert()+0x78>
    8eec:	e3520001 	cmp	r2, #1
    8ef0:	e3a0c01c 	mov	ip, #28
    8ef4:	e343cf20 	movt	ip, #16160	@ 0x3f20
    8ef8:	e5902008 	ldr	r2, [r0, #8]
    8efc:	e3a03028 	mov	r3, #40	@ 0x28
    8f00:	e3433f20 	movt	r3, #16160	@ 0x3f20
    8f04:	11a0300c 	movne	r3, ip
    8f08:	e590c00c 	ldr	ip, [r0, #12]
    8f0c:	e5801014 	str	r1, [r0, #20]
    8f10:	e783c002 	str	ip, [r3, r2]
    8f14:	e8bd8010 	pop	{r4, pc}
    8f18:	e59f1028 	ldr	r1, [pc, #40]	@ 8f48 <CGPIOPin::Invert()+0x88>
    8f1c:	e3a020b5 	mov	r2, #181	@ 0xb5
    8f20:	e28100d4 	add	r0, r1, #212	@ 0xd4
    8f24:	eb002689 	bl	12950 <assertion_failed>
    8f28:	e59f1018 	ldr	r1, [pc, #24]	@ 8f48 <CGPIOPin::Invert()+0x88>
    8f2c:	e3a02091 	mov	r2, #145	@ 0x91
    8f30:	e2810020 	add	r0, r1, #32
    8f34:	eb002685 	bl	12950 <assertion_failed>
    8f38:	e59f1008 	ldr	r1, [pc, #8]	@ 8f48 <CGPIOPin::Invert()+0x88>
    8f3c:	e3a02098 	mov	r2, #152	@ 0x98
    8f40:	e2810058 	add	r0, r1, #88	@ 0x58
    8f44:	eb002681 	bl	12950 <assertion_failed>
    8f48:	00014f68 	.word	0x00014f68

00008f4c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
    8f4c:	e1a0c000 	mov	ip, r0
    8f50:	e5d00010 	ldrb	r0, [r0, #16]
    8f54:	e92d4010 	push	{r4, lr}
    8f58:	e240e002 	sub	lr, r0, #2
    8f5c:	e3500000 	cmp	r0, #0
    8f60:	135e0001 	cmpne	lr, #1
    8f64:	8a000027 	bhi	9008 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
    8f68:	e5dc0025 	ldrb	r0, [ip, #37]	@ 0x25
    8f6c:	e3500006 	cmp	r0, #6
    8f70:	1a000010 	bne	8fb8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
    8f74:	e5dc0026 	ldrb	r0, [ip, #38]	@ 0x26
    8f78:	e3500006 	cmp	r0, #6
    8f7c:	1a000011 	bne	8fc8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
    8f80:	e3510000 	cmp	r1, #0
    8f84:	0a000013 	beq	8fd8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
    8f88:	e59c001c 	ldr	r0, [ip, #28]
    8f8c:	e3500000 	cmp	r0, #0
    8f90:	1a000014 	bne	8fe8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
    8f94:	e59c0018 	ldr	r0, [ip, #24]
    8f98:	e58c101c 	str	r1, [ip, #28]
    8f9c:	e3500000 	cmp	r0, #0
    8fa0:	e58c2020 	str	r2, [ip, #32]
    8fa4:	e5cc3024 	strb	r3, [ip, #36]	@ 0x24
    8fa8:	0a000012 	beq	8ff8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
    8fac:	e8bd4010 	pop	{r4, lr}
    8fb0:	e1a0100c 	mov	r1, ip
    8fb4:	ea002cd5 	b	14310 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8fb8:	e59f1058 	ldr	r1, [pc, #88]	@ 9018 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8fbc:	e3a020c0 	mov	r2, #192	@ 0xc0
    8fc0:	e28100f0 	add	r0, r1, #240	@ 0xf0
    8fc4:	eb002661 	bl	12950 <assertion_failed>
    8fc8:	e59f1048 	ldr	r1, [pc, #72]	@ 9018 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8fcc:	e3a020c1 	mov	r2, #193	@ 0xc1
    8fd0:	e2810f45 	add	r0, r1, #276	@ 0x114
    8fd4:	eb00265d 	bl	12950 <assertion_failed>
    8fd8:	e59f1038 	ldr	r1, [pc, #56]	@ 9018 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8fdc:	e3a020c3 	mov	r2, #195	@ 0xc3
    8fe0:	e2810f4f 	add	r0, r1, #316	@ 0x13c
    8fe4:	eb002659 	bl	12950 <assertion_failed>
    8fe8:	e59f1028 	ldr	r1, [pc, #40]	@ 9018 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8fec:	e3a020c4 	mov	r2, #196	@ 0xc4
    8ff0:	e2810f53 	add	r0, r1, #332	@ 0x14c
    8ff4:	eb002655 	bl	12950 <assertion_failed>
    8ff8:	e59f1018 	ldr	r1, [pc, #24]	@ 9018 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8ffc:	e3a020cb 	mov	r2, #203	@ 0xcb
    9000:	e2810f57 	add	r0, r1, #348	@ 0x15c
    9004:	eb002651 	bl	12950 <assertion_failed>
    9008:	e59f1008 	ldr	r1, [pc, #8]	@ 9018 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    900c:	e3a020bc 	mov	r2, #188	@ 0xbc
    9010:	e2810078 	add	r0, r1, #120	@ 0x78
    9014:	eb00264d 	bl	12950 <assertion_failed>
    9018:	00014f68 	.word	0x00014f68

0000901c <CGPIOPin::DisconnectInterrupt()>:
    901c:	e5d03010 	ldrb	r3, [r0, #16]
    9020:	e92d4010 	push	{r4, lr}
    9024:	e2432002 	sub	r2, r3, #2
    9028:	e3530000 	cmp	r3, #0
    902c:	13520001 	cmpne	r2, #1
    9030:	8a000020 	bhi	90b8 <CGPIOPin::DisconnectInterrupt()+0x9c>
    9034:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
    9038:	e1a01000 	mov	r1, r0
    903c:	e3530006 	cmp	r3, #6
    9040:	1a00000c 	bne	9078 <CGPIOPin::DisconnectInterrupt()+0x5c>
    9044:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
    9048:	e3530006 	cmp	r3, #6
    904c:	1a00000d 	bne	9088 <CGPIOPin::DisconnectInterrupt()+0x6c>
    9050:	e590301c 	ldr	r3, [r0, #28]
    9054:	e3530000 	cmp	r3, #0
    9058:	0a00000e 	beq	9098 <CGPIOPin::DisconnectInterrupt()+0x7c>
    905c:	e5900018 	ldr	r0, [r0, #24]
    9060:	e3a03000 	mov	r3, #0
    9064:	e581301c 	str	r3, [r1, #28]
    9068:	e1500003 	cmp	r0, r3
    906c:	0a00000d 	beq	90a8 <CGPIOPin::DisconnectInterrupt()+0x8c>
    9070:	e8bd4010 	pop	{r4, lr}
    9074:	ea002ccc 	b	143ac <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    9078:	e59f1048 	ldr	r1, [pc, #72]	@ 90c8 <CGPIOPin::DisconnectInterrupt()+0xac>
    907c:	e3a020d5 	mov	r2, #213	@ 0xd5
    9080:	e28100f0 	add	r0, r1, #240	@ 0xf0
    9084:	eb002631 	bl	12950 <assertion_failed>
    9088:	e59f1038 	ldr	r1, [pc, #56]	@ 90c8 <CGPIOPin::DisconnectInterrupt()+0xac>
    908c:	e3a020d6 	mov	r2, #214	@ 0xd6
    9090:	e2810f45 	add	r0, r1, #276	@ 0x114
    9094:	eb00262d 	bl	12950 <assertion_failed>
    9098:	e59f1028 	ldr	r1, [pc, #40]	@ 90c8 <CGPIOPin::DisconnectInterrupt()+0xac>
    909c:	e3a020d8 	mov	r2, #216	@ 0xd8
    90a0:	e2810f5b 	add	r0, r1, #364	@ 0x16c
    90a4:	eb002629 	bl	12950 <assertion_failed>
    90a8:	e59f1018 	ldr	r1, [pc, #24]	@ 90c8 <CGPIOPin::DisconnectInterrupt()+0xac>
    90ac:	e3a020db 	mov	r2, #219	@ 0xdb
    90b0:	e2810f57 	add	r0, r1, #348	@ 0x15c
    90b4:	eb002625 	bl	12950 <assertion_failed>
    90b8:	e59f1008 	ldr	r1, [pc, #8]	@ 90c8 <CGPIOPin::DisconnectInterrupt()+0xac>
    90bc:	e3a020d1 	mov	r2, #209	@ 0xd1
    90c0:	e2810078 	add	r0, r1, #120	@ 0x78
    90c4:	eb002621 	bl	12950 <assertion_failed>
    90c8:	00014f68 	.word	0x00014f68

000090cc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    90cc:	e5d03010 	ldrb	r3, [r0, #16]
    90d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    90d4:	e2432002 	sub	r2, r3, #2
    90d8:	e3530000 	cmp	r3, #0
    90dc:	13520001 	cmpne	r2, #1
    90e0:	8a000032 	bhi	91b0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>
    90e4:	e590301c 	ldr	r3, [r0, #28]
    90e8:	e1a04000 	mov	r4, r0
    90ec:	e3530000 	cmp	r3, #0
    90f0:	0a00001e 	beq	9170 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
    90f4:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
    90f8:	e3530006 	cmp	r3, #6
    90fc:	1a00001f 	bne	9180 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb4>
    9100:	e3510005 	cmp	r1, #5
    9104:	8a000021 	bhi	9190 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
    9108:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
    910c:	e1530001 	cmp	r3, r1
    9110:	0a000022 	beq	91a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>
    9114:	e30776f0 	movw	r7, #30448	@ 0x76f0
    9118:	e3407001 	movt	r7, #1
    911c:	e3a0200c 	mov	r2, #12
    9120:	e5903008 	ldr	r3, [r0, #8]
    9124:	e5c01025 	strb	r1, [r0, #37]	@ 0x25
    9128:	e3a0604c 	mov	r6, #76	@ 0x4c
    912c:	e3436f20 	movt	r6, #16160	@ 0x3f20
    9130:	e5970000 	ldr	r0, [r7]
    9134:	e0050192 	mul	r5, r2, r1
    9138:	e0836006 	add	r6, r3, r6
    913c:	e3500000 	cmp	r0, #0
    9140:	1a000008 	bne	9168 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
    9144:	e7963005 	ldr	r3, [r6, r5]
    9148:	e594200c 	ldr	r2, [r4, #12]
    914c:	e1833002 	orr	r3, r3, r2
    9150:	e7863005 	str	r3, [r6, r5]
    9154:	e5973000 	ldr	r3, [r7]
    9158:	e3530000 	cmp	r3, #0
    915c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9160:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9164:	ea00240c 	b	1219c <LeaveCritical>
    9168:	eb0023e0 	bl	120f0 <EnterCritical>
    916c:	eafffff4 	b	9144 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
    9170:	e59f1048 	ldr	r1, [pc, #72]	@ 91c0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9174:	e3a020e4 	mov	r2, #228	@ 0xe4
    9178:	e2810f5b 	add	r0, r1, #364	@ 0x16c
    917c:	eb0025f3 	bl	12950 <assertion_failed>
    9180:	e59f1038 	ldr	r1, [pc, #56]	@ 91c0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9184:	e3a020e6 	mov	r2, #230	@ 0xe6
    9188:	e28100f0 	add	r0, r1, #240	@ 0xf0
    918c:	eb0025ef 	bl	12950 <assertion_failed>
    9190:	e59f1028 	ldr	r1, [pc, #40]	@ 91c0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9194:	e3a020e7 	mov	r2, #231	@ 0xe7
    9198:	e2810f5f 	add	r0, r1, #380	@ 0x17c
    919c:	eb0025eb 	bl	12950 <assertion_failed>
    91a0:	e59f1018 	ldr	r1, [pc, #24]	@ 91c0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    91a4:	e3a020e8 	mov	r2, #232	@ 0xe8
    91a8:	e2810e1a 	add	r0, r1, #416	@ 0x1a0
    91ac:	eb0025e7 	bl	12950 <assertion_failed>
    91b0:	e59f1008 	ldr	r1, [pc, #8]	@ 91c0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    91b4:	e3a020e1 	mov	r2, #225	@ 0xe1
    91b8:	e2810078 	add	r0, r1, #120	@ 0x78
    91bc:	eb0025e3 	bl	12950 <assertion_failed>
    91c0:	00014f68 	.word	0x00014f68

000091c4 <CGPIOPin::DisableInterrupt()>:
    91c4:	e5d03010 	ldrb	r3, [r0, #16]
    91c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91cc:	e2432002 	sub	r2, r3, #2
    91d0:	e3530000 	cmp	r3, #0
    91d4:	13520001 	cmpne	r2, #1
    91d8:	8a000020 	bhi	9260 <CGPIOPin::DisableInterrupt()+0x9c>
    91dc:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
    91e0:	e1a04000 	mov	r4, r0
    91e4:	e3530005 	cmp	r3, #5
    91e8:	8a000018 	bhi	9250 <CGPIOPin::DisableInterrupt()+0x8c>
    91ec:	e30776f0 	movw	r7, #30448	@ 0x76f0
    91f0:	e3407001 	movt	r7, #1
    91f4:	e3a0100c 	mov	r1, #12
    91f8:	e5902008 	ldr	r2, [r0, #8]
    91fc:	e3a0604c 	mov	r6, #76	@ 0x4c
    9200:	e3436f20 	movt	r6, #16160	@ 0x3f20
    9204:	e5970000 	ldr	r0, [r7]
    9208:	e0826006 	add	r6, r2, r6
    920c:	e0050391 	mul	r5, r1, r3
    9210:	e3500000 	cmp	r0, #0
    9214:	1a000009 	bne	9240 <CGPIOPin::DisableInterrupt()+0x7c>
    9218:	e7963005 	ldr	r3, [r6, r5]
    921c:	e594200c 	ldr	r2, [r4, #12]
    9220:	e1c33002 	bic	r3, r3, r2
    9224:	e7863005 	str	r3, [r6, r5]
    9228:	e5973000 	ldr	r3, [r7]
    922c:	e3530000 	cmp	r3, #0
    9230:	1a000004 	bne	9248 <CGPIOPin::DisableInterrupt()+0x84>
    9234:	e3a03006 	mov	r3, #6
    9238:	e5c43025 	strb	r3, [r4, #37]	@ 0x25
    923c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9240:	eb0023aa 	bl	120f0 <EnterCritical>
    9244:	eafffff3 	b	9218 <CGPIOPin::DisableInterrupt()+0x54>
    9248:	eb0023d3 	bl	1219c <LeaveCritical>
    924c:	eafffff8 	b	9234 <CGPIOPin::DisableInterrupt()+0x70>
    9250:	e59f1018 	ldr	r1, [pc, #24]	@ 9270 <CGPIOPin::DisableInterrupt()+0xac>
    9254:	e3a020fb 	mov	r2, #251	@ 0xfb
    9258:	e2810f6f 	add	r0, r1, #444	@ 0x1bc
    925c:	eb0025bb 	bl	12950 <assertion_failed>
    9260:	e59f1008 	ldr	r1, [pc, #8]	@ 9270 <CGPIOPin::DisableInterrupt()+0xac>
    9264:	e3a020f7 	mov	r2, #247	@ 0xf7
    9268:	e2810078 	add	r0, r1, #120	@ 0x78
    926c:	eb0025b7 	bl	12950 <assertion_failed>
    9270:	00014f68 	.word	0x00014f68

00009274 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    9274:	e5d03010 	ldrb	r3, [r0, #16]
    9278:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    927c:	e2432002 	sub	r2, r3, #2
    9280:	e3530000 	cmp	r3, #0
    9284:	13520001 	cmpne	r2, #1
    9288:	8a000032 	bhi	9358 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>
    928c:	e590301c 	ldr	r3, [r0, #28]
    9290:	e1a04000 	mov	r4, r0
    9294:	e3530000 	cmp	r3, #0
    9298:	0a00001e 	beq	9318 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
    929c:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
    92a0:	e3530006 	cmp	r3, #6
    92a4:	1a00001f 	bne	9328 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb4>
    92a8:	e3510005 	cmp	r1, #5
    92ac:	8a000021 	bhi	9338 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
    92b0:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
    92b4:	e1530001 	cmp	r3, r1
    92b8:	0a000022 	beq	9348 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>
    92bc:	e30776f0 	movw	r7, #30448	@ 0x76f0
    92c0:	e3407001 	movt	r7, #1
    92c4:	e3a0200c 	mov	r2, #12
    92c8:	e5903008 	ldr	r3, [r0, #8]
    92cc:	e5c01026 	strb	r1, [r0, #38]	@ 0x26
    92d0:	e3a0604c 	mov	r6, #76	@ 0x4c
    92d4:	e3436f20 	movt	r6, #16160	@ 0x3f20
    92d8:	e5970000 	ldr	r0, [r7]
    92dc:	e0050192 	mul	r5, r2, r1
    92e0:	e0836006 	add	r6, r3, r6
    92e4:	e3500000 	cmp	r0, #0
    92e8:	1a000008 	bne	9310 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
    92ec:	e7963005 	ldr	r3, [r6, r5]
    92f0:	e594200c 	ldr	r2, [r4, #12]
    92f4:	e1833002 	orr	r3, r3, r2
    92f8:	e7863005 	str	r3, [r6, r5]
    92fc:	e5973000 	ldr	r3, [r7]
    9300:	e3530000 	cmp	r3, #0
    9304:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9308:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    930c:	ea0023a2 	b	1219c <LeaveCritical>
    9310:	eb002376 	bl	120f0 <EnterCritical>
    9314:	eafffff4 	b	92ec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
    9318:	e59f1048 	ldr	r1, [pc, #72]	@ 9368 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    931c:	e300210d 	movw	r2, #269	@ 0x10d
    9320:	e2810f5b 	add	r0, r1, #364	@ 0x16c
    9324:	eb002589 	bl	12950 <assertion_failed>
    9328:	e59f1038 	ldr	r1, [pc, #56]	@ 9368 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    932c:	e300210f 	movw	r2, #271	@ 0x10f
    9330:	e2810f45 	add	r0, r1, #276	@ 0x114
    9334:	eb002585 	bl	12950 <assertion_failed>
    9338:	e59f1028 	ldr	r1, [pc, #40]	@ 9368 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    933c:	e3a02e11 	mov	r2, #272	@ 0x110
    9340:	e2810f5f 	add	r0, r1, #380	@ 0x17c
    9344:	eb002581 	bl	12950 <assertion_failed>
    9348:	e59f1018 	ldr	r1, [pc, #24]	@ 9368 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    934c:	e3002111 	movw	r2, #273	@ 0x111
    9350:	e2810e1e 	add	r0, r1, #480	@ 0x1e0
    9354:	eb00257d 	bl	12950 <assertion_failed>
    9358:	e59f1008 	ldr	r1, [pc, #8]	@ 9368 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    935c:	e300210a 	movw	r2, #266	@ 0x10a
    9360:	e2810078 	add	r0, r1, #120	@ 0x78
    9364:	eb002579 	bl	12950 <assertion_failed>
    9368:	00014f68 	.word	0x00014f68

0000936c <CGPIOPin::DisableInterrupt2()>:
    936c:	e5d03010 	ldrb	r3, [r0, #16]
    9370:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9374:	e2432002 	sub	r2, r3, #2
    9378:	e3530000 	cmp	r3, #0
    937c:	13520001 	cmpne	r2, #1
    9380:	8a000020 	bhi	9408 <CGPIOPin::DisableInterrupt2()+0x9c>
    9384:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
    9388:	e1a04000 	mov	r4, r0
    938c:	e3530005 	cmp	r3, #5
    9390:	8a000018 	bhi	93f8 <CGPIOPin::DisableInterrupt2()+0x8c>
    9394:	e30776f0 	movw	r7, #30448	@ 0x76f0
    9398:	e3407001 	movt	r7, #1
    939c:	e3a0100c 	mov	r1, #12
    93a0:	e5902008 	ldr	r2, [r0, #8]
    93a4:	e3a0604c 	mov	r6, #76	@ 0x4c
    93a8:	e3436f20 	movt	r6, #16160	@ 0x3f20
    93ac:	e5970000 	ldr	r0, [r7]
    93b0:	e0826006 	add	r6, r2, r6
    93b4:	e0050391 	mul	r5, r1, r3
    93b8:	e3500000 	cmp	r0, #0
    93bc:	1a000009 	bne	93e8 <CGPIOPin::DisableInterrupt2()+0x7c>
    93c0:	e7963005 	ldr	r3, [r6, r5]
    93c4:	e594200c 	ldr	r2, [r4, #12]
    93c8:	e1c33002 	bic	r3, r3, r2
    93cc:	e7863005 	str	r3, [r6, r5]
    93d0:	e5973000 	ldr	r3, [r7]
    93d4:	e3530000 	cmp	r3, #0
    93d8:	1a000004 	bne	93f0 <CGPIOPin::DisableInterrupt2()+0x84>
    93dc:	e3a03006 	mov	r3, #6
    93e0:	e5c43026 	strb	r3, [r4, #38]	@ 0x26
    93e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    93e8:	eb002340 	bl	120f0 <EnterCritical>
    93ec:	eafffff3 	b	93c0 <CGPIOPin::DisableInterrupt2()+0x54>
    93f0:	eb002369 	bl	1219c <LeaveCritical>
    93f4:	eafffff8 	b	93dc <CGPIOPin::DisableInterrupt2()+0x70>
    93f8:	e59f1018 	ldr	r1, [pc, #24]	@ 9418 <CGPIOPin::DisableInterrupt2()+0xac>
    93fc:	e3a02f49 	mov	r2, #292	@ 0x124
    9400:	e2810f7f 	add	r0, r1, #508	@ 0x1fc
    9404:	eb002551 	bl	12950 <assertion_failed>
    9408:	e59f1008 	ldr	r1, [pc, #8]	@ 9418 <CGPIOPin::DisableInterrupt2()+0xac>
    940c:	e3a02e12 	mov	r2, #288	@ 0x120
    9410:	e2810078 	add	r0, r1, #120	@ 0x78
    9414:	eb00254d 	bl	12950 <assertion_failed>
    9418:	00014f68 	.word	0x00014f68

0000941c <CGPIOPin::AcknowledgeInterrupt()>:
    941c:	e590301c 	ldr	r3, [r0, #28]
    9420:	e92d4010 	push	{r4, lr}
    9424:	e3530000 	cmp	r3, #0
    9428:	0a000008 	beq	9450 <CGPIOPin::AcknowledgeInterrupt()+0x34>
    942c:	e5d03024 	ldrb	r3, [r0, #36]	@ 0x24
    9430:	e3530000 	cmp	r3, #0
    9434:	1a000009 	bne	9460 <CGPIOPin::AcknowledgeInterrupt()+0x44>
    9438:	e5902008 	ldr	r2, [r0, #8]
    943c:	e3a03040 	mov	r3, #64	@ 0x40
    9440:	e3433f20 	movt	r3, #16160	@ 0x3f20
    9444:	e590100c 	ldr	r1, [r0, #12]
    9448:	e7821003 	str	r1, [r2, r3]
    944c:	e8bd8010 	pop	{r4, pc}
    9450:	e59f1018 	ldr	r1, [pc, #24]	@ 9470 <CGPIOPin::AcknowledgeInterrupt()+0x54>
    9454:	e3002133 	movw	r2, #307	@ 0x133
    9458:	e2810f5b 	add	r0, r1, #364	@ 0x16c
    945c:	eb00253b 	bl	12950 <assertion_failed>
    9460:	e59f1008 	ldr	r1, [pc, #8]	@ 9470 <CGPIOPin::AcknowledgeInterrupt()+0x54>
    9464:	e3a02f4d 	mov	r2, #308	@ 0x134
    9468:	e2810e22 	add	r0, r1, #544	@ 0x220
    946c:	eb002537 	bl	12950 <assertion_failed>
    9470:	00014f68 	.word	0x00014f68

00009474 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
    9474:	e1d12000 	bics	r2, r1, r0
    9478:	13a03000 	movne	r3, #0
    947c:	13433f20 	movtne	r3, #16160	@ 0x3f20
    9480:	15832028 	strne	r2, [r3, #40]	@ 0x28
    9484:	e0100001 	ands	r0, r0, r1
    9488:	13a03000 	movne	r3, #0
    948c:	13433f20 	movtne	r3, #16160	@ 0x3f20
    9490:	1583001c 	strne	r0, [r3, #28]
    9494:	e12fff1e 	bx	lr

00009498 <CGPIOPin::ReadAll()>:
    9498:	e3a03000 	mov	r3, #0
    949c:	e3433f20 	movt	r3, #16160	@ 0x3f20
    94a0:	e5930034 	ldr	r0, [r3, #52]	@ 0x34
    94a4:	e12fff1e 	bx	lr

000094a8 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
    94a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    94ac:	e30746f0 	movw	r4, #30448	@ 0x76f0
    94b0:	e3404001 	movt	r4, #1
    94b4:	e1a05000 	mov	r5, r0
    94b8:	e1a06001 	mov	r6, r1
    94bc:	e5940000 	ldr	r0, [r4]
    94c0:	e3500000 	cmp	r0, #0
    94c4:	1a000015 	bne	9520 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x78>
    94c8:	e3a07098 	mov	r7, #152	@ 0x98
    94cc:	e3437f20 	movt	r7, #16160	@ 0x3f20
    94d0:	e5959008 	ldr	r9, [r5, #8]
    94d4:	e3560002 	cmp	r6, #2
    94d8:	8a000012 	bhi	9528 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x80>
    94dc:	e3a08000 	mov	r8, #0
    94e0:	e3438f20 	movt	r8, #16160	@ 0x3f20
    94e4:	e3a00005 	mov	r0, #5
    94e8:	e5886094 	str	r6, [r8, #148]	@ 0x94
    94ec:	eb001b9d 	bl	10368 <CTimer::SimpleusDelay(unsigned int)>
    94f0:	e595300c 	ldr	r3, [r5, #12]
    94f4:	e7893007 	str	r3, [r9, r7]
    94f8:	e3a00005 	mov	r0, #5
    94fc:	eb001b99 	bl	10368 <CTimer::SimpleusDelay(unsigned int)>
    9500:	e3a03000 	mov	r3, #0
    9504:	e5883094 	str	r3, [r8, #148]	@ 0x94
    9508:	e7893007 	str	r3, [r9, r7]
    950c:	e5943000 	ldr	r3, [r4]
    9510:	e3530000 	cmp	r3, #0
    9514:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9518:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    951c:	ea00231e 	b	1219c <LeaveCritical>
    9520:	eb0022f2 	bl	120f0 <EnterCritical>
    9524:	eaffffe7 	b	94c8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x20>
    9528:	e59f1008 	ldr	r1, [pc, #8]	@ 9538 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
    952c:	e3002165 	movw	r2, #357	@ 0x165
    9530:	e2810f8b 	add	r0, r1, #556	@ 0x22c
    9534:	eb002505 	bl	12950 <assertion_failed>
    9538:	00014f68 	.word	0x00014f68

0000953c <CGPIOPin::SetAlternateFunction(unsigned int)>:
    953c:	e5903004 	ldr	r3, [r0, #4]
    9540:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9544:	e3530035 	cmp	r3, #53	@ 0x35
    9548:	8a000021 	bhi	95d4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x98>
    954c:	e30c2ccd 	movw	r2, #52429	@ 0xcccd
    9550:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
    9554:	e1a06001 	mov	r6, r1
    9558:	e3a0100a 	mov	r1, #10
    955c:	e3560005 	cmp	r6, #5
    9560:	e0820392 	umull	r0, r2, r2, r3
    9564:	e1a021a2 	lsr	r2, r2, #3
    9568:	e282053f 	add	r0, r2, #264241152	@ 0xfc00000
    956c:	e2800702 	add	r0, r0, #524288	@ 0x80000
    9570:	e0633291 	mls	r3, r1, r2, r3
    9574:	e1a07100 	lsl	r7, r0, #2
    9578:	e0834083 	add	r4, r3, r3, lsl #1
    957c:	8a000018 	bhi	95e4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
    9580:	e30756f0 	movw	r5, #30448	@ 0x76f0
    9584:	e3405001 	movt	r5, #1
    9588:	e5950000 	ldr	r0, [r5]
    958c:	e3500000 	cmp	r0, #0
    9590:	1a00000d 	bne	95cc <CGPIOPin::SetAlternateFunction(unsigned int)+0x90>
    9594:	e3042f58 	movw	r2, #20312	@ 0x4f58
    9598:	e3402001 	movt	r2, #1
    959c:	e0822106 	add	r2, r2, r6, lsl #2
    95a0:	e5973000 	ldr	r3, [r7]
    95a4:	e3a01007 	mov	r1, #7
    95a8:	e5922258 	ldr	r2, [r2, #600]	@ 0x258
    95ac:	e1c33411 	bic	r3, r3, r1, lsl r4
    95b0:	e1833412 	orr	r3, r3, r2, lsl r4
    95b4:	e5873000 	str	r3, [r7]
    95b8:	e5953000 	ldr	r3, [r5]
    95bc:	e3530000 	cmp	r3, #0
    95c0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    95c4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95c8:	ea0022f3 	b	1219c <LeaveCritical>
    95cc:	eb0022c7 	bl	120f0 <EnterCritical>
    95d0:	eaffffef 	b	9594 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    95d4:	e59f1018 	ldr	r1, [pc, #24]	@ 95f4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    95d8:	e3002181 	movw	r2, #385	@ 0x181
    95dc:	e2810020 	add	r0, r1, #32
    95e0:	eb0024da 	bl	12950 <assertion_failed>
    95e4:	e59f1008 	ldr	r1, [pc, #8]	@ 95f4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    95e8:	e3002185 	movw	r2, #389	@ 0x185
    95ec:	e2810f8e 	add	r0, r1, #568	@ 0x238
    95f0:	eb0024d6 	bl	12950 <assertion_failed>
    95f4:	00014f68 	.word	0x00014f68

000095f8 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    95f8:	e3510009 	cmp	r1, #9
    95fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9600:	8a000057 	bhi	9764 <CGPIOPin::SetMode(TGPIOMode, bool)+0x16c>
    9604:	e1a03001 	mov	r3, r1
    9608:	e2411004 	sub	r1, r1, #4
    960c:	e1a06002 	mov	r6, r2
    9610:	e1a04000 	mov	r4, r0
    9614:	e6ef2071 	uxtb	r2, r1
    9618:	e5c03010 	strb	r3, [r0, #16]
    961c:	e3520005 	cmp	r2, #5
    9620:	9a00002d 	bls	96dc <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
    9624:	e3530001 	cmp	r3, #1
    9628:	13a02000 	movne	r2, #0
    962c:	02062001 	andeq	r2, r6, #1
    9630:	e3520000 	cmp	r2, #0
    9634:	1a00004e 	bne	9774 <CGPIOPin::SetMode(TGPIOMode, bool)+0x17c>
    9638:	e5943004 	ldr	r3, [r4, #4]
    963c:	e3530035 	cmp	r3, #53	@ 0x35
    9640:	8a00004e 	bhi	9780 <CGPIOPin::SetMode(TGPIOMode, bool)+0x188>
    9644:	e30c2ccd 	movw	r2, #52429	@ 0xcccd
    9648:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
    964c:	e30786f0 	movw	r8, #30448	@ 0x76f0
    9650:	e3408001 	movt	r8, #1
    9654:	e0821392 	umull	r1, r2, r2, r3
    9658:	e3a0100a 	mov	r1, #10
    965c:	e5980000 	ldr	r0, [r8]
    9660:	e1a021a2 	lsr	r2, r2, #3
    9664:	e3500000 	cmp	r0, #0
    9668:	e282753f 	add	r7, r2, #264241152	@ 0xfc00000
    966c:	e2877702 	add	r7, r7, #524288	@ 0x80000
    9670:	e0653291 	mls	r5, r1, r2, r3
    9674:	e1a07107 	lsl	r7, r7, #2
    9678:	e0855085 	add	r5, r5, r5, lsl #1
    967c:	1a00001f 	bne	9700 <CGPIOPin::SetMode(TGPIOMode, bool)+0x108>
    9680:	e5d42010 	ldrb	r2, [r4, #16]
    9684:	e3a01007 	mov	r1, #7
    9688:	e5973000 	ldr	r3, [r7]
    968c:	e2422001 	sub	r2, r2, #1
    9690:	e16f2f12 	clz	r2, r2
    9694:	e1c33511 	bic	r3, r3, r1, lsl r5
    9698:	e1a022a2 	lsr	r2, r2, #5
    969c:	e1833512 	orr	r3, r3, r2, lsl r5
    96a0:	e5873000 	str	r3, [r7]
    96a4:	e5983000 	ldr	r3, [r8]
    96a8:	e3530000 	cmp	r3, #0
    96ac:	1a00000f 	bne	96f0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf8>
    96b0:	e3560000 	cmp	r6, #0
    96b4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    96b8:	e5d43010 	ldrb	r3, [r4, #16]
    96bc:	e3530003 	cmp	r3, #3
    96c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    96c4:	ea000003 	b	96d8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe0>
    96c8:	00009738 	.word	0x00009738
    96cc:	00009728 	.word	0x00009728
    96d0:	00009718 	.word	0x00009718
    96d4:	00009708 	.word	0x00009708
    96d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    96dc:	e3560000 	cmp	r6, #0
    96e0:	1a000018 	bne	9748 <CGPIOPin::SetMode(TGPIOMode, bool)+0x150>
    96e4:	e1a00004 	mov	r0, r4
    96e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    96ec:	eaffff92 	b	953c <CGPIOPin::SetAlternateFunction(unsigned int)>
    96f0:	eb0022a9 	bl	1219c <LeaveCritical>
    96f4:	e3560000 	cmp	r6, #0
    96f8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    96fc:	eaffffed 	b	96b8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
    9700:	eb00227a 	bl	120f0 <EnterCritical>
    9704:	eaffffdd 	b	9680 <CGPIOPin::SetMode(TGPIOMode, bool)+0x88>
    9708:	e1a00004 	mov	r0, r4
    970c:	e3a01001 	mov	r1, #1
    9710:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9714:	eaffff63 	b	94a8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9718:	e1a00004 	mov	r0, r4
    971c:	e3a01002 	mov	r1, #2
    9720:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9724:	eaffff5f 	b	94a8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9728:	e1a00004 	mov	r0, r4
    972c:	e3a01000 	mov	r1, #0
    9730:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9734:	eafffda5 	b	8dd0 <CGPIOPin::Write(unsigned int)>
    9738:	e1a00004 	mov	r0, r4
    973c:	e3a01000 	mov	r1, #0
    9740:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9744:	eaffff57 	b	94a8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9748:	e3a01000 	mov	r1, #0
    974c:	ebffff55 	bl	94a8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9750:	e5d43010 	ldrb	r3, [r4, #16]
    9754:	e1a00004 	mov	r0, r4
    9758:	e2431004 	sub	r1, r3, #4
    975c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9760:	eaffff75 	b	953c <CGPIOPin::SetAlternateFunction(unsigned int)>
    9764:	e59f1024 	ldr	r1, [pc, #36]	@ 9790 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
    9768:	e3a0204f 	mov	r2, #79	@ 0x4f
    976c:	e2810e26 	add	r0, r1, #608	@ 0x260
    9770:	eb002476 	bl	12950 <assertion_failed>
    9774:	e3a01000 	mov	r1, #0
    9778:	ebffff4a 	bl	94a8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    977c:	eaffffad 	b	9638 <CGPIOPin::SetMode(TGPIOMode, bool)+0x40>
    9780:	e59f1008 	ldr	r1, [pc, #8]	@ 9790 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
    9784:	e3a02068 	mov	r2, #104	@ 0x68
    9788:	e2810020 	add	r0, r1, #32
    978c:	eb00246f 	bl	12950 <assertion_failed>
    9790:	00014f68 	.word	0x00014f68

00009794 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    9794:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9798:	e3510035 	cmp	r1, #53	@ 0x35
    979c:	e59f7090 	ldr	r7, [pc, #144]	@ 9834 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xa0>
    97a0:	e5803018 	str	r3, [r0, #24]
    97a4:	e1a04000 	mov	r4, r0
    97a8:	e3a03000 	mov	r3, #0
    97ac:	e1a05001 	mov	r5, r1
    97b0:	e580301c 	str	r3, [r0, #28]
    97b4:	e1a06002 	mov	r6, r2
    97b8:	e3a03006 	mov	r3, #6
    97bc:	e5807000 	str	r7, [r0]
    97c0:	e5c03025 	strb	r3, [r0, #37]	@ 0x25
    97c4:	e5c03026 	strb	r3, [r0, #38]	@ 0x26
    97c8:	e3a0300a 	mov	r3, #10
    97cc:	e5801004 	str	r1, [r0, #4]
    97d0:	e5c03010 	strb	r3, [r0, #16]
    97d4:	8a00000b 	bhi	9808 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
    97d8:	e3a02001 	mov	r2, #1
    97dc:	e1a032a5 	lsr	r3, r5, #5
    97e0:	e205501f 	and	r5, r5, #31
    97e4:	e1a00004 	mov	r0, r4
    97e8:	e1a03103 	lsl	r3, r3, #2
    97ec:	e1a01006 	mov	r1, r6
    97f0:	e1a05512 	lsl	r5, r2, r5
    97f4:	e5843008 	str	r3, [r4, #8]
    97f8:	e584500c 	str	r5, [r4, #12]
    97fc:	ebffff7d 	bl	95f8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    9800:	e1a00004 	mov	r0, r4
    9804:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9808:	eb0006c3 	bl	b31c <CMachineInfo::Get()>
    980c:	e6ef1075 	uxtb	r1, r5
    9810:	eb000628 	bl	b0b8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9814:	e1a05000 	mov	r5, r0
    9818:	e3500035 	cmp	r0, #53	@ 0x35
    981c:	e5840004 	str	r0, [r4, #4]
    9820:	9affffec 	bls	97d8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9824:	e3a02047 	mov	r2, #71	@ 0x47
    9828:	e2871008 	add	r1, r7, #8
    982c:	e2870028 	add	r0, r7, #40	@ 0x28
    9830:	eb002446 	bl	12950 <assertion_failed>
    9834:	00014f60 	.word	0x00014f60

00009838 <CGPIOPin::InterruptHandler()>:
    9838:	e5d03010 	ldrb	r3, [r0, #16]
    983c:	e92d4010 	push	{r4, lr}
    9840:	e2432002 	sub	r2, r3, #2
    9844:	e3530000 	cmp	r3, #0
    9848:	13520001 	cmpne	r2, #1
    984c:	8a000013 	bhi	98a0 <CGPIOPin::InterruptHandler()+0x68>
    9850:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
    9854:	e3530005 	cmp	r3, #5
    9858:	8a000005 	bhi	9874 <CGPIOPin::InterruptHandler()+0x3c>
    985c:	e590301c 	ldr	r3, [r0, #28]
    9860:	e3530000 	cmp	r3, #0
    9864:	0a000009 	beq	9890 <CGPIOPin::InterruptHandler()+0x58>
    9868:	e8bd4010 	pop	{r4, lr}
    986c:	e5900020 	ldr	r0, [r0, #32]
    9870:	e12fff13 	bx	r3
    9874:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
    9878:	e3530005 	cmp	r3, #5
    987c:	9afffff6 	bls	985c <CGPIOPin::InterruptHandler()+0x24>
    9880:	e59f1028 	ldr	r1, [pc, #40]	@ 98b0 <CGPIOPin::InterruptHandler()+0x78>
    9884:	e3002195 	movw	r2, #405	@ 0x195
    9888:	e2810f9e 	add	r0, r1, #632	@ 0x278
    988c:	eb00242f 	bl	12950 <assertion_failed>
    9890:	e59f1018 	ldr	r1, [pc, #24]	@ 98b0 <CGPIOPin::InterruptHandler()+0x78>
    9894:	e3a02f66 	mov	r2, #408	@ 0x198
    9898:	e2810f5b 	add	r0, r1, #364	@ 0x16c
    989c:	eb00242b 	bl	12950 <assertion_failed>
    98a0:	e59f1008 	ldr	r1, [pc, #8]	@ 98b0 <CGPIOPin::InterruptHandler()+0x78>
    98a4:	e3002192 	movw	r2, #402	@ 0x192
    98a8:	e2810078 	add	r0, r1, #120	@ 0x78
    98ac:	eb002427 	bl	12950 <assertion_failed>
    98b0:	00014f68 	.word	0x00014f68

000098b4 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    98b4:	e3500035 	cmp	r0, #53	@ 0x35
    98b8:	e92d4070 	push	{r4, r5, r6, lr}
    98bc:	8a00001a 	bhi	992c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    98c0:	e30766f0 	movw	r6, #30448	@ 0x76f0
    98c4:	e3406001 	movt	r6, #1
    98c8:	e3a04013 	mov	r4, #19
    98cc:	e3404fc8 	movt	r4, #4040	@ 0xfc8
    98d0:	e08442a0 	add	r4, r4, r0, lsr #5
    98d4:	e200301f 	and	r3, r0, #31
    98d8:	e3a02001 	mov	r2, #1
    98dc:	e5960000 	ldr	r0, [r6]
    98e0:	e1a04104 	lsl	r4, r4, #2
    98e4:	e1a05312 	lsl	r5, r2, r3
    98e8:	e3500000 	cmp	r0, #0
    98ec:	1a00000c 	bne	9924 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    98f0:	e3a0108b 	mov	r1, #139	@ 0x8b
    98f4:	e3431f20 	movt	r1, #16160	@ 0x3f20
    98f8:	e1e02005 	mvn	r2, r5
    98fc:	e5943000 	ldr	r3, [r4]
    9900:	e0033002 	and	r3, r3, r2
    9904:	e484300c 	str	r3, [r4], #12
    9908:	e1540001 	cmp	r4, r1
    990c:	9afffffa 	bls	98fc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
    9910:	e5963000 	ldr	r3, [r6]
    9914:	e3530000 	cmp	r3, #0
    9918:	08bd8070 	popeq	{r4, r5, r6, pc}
    991c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9920:	ea00221d 	b	1219c <LeaveCritical>
    9924:	eb0021f1 	bl	120f0 <EnterCritical>
    9928:	eafffff0 	b	98f0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
    992c:	e59f1008 	ldr	r1, [pc, #8]	@ 993c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    9930:	e300219e 	movw	r2, #414	@ 0x19e
    9934:	e2810fb1 	add	r0, r1, #708	@ 0x2c4
    9938:	eb002404 	bl	12950 <assertion_failed>
    993c:	00014f68 	.word	0x00014f68

00009940 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    9940:	e30736f0 	movw	r3, #30448	@ 0x76f0
    9944:	e3403001 	movt	r3, #1
    9948:	e3a02001 	mov	r2, #1
    994c:	e5832000 	str	r2, [r3]
    9950:	e12fff1e 	bx	lr

00009954 <CKernelOptions::~CKernelOptions()>:
    9954:	e92d4070 	push	{r4, r5, r6, lr}
    9958:	e1a05000 	mov	r5, r0
    995c:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
    9960:	e3540000 	cmp	r4, #0
    9964:	0a00000f 	beq	99a8 <CKernelOptions::~CKernelOptions()+0x54>
    9968:	e5940008 	ldr	r0, [r4, #8]
    996c:	e5943000 	ldr	r3, [r4]
    9970:	e3500000 	cmp	r0, #0
    9974:	e5853890 	str	r3, [r5, #2192]	@ 0x890
    9978:	0a000000 	beq	9980 <CKernelOptions::~CKernelOptions()+0x2c>
    997c:	eb001df8 	bl	11164 <operator delete[](void*)>
    9980:	e5940004 	ldr	r0, [r4, #4]
    9984:	e3500000 	cmp	r0, #0
    9988:	0a000000 	beq	9990 <CKernelOptions::~CKernelOptions()+0x3c>
    998c:	eb001df4 	bl	11164 <operator delete[](void*)>
    9990:	e1a00004 	mov	r0, r4
    9994:	e3a0100c 	mov	r1, #12
    9998:	eb001df7 	bl	1117c <operator delete(void*, unsigned int)>
    999c:	e5954890 	ldr	r4, [r5, #2192]	@ 0x890
    99a0:	e3540000 	cmp	r4, #0
    99a4:	1affffef 	bne	9968 <CKernelOptions::~CKernelOptions()+0x14>
    99a8:	e30736f4 	movw	r3, #30452	@ 0x76f4
    99ac:	e3403001 	movt	r3, #1
    99b0:	e3a02000 	mov	r2, #0
    99b4:	e1a00005 	mov	r0, r5
    99b8:	e5832000 	str	r2, [r3]
    99bc:	e8bd8070 	pop	{r4, r5, r6, pc}

000099c0 <CKernelOptions::GetWidth() const>:
    99c0:	e5900810 	ldr	r0, [r0, #2064]	@ 0x810
    99c4:	e12fff1e 	bx	lr

000099c8 <CKernelOptions::GetHeight() const>:
    99c8:	e5900814 	ldr	r0, [r0, #2068]	@ 0x814
    99cc:	e12fff1e 	bx	lr

000099d0 <CKernelOptions::GetLogDevice() const>:
    99d0:	e2800e81 	add	r0, r0, #2064	@ 0x810
    99d4:	e2800008 	add	r0, r0, #8
    99d8:	e12fff1e 	bx	lr

000099dc <CKernelOptions::GetLogLevel() const>:
    99dc:	e590082c 	ldr	r0, [r0, #2092]	@ 0x82c
    99e0:	e12fff1e 	bx	lr

000099e4 <CKernelOptions::GetKeyMap() const>:
    99e4:	e2800e83 	add	r0, r0, #2096	@ 0x830
    99e8:	e12fff1e 	bx	lr

000099ec <CKernelOptions::GetUSBPowerDelay() const>:
    99ec:	e5900834 	ldr	r0, [r0, #2100]	@ 0x834
    99f0:	e12fff1e 	bx	lr

000099f4 <CKernelOptions::GetUSBFullSpeed() const>:
    99f4:	e5d00838 	ldrb	r0, [r0, #2104]	@ 0x838
    99f8:	e12fff1e 	bx	lr

000099fc <CKernelOptions::GetUSBBoost() const>:
    99fc:	e5d00839 	ldrb	r0, [r0, #2105]	@ 0x839
    9a00:	e12fff1e 	bx	lr

00009a04 <CKernelOptions::GetUSBIgnore() const>:
    9a04:	e2800e83 	add	r0, r0, #2096	@ 0x830
    9a08:	e280000a 	add	r0, r0, #10
    9a0c:	e12fff1e 	bx	lr

00009a10 <CKernelOptions::GetUSBSoundChannels() const>:
    9a10:	e2800e85 	add	r0, r0, #2128	@ 0x850
    9a14:	e12fff1e 	bx	lr

00009a18 <CKernelOptions::GetSoundDevice() const>:
    9a18:	e2800e85 	add	r0, r0, #2128	@ 0x850
    9a1c:	e2800008 	add	r0, r0, #8
    9a20:	e12fff1e 	bx	lr

00009a24 <CKernelOptions::GetSoundOption() const>:
    9a24:	e590086c 	ldr	r0, [r0, #2156]	@ 0x86c
    9a28:	e12fff1e 	bx	lr

00009a2c <CKernelOptions::GetCPUSpeed() const>:
    9a2c:	e5d00870 	ldrb	r0, [r0, #2160]	@ 0x870
    9a30:	e12fff1e 	bx	lr

00009a34 <CKernelOptions::GetSoCMaxTemp() const>:
    9a34:	e5900874 	ldr	r0, [r0, #2164]	@ 0x874
    9a38:	e12fff1e 	bx	lr

00009a3c <CKernelOptions::GetGPIOFanPin() const>:
    9a3c:	e5900878 	ldr	r0, [r0, #2168]	@ 0x878
    9a40:	e12fff1e 	bx	lr

00009a44 <CKernelOptions::GetTouchScreen() const>:
    9a44:	e5d0387c 	ldrb	r3, [r0, #2172]	@ 0x87c
    9a48:	e3530000 	cmp	r3, #0
    9a4c:	12800d22 	addne	r0, r0, #2176	@ 0x880
    9a50:	01a00003 	moveq	r0, r3
    9a54:	e12fff1e 	bx	lr

00009a58 <CKernelOptions::GetAppOptionString(char const*, char const*) const>:
    9a58:	e92d4070 	push	{r4, r5, r6, lr}
    9a5c:	e1a06002 	mov	r6, r2
    9a60:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
    9a64:	e3540000 	cmp	r4, #0
    9a68:	0a00000b 	beq	9a9c <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
    9a6c:	e1a05001 	mov	r5, r1
    9a70:	ea000002 	b	9a80 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x28>
    9a74:	e5944000 	ldr	r4, [r4]
    9a78:	e3540000 	cmp	r4, #0
    9a7c:	0a000006 	beq	9a9c <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
    9a80:	e5940004 	ldr	r0, [r4, #4]
    9a84:	e1a01005 	mov	r1, r5
    9a88:	eb001aa1 	bl	10514 <strcmp>
    9a8c:	e3500000 	cmp	r0, #0
    9a90:	1afffff7 	bne	9a74 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x1c>
    9a94:	e5940008 	ldr	r0, [r4, #8]
    9a98:	e8bd8070 	pop	{r4, r5, r6, pc}
    9a9c:	e1a00006 	mov	r0, r6
    9aa0:	e8bd8070 	pop	{r4, r5, r6, pc}

00009aa4 <CKernelOptions::Get()>:
    9aa4:	e30736f4 	movw	r3, #30452	@ 0x76f4
    9aa8:	e3403001 	movt	r3, #1
    9aac:	e5930000 	ldr	r0, [r3]
    9ab0:	e12fff1e 	bx	lr

00009ab4 <CKernelOptions::GetToken()>:
    9ab4:	e1a01000 	mov	r1, r0
    9ab8:	e590080c 	ldr	r0, [r0, #2060]	@ 0x80c
    9abc:	e1d030d0 	ldrsb	r3, [r0]
    9ac0:	e3530000 	cmp	r3, #0
    9ac4:	1a000005 	bne	9ae0 <CKernelOptions::GetToken()+0x2c>
    9ac8:	ea000017 	b	9b2c <CKernelOptions::GetToken()+0x78>
    9acc:	e2800001 	add	r0, r0, #1
    9ad0:	e581080c 	str	r0, [r1, #2060]	@ 0x80c
    9ad4:	e1d030d0 	ldrsb	r3, [r0]
    9ad8:	e3530000 	cmp	r3, #0
    9adc:	0a000012 	beq	9b2c <CKernelOptions::GetToken()+0x78>
    9ae0:	e3530020 	cmp	r3, #32
    9ae4:	0afffff8 	beq	9acc <CKernelOptions::GetToken()+0x18>
    9ae8:	e591380c 	ldr	r3, [r1, #2060]	@ 0x80c
    9aec:	e1d320d0 	ldrsb	r2, [r3]
    9af0:	e3520000 	cmp	r2, #0
    9af4:	1a000004 	bne	9b0c <CKernelOptions::GetToken()+0x58>
    9af8:	e12fff1e 	bx	lr
    9afc:	e581380c 	str	r3, [r1, #2060]	@ 0x80c
    9b00:	e1d320d0 	ldrsb	r2, [r3]
    9b04:	e3520000 	cmp	r2, #0
    9b08:	012fff1e 	bxeq	lr
    9b0c:	e3520020 	cmp	r2, #32
    9b10:	e1a02003 	mov	r2, r3
    9b14:	e2833001 	add	r3, r3, #1
    9b18:	1afffff7 	bne	9afc <CKernelOptions::GetToken()+0x48>
    9b1c:	e3a0c000 	mov	ip, #0
    9b20:	e581380c 	str	r3, [r1, #2060]	@ 0x80c
    9b24:	e5c2c000 	strb	ip, [r2]
    9b28:	e12fff1e 	bx	lr
    9b2c:	e3a00000 	mov	r0, #0
    9b30:	e12fff1e 	bx	lr

00009b34 <CKernelOptions::GetOptionValue(char*)>:
    9b34:	e1d030d0 	ldrsb	r3, [r0]
    9b38:	e3530000 	cmp	r3, #0
    9b3c:	1a000003 	bne	9b50 <CKernelOptions::GetOptionValue(char*)+0x1c>
    9b40:	ea000007 	b	9b64 <CKernelOptions::GetOptionValue(char*)+0x30>
    9b44:	e1f030d1 	ldrsb	r3, [r0, #1]!
    9b48:	e3530000 	cmp	r3, #0
    9b4c:	0a000004 	beq	9b64 <CKernelOptions::GetOptionValue(char*)+0x30>
    9b50:	e353003d 	cmp	r3, #61	@ 0x3d
    9b54:	1afffffa 	bne	9b44 <CKernelOptions::GetOptionValue(char*)+0x10>
    9b58:	e3a03000 	mov	r3, #0
    9b5c:	e4c03001 	strb	r3, [r0], #1
    9b60:	e12fff1e 	bx	lr
    9b64:	e1a00003 	mov	r0, r3
    9b68:	e12fff1e 	bx	lr

00009b6c <CKernelOptions::GetDecimal(char const*)>:
    9b6c:	e2501000 	subs	r1, r0, #0
    9b70:	0a000015 	beq	9bcc <CKernelOptions::GetDecimal(char const*)+0x60>
    9b74:	e1d130d0 	ldrsb	r3, [r1]
    9b78:	e3530000 	cmp	r3, #0
    9b7c:	0a000012 	beq	9bcc <CKernelOptions::GetDecimal(char const*)+0x60>
    9b80:	e3a00000 	mov	r0, #0
    9b84:	e3a0c00a 	mov	ip, #10
    9b88:	ea000007 	b	9bac <CKernelOptions::GetDecimal(char const*)+0x40>
    9b8c:	e3730001 	cmn	r3, #1
    9b90:	13a02000 	movne	r2, #0
    9b94:	03a02001 	moveq	r2, #1
    9b98:	e1500003 	cmp	r0, r3
    9b9c:	83822001 	orrhi	r2, r2, #1
    9ba0:	e1a00003 	mov	r0, r3
    9ba4:	e3520000 	cmp	r2, #0
    9ba8:	1a000007 	bne	9bcc <CKernelOptions::GetDecimal(char const*)+0x60>
    9bac:	e0d120d1 	ldrsb	r2, [r1], #1
    9bb0:	e3520000 	cmp	r2, #0
    9bb4:	e2423030 	sub	r3, r2, #48	@ 0x30
    9bb8:	012fff1e 	bxeq	lr
    9bbc:	e6ef2073 	uxtb	r2, r3
    9bc0:	e023309c 	mla	r3, ip, r0, r3
    9bc4:	e3520009 	cmp	r2, #9
    9bc8:	9affffef 	bls	9b8c <CKernelOptions::GetDecimal(char const*)+0x20>
    9bcc:	e3e00000 	mvn	r0, #0
    9bd0:	e12fff1e 	bx	lr

00009bd4 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const>:
    9bd4:	e92d4070 	push	{r4, r5, r6, lr}
    9bd8:	e1a06002 	mov	r6, r2
    9bdc:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
    9be0:	e3540000 	cmp	r4, #0
    9be4:	0a00000f 	beq	9c28 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
    9be8:	e1a05001 	mov	r5, r1
    9bec:	ea000002 	b	9bfc <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x28>
    9bf0:	e5944000 	ldr	r4, [r4]
    9bf4:	e3540000 	cmp	r4, #0
    9bf8:	0a00000a 	beq	9c28 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
    9bfc:	e5940004 	ldr	r0, [r4, #4]
    9c00:	e1a01005 	mov	r1, r5
    9c04:	eb001a42 	bl	10514 <strcmp>
    9c08:	e3500000 	cmp	r0, #0
    9c0c:	1afffff7 	bne	9bf0 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x1c>
    9c10:	e5940008 	ldr	r0, [r4, #8]
    9c14:	e3500000 	cmp	r0, #0
    9c18:	0a000002 	beq	9c28 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
    9c1c:	ebffffd2 	bl	9b6c <CKernelOptions::GetDecimal(char const*)>
    9c20:	e3700001 	cmn	r0, #1
    9c24:	18bd8070 	popne	{r4, r5, r6, pc}
    9c28:	e1a00006 	mov	r0, r6
    9c2c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009c30 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
    9c30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9c34:	e3520000 	cmp	r2, #0
    9c38:	e24dd008 	sub	sp, sp, #8
    9c3c:	028d7004 	addeq	r7, sp, #4
    9c40:	0a000023 	beq	9cd4 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xa4>
    9c44:	e3056314 	movw	r6, #21268	@ 0x5314
    9c48:	e3406001 	movt	r6, #1
    9c4c:	e1a05001 	mov	r5, r1
    9c50:	e2428001 	sub	r8, r2, #1
    9c54:	e28d7004 	add	r7, sp, #4
    9c58:	e3a0400a 	mov	r4, #10
    9c5c:	e1a02007 	mov	r2, r7
    9c60:	e1a01006 	mov	r1, r6
    9c64:	eb001b0c 	bl	1089c <strtok_r>
    9c68:	e250c000 	subs	ip, r0, #0
    9c6c:	0a000021 	beq	9cf8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    9c70:	e1dc00d0 	ldrsb	r0, [ip]
    9c74:	e3500000 	cmp	r0, #0
    9c78:	0a00001f 	beq	9cfc <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xcc>
    9c7c:	e3a01000 	mov	r1, #0
    9c80:	ea00000b 	b	9cb4 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x84>
    9c84:	e6ef2073 	uxtb	r2, r3
    9c88:	e0233194 	mla	r3, r4, r1, r3
    9c8c:	e3520009 	cmp	r2, #9
    9c90:	8a000018 	bhi	9cf8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    9c94:	e3730001 	cmn	r3, #1
    9c98:	13a02000 	movne	r2, #0
    9c9c:	03a02001 	moveq	r2, #1
    9ca0:	e1510003 	cmp	r1, r3
    9ca4:	83822001 	orrhi	r2, r2, #1
    9ca8:	e1a01003 	mov	r1, r3
    9cac:	e3520000 	cmp	r2, #0
    9cb0:	1a000010 	bne	9cf8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    9cb4:	e0dc00d1 	ldrsb	r0, [ip], #1
    9cb8:	e2403030 	sub	r3, r0, #48	@ 0x30
    9cbc:	e3500000 	cmp	r0, #0
    9cc0:	1affffef 	bne	9c84 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x54>
    9cc4:	e2488001 	sub	r8, r8, #1
    9cc8:	e4851004 	str	r1, [r5], #4
    9ccc:	e3780001 	cmn	r8, #1
    9cd0:	1affffe1 	bne	9c5c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x2c>
    9cd4:	e1a02007 	mov	r2, r7
    9cd8:	e3a00000 	mov	r0, #0
    9cdc:	e3051314 	movw	r1, #21268	@ 0x5314
    9ce0:	e3401001 	movt	r1, #1
    9ce4:	eb001aec 	bl	1089c <strtok_r>
    9ce8:	e16f0f10 	clz	r0, r0
    9cec:	e1a002a0 	lsr	r0, r0, #5
    9cf0:	e28dd008 	add	sp, sp, #8
    9cf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9cf8:	e3a00000 	mov	r0, #0
    9cfc:	e28dd008 	add	sp, sp, #8
    9d00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009d04 <CKernelOptions::CKernelOptions()>:
    9d04:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d08:	e1a04000 	mov	r4, r0
    9d0c:	e3002838 	movw	r2, #2104	@ 0x838
    9d10:	e2807e81 	add	r7, r0, #2064	@ 0x810
    9d14:	e3a05000 	mov	r5, #0
    9d18:	e2877008 	add	r7, r7, #8
    9d1c:	e24dd01c 	sub	sp, sp, #28
    9d20:	e5805810 	str	r5, [r0, #2064]	@ 0x810
    9d24:	e3a03004 	mov	r3, #4
    9d28:	e5805814 	str	r5, [r0, #2068]	@ 0x814
    9d2c:	e2849e83 	add	r9, r4, #2096	@ 0x830
    9d30:	e580382c 	str	r3, [r0, #2092]	@ 0x82c
    9d34:	e3051240 	movw	r1, #21056	@ 0x5240
    9d38:	e3401001 	movt	r1, #1
    9d3c:	e5805834 	str	r5, [r0, #2100]	@ 0x834
    9d40:	e3a0303c 	mov	r3, #60	@ 0x3c
    9d44:	e18050b2 	strh	r5, [r0, r2]
    9d48:	e5803874 	str	r3, [r0, #2164]	@ 0x874
    9d4c:	e5805850 	str	r5, [r0, #2128]	@ 0x850
    9d50:	e5805854 	str	r5, [r0, #2132]	@ 0x854
    9d54:	e580586c 	str	r5, [r0, #2156]	@ 0x86c
    9d58:	e5c05870 	strb	r5, [r0, #2160]	@ 0x870
    9d5c:	e1a00007 	mov	r0, r7
    9d60:	e5845878 	str	r5, [r4, #2168]	@ 0x878
    9d64:	e5c4587c 	strb	r5, [r4, #2172]	@ 0x87c
    9d68:	e5845890 	str	r5, [r4, #2192]	@ 0x890
    9d6c:	eb001a7e 	bl	1076c <strcpy>
    9d70:	e1a00009 	mov	r0, r9
    9d74:	e3051248 	movw	r1, #21064	@ 0x5248
    9d78:	e3401001 	movt	r1, #1
    9d7c:	eb001a7a 	bl	1076c <strcpy>
    9d80:	e30736f4 	movw	r3, #30452	@ 0x76f4
    9d84:	e3403001 	movt	r3, #1
    9d88:	e1a01005 	mov	r1, r5
    9d8c:	e28d0010 	add	r0, sp, #16
    9d90:	e5c4583a 	strb	r5, [r4, #2106]	@ 0x83a
    9d94:	e5c45858 	strb	r5, [r4, #2136]	@ 0x858
    9d98:	e5834000 	str	r4, [r3]
    9d9c:	eb00244e 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9da0:	e1a02004 	mov	r2, r4
    9da4:	e3a01001 	mov	r1, #1
    9da8:	e3401005 	movt	r1, #5
    9dac:	e28d0010 	add	r0, sp, #16
    9db0:	e58d5000 	str	r5, [sp]
    9db4:	e300380c 	movw	r3, #2060	@ 0x80c
    9db8:	eb002499 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9dbc:	e1500005 	cmp	r0, r5
    9dc0:	0a000027 	beq	9e64 <CKernelOptions::CKernelOptions()+0x160>
    9dc4:	e5943008 	ldr	r3, [r4, #8]
    9dc8:	e3530b02 	cmp	r3, #2048	@ 0x800
    9dcc:	2a000024 	bcs	9e64 <CKernelOptions::CKernelOptions()+0x160>
    9dd0:	e0843003 	add	r3, r4, r3
    9dd4:	e305624c 	movw	r6, #21068	@ 0x524c
    9dd8:	e3406001 	movt	r6, #1
    9ddc:	e3058254 	movw	r8, #21076	@ 0x5254
    9de0:	e3408001 	movt	r8, #1
    9de4:	e5c3500c 	strb	r5, [r3, #12]
    9de8:	e284300c 	add	r3, r4, #12
    9dec:	e584380c 	str	r3, [r4, #2060]	@ 0x80c
    9df0:	e1a00004 	mov	r0, r4
    9df4:	ebffff2e 	bl	9ab4 <CKernelOptions::GetToken()>
    9df8:	e250a000 	subs	sl, r0, #0
    9dfc:	0a000018 	beq	9e64 <CKernelOptions::CKernelOptions()+0x160>
    9e00:	e1da30d0 	ldrsb	r3, [sl]
    9e04:	e3530000 	cmp	r3, #0
    9e08:	11a0100a 	movne	r1, sl
    9e0c:	1a000003 	bne	9e20 <CKernelOptions::CKernelOptions()+0x11c>
    9e10:	ea000018 	b	9e78 <CKernelOptions::CKernelOptions()+0x174>
    9e14:	e1f130d1 	ldrsb	r3, [r1, #1]!
    9e18:	e3530000 	cmp	r3, #0
    9e1c:	0a000015 	beq	9e78 <CKernelOptions::CKernelOptions()+0x174>
    9e20:	e353003d 	cmp	r3, #61	@ 0x3d
    9e24:	1afffffa 	bne	9e14 <CKernelOptions::CKernelOptions()+0x110>
    9e28:	e1a0b001 	mov	fp, r1
    9e2c:	e4cb5001 	strb	r5, [fp], #1
    9e30:	e1a01006 	mov	r1, r6
    9e34:	e1a0000a 	mov	r0, sl
    9e38:	eb0019b5 	bl	10514 <strcmp>
    9e3c:	e3500000 	cmp	r0, #0
    9e40:	1a00000e 	bne	9e80 <CKernelOptions::CKernelOptions()+0x17c>
    9e44:	e1a0000b 	mov	r0, fp
    9e48:	ebffff47 	bl	9b6c <CKernelOptions::GetDecimal(char const*)>
    9e4c:	e3700001 	cmn	r0, #1
    9e50:	15840810 	strne	r0, [r4, #2064]	@ 0x810
    9e54:	e1a00004 	mov	r0, r4
    9e58:	ebffff15 	bl	9ab4 <CKernelOptions::GetToken()>
    9e5c:	e250a000 	subs	sl, r0, #0
    9e60:	1affffe6 	bne	9e00 <CKernelOptions::CKernelOptions()+0xfc>
    9e64:	e28d0010 	add	r0, sp, #16
    9e68:	eb002422 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
    9e6c:	e1a00004 	mov	r0, r4
    9e70:	e28dd01c 	add	sp, sp, #28
    9e74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e78:	e1a0b003 	mov	fp, r3
    9e7c:	eaffffeb 	b	9e30 <CKernelOptions::CKernelOptions()+0x12c>
    9e80:	e1a01008 	mov	r1, r8
    9e84:	e1a0000a 	mov	r0, sl
    9e88:	eb0019a1 	bl	10514 <strcmp>
    9e8c:	e3500000 	cmp	r0, #0
    9e90:	1a000004 	bne	9ea8 <CKernelOptions::CKernelOptions()+0x1a4>
    9e94:	e1a0000b 	mov	r0, fp
    9e98:	ebffff33 	bl	9b6c <CKernelOptions::GetDecimal(char const*)>
    9e9c:	e3700001 	cmn	r0, #1
    9ea0:	15840814 	strne	r0, [r4, #2068]	@ 0x814
    9ea4:	eaffffd1 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    9ea8:	e1a0000a 	mov	r0, sl
    9eac:	e305125c 	movw	r1, #21084	@ 0x525c
    9eb0:	e3401001 	movt	r1, #1
    9eb4:	eb001996 	bl	10514 <strcmp>
    9eb8:	e2503000 	subs	r3, r0, #0
    9ebc:	e58d300c 	str	r3, [sp, #12]
    9ec0:	0a00000a 	beq	9ef0 <CKernelOptions::CKernelOptions()+0x1ec>
    9ec4:	e1a0000a 	mov	r0, sl
    9ec8:	e3051264 	movw	r1, #21092	@ 0x5264
    9ecc:	e3401001 	movt	r1, #1
    9ed0:	eb00198f 	bl	10514 <strcmp>
    9ed4:	e3500000 	cmp	r0, #0
    9ed8:	1a00000b 	bne	9f0c <CKernelOptions::CKernelOptions()+0x208>
    9edc:	e1a0000b 	mov	r0, fp
    9ee0:	ebffff21 	bl	9b6c <CKernelOptions::GetDecimal(char const*)>
    9ee4:	e3500004 	cmp	r0, #4
    9ee8:	9584082c 	strls	r0, [r4, #2092]	@ 0x82c
    9eec:	eaffffbf 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    9ef0:	e1a0100b 	mov	r1, fp
    9ef4:	e3a02013 	mov	r2, #19
    9ef8:	e1a00007 	mov	r0, r7
    9efc:	eb001a25 	bl	10798 <strncpy>
    9f00:	e59d300c 	ldr	r3, [sp, #12]
    9f04:	e5c4382b 	strb	r3, [r4, #2091]	@ 0x82b
    9f08:	eaffffb8 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    9f0c:	e1a0000a 	mov	r0, sl
    9f10:	e3051270 	movw	r1, #21104	@ 0x5270
    9f14:	e3401001 	movt	r1, #1
    9f18:	eb00197d 	bl	10514 <strcmp>
    9f1c:	e2503000 	subs	r3, r0, #0
    9f20:	e58d300c 	str	r3, [sp, #12]
    9f24:	0a00000c 	beq	9f5c <CKernelOptions::CKernelOptions()+0x258>
    9f28:	e1a0000a 	mov	r0, sl
    9f2c:	e3051278 	movw	r1, #21112	@ 0x5278
    9f30:	e3401001 	movt	r1, #1
    9f34:	eb001976 	bl	10514 <strcmp>
    9f38:	e3500000 	cmp	r0, #0
    9f3c:	1a00000d 	bne	9f78 <CKernelOptions::CKernelOptions()+0x274>
    9f40:	e1a0000b 	mov	r0, fp
    9f44:	ebffff08 	bl	9b6c <CKernelOptions::GetDecimal(char const*)>
    9f48:	e24010c8 	sub	r1, r0, #200	@ 0xc8
    9f4c:	e3012e78 	movw	r2, #7800	@ 0x1e78
    9f50:	e1510002 	cmp	r1, r2
    9f54:	95840834 	strls	r0, [r4, #2100]	@ 0x834
    9f58:	eaffffa4 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    9f5c:	e1a0100b 	mov	r1, fp
    9f60:	e3a02002 	mov	r2, #2
    9f64:	e1a00009 	mov	r0, r9
    9f68:	eb001a0a 	bl	10798 <strncpy>
    9f6c:	e59d300c 	ldr	r3, [sp, #12]
    9f70:	e5c43832 	strb	r3, [r4, #2098]	@ 0x832
    9f74:	eaffff9d 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    9f78:	e1a0000a 	mov	r0, sl
    9f7c:	e3051288 	movw	r1, #21128	@ 0x5288
    9f80:	e3401001 	movt	r1, #1
    9f84:	eb001962 	bl	10514 <strcmp>
    9f88:	e3500000 	cmp	r0, #0
    9f8c:	1a000007 	bne	9fb0 <CKernelOptions::CKernelOptions()+0x2ac>
    9f90:	e1a0000b 	mov	r0, fp
    9f94:	e3051294 	movw	r1, #21140	@ 0x5294
    9f98:	e3401001 	movt	r1, #1
    9f9c:	eb00195c 	bl	10514 <strcmp>
    9fa0:	e3500000 	cmp	r0, #0
    9fa4:	03a03001 	moveq	r3, #1
    9fa8:	05c43838 	strbeq	r3, [r4, #2104]	@ 0x838
    9fac:	eaffff8f 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    9fb0:	e1a0000a 	mov	r0, sl
    9fb4:	e305129c 	movw	r1, #21148	@ 0x529c
    9fb8:	e3401001 	movt	r1, #1
    9fbc:	eb001954 	bl	10514 <strcmp>
    9fc0:	e3500000 	cmp	r0, #0
    9fc4:	1a000007 	bne	9fe8 <CKernelOptions::CKernelOptions()+0x2e4>
    9fc8:	e1a0000b 	mov	r0, fp
    9fcc:	e30512a8 	movw	r1, #21160	@ 0x52a8
    9fd0:	e3401001 	movt	r1, #1
    9fd4:	eb00194e 	bl	10514 <strcmp>
    9fd8:	e3500000 	cmp	r0, #0
    9fdc:	03a03001 	moveq	r3, #1
    9fe0:	05c43839 	strbeq	r3, [r4, #2105]	@ 0x839
    9fe4:	eaffff81 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    9fe8:	e1a0000a 	mov	r0, sl
    9fec:	e30512b0 	movw	r1, #21168	@ 0x52b0
    9ff0:	e3401001 	movt	r1, #1
    9ff4:	eb001946 	bl	10514 <strcmp>
    9ff8:	e2503000 	subs	r3, r0, #0
    9ffc:	e58d300c 	str	r3, [sp, #12]
    a000:	1a000007 	bne	a024 <CKernelOptions::CKernelOptions()+0x320>
    a004:	e2840e83 	add	r0, r4, #2096	@ 0x830
    a008:	e1a0100b 	mov	r1, fp
    a00c:	e280000a 	add	r0, r0, #10
    a010:	e3a02013 	mov	r2, #19
    a014:	eb0019df 	bl	10798 <strncpy>
    a018:	e59d300c 	ldr	r3, [sp, #12]
    a01c:	e5c4384d 	strb	r3, [r4, #2125]	@ 0x84d
    a020:	eaffff72 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    a024:	e1a0000a 	mov	r0, sl
    a028:	e30512bc 	movw	r1, #21180	@ 0x52bc
    a02c:	e3401001 	movt	r1, #1
    a030:	eb001937 	bl	10514 <strcmp>
    a034:	e3500000 	cmp	r0, #0
    a038:	1a000007 	bne	a05c <CKernelOptions::CKernelOptions()+0x358>
    a03c:	e1a0000b 	mov	r0, fp
    a040:	e3a02002 	mov	r2, #2
    a044:	e2841e85 	add	r1, r4, #2128	@ 0x850
    a048:	ebfffef8 	bl	9c30 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
    a04c:	e2503000 	subs	r3, r0, #0
    a050:	05843850 	streq	r3, [r4, #2128]	@ 0x850
    a054:	05843854 	streq	r3, [r4, #2132]	@ 0x854
    a058:	eaffff64 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    a05c:	e1a0000a 	mov	r0, sl
    a060:	e30512d0 	movw	r1, #21200	@ 0x52d0
    a064:	e3401001 	movt	r1, #1
    a068:	eb001929 	bl	10514 <strcmp>
    a06c:	e2503000 	subs	r3, r0, #0
    a070:	e58d300c 	str	r3, [sp, #12]
    a074:	1a000007 	bne	a098 <CKernelOptions::CKernelOptions()+0x394>
    a078:	e2840e85 	add	r0, r4, #2128	@ 0x850
    a07c:	e1a0100b 	mov	r1, fp
    a080:	e2800008 	add	r0, r0, #8
    a084:	e3a02013 	mov	r2, #19
    a088:	eb0019c2 	bl	10798 <strncpy>
    a08c:	e59d300c 	ldr	r3, [sp, #12]
    a090:	e5c4386b 	strb	r3, [r4, #2155]	@ 0x86b
    a094:	eaffff55 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    a098:	e1a0000a 	mov	r0, sl
    a09c:	e30512dc 	movw	r1, #21212	@ 0x52dc
    a0a0:	e3401001 	movt	r1, #1
    a0a4:	eb00191a 	bl	10514 <strcmp>
    a0a8:	e3500000 	cmp	r0, #0
    a0ac:	1a000009 	bne	a0d8 <CKernelOptions::CKernelOptions()+0x3d4>
    a0b0:	e1a0000b 	mov	r0, fp
    a0b4:	ebfffeac 	bl	9b6c <CKernelOptions::GetDecimal(char const*)>
    a0b8:	e3500018 	cmp	r0, #24
    a0bc:	8affff4b 	bhi	9df0 <CKernelOptions::CKernelOptions()+0xec>
    a0c0:	e3a02007 	mov	r2, #7
    a0c4:	e3402101 	movt	r2, #257	@ 0x101
    a0c8:	e1a02032 	lsr	r2, r2, r0
    a0cc:	e3120001 	tst	r2, #1
    a0d0:	1584086c 	strne	r0, [r4, #2156]	@ 0x86c
    a0d4:	eaffff45 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    a0d8:	e1a0000a 	mov	r0, sl
    a0dc:	e30512e8 	movw	r1, #21224	@ 0x52e8
    a0e0:	e3401001 	movt	r1, #1
    a0e4:	eb00190a 	bl	10514 <strcmp>
    a0e8:	e3500000 	cmp	r0, #0
    a0ec:	1a000007 	bne	a110 <CKernelOptions::CKernelOptions()+0x40c>
    a0f0:	e1a0000b 	mov	r0, fp
    a0f4:	e30512a8 	movw	r1, #21160	@ 0x52a8
    a0f8:	e3401001 	movt	r1, #1
    a0fc:	eb001904 	bl	10514 <strcmp>
    a100:	e3500000 	cmp	r0, #0
    a104:	03a03001 	moveq	r3, #1
    a108:	05c43870 	strbeq	r3, [r4, #2160]	@ 0x870
    a10c:	eaffff37 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    a110:	e1a0000a 	mov	r0, sl
    a114:	e30512f0 	movw	r1, #21232	@ 0x52f0
    a118:	e3401001 	movt	r1, #1
    a11c:	eb0018fc 	bl	10514 <strcmp>
    a120:	e3500000 	cmp	r0, #0
    a124:	1a000005 	bne	a140 <CKernelOptions::CKernelOptions()+0x43c>
    a128:	e1a0000b 	mov	r0, fp
    a12c:	ebfffe8e 	bl	9b6c <CKernelOptions::GetDecimal(char const*)>
    a130:	e2402028 	sub	r2, r0, #40	@ 0x28
    a134:	e3520026 	cmp	r2, #38	@ 0x26
    a138:	95840874 	strls	r0, [r4, #2164]	@ 0x874
    a13c:	eaffff2b 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    a140:	e1a0000a 	mov	r0, sl
    a144:	e30512fc 	movw	r1, #21244	@ 0x52fc
    a148:	e3401001 	movt	r1, #1
    a14c:	eb0018f0 	bl	10514 <strcmp>
    a150:	e3500000 	cmp	r0, #0
    a154:	1a000005 	bne	a170 <CKernelOptions::CKernelOptions()+0x46c>
    a158:	e1a0000b 	mov	r0, fp
    a15c:	ebfffe82 	bl	9b6c <CKernelOptions::GetDecimal(char const*)>
    a160:	e2402002 	sub	r2, r0, #2
    a164:	e3520019 	cmp	r2, #25
    a168:	95840878 	strls	r0, [r4, #2168]	@ 0x878
    a16c:	eaffff1f 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    a170:	e1a0000a 	mov	r0, sl
    a174:	e3051308 	movw	r1, #21256	@ 0x5308
    a178:	e3401001 	movt	r1, #1
    a17c:	eb0018e4 	bl	10514 <strcmp>
    a180:	e3500000 	cmp	r0, #0
    a184:	1a000005 	bne	a1a0 <CKernelOptions::CKernelOptions()+0x49c>
    a188:	e1a0000b 	mov	r0, fp
    a18c:	e3a02004 	mov	r2, #4
    a190:	e2841d22 	add	r1, r4, #2176	@ 0x880
    a194:	ebfffea5 	bl	9c30 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
    a198:	e5c4087c 	strb	r0, [r4, #2172]	@ 0x87c
    a19c:	eaffff13 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>
    a1a0:	e3a0000c 	mov	r0, #12
    a1a4:	eb001bdc 	bl	1111c <operator new(unsigned int)>
    a1a8:	e58d000c 	str	r0, [sp, #12]
    a1ac:	e1a0000a 	mov	r0, sl
    a1b0:	eb0018cd 	bl	104ec <strlen>
    a1b4:	e2800001 	add	r0, r0, #1
    a1b8:	eb001bdd 	bl	11134 <operator new[](unsigned int)>
    a1bc:	e59d300c 	ldr	r3, [sp, #12]
    a1c0:	e1a0100a 	mov	r1, sl
    a1c4:	e5830004 	str	r0, [r3, #4]
    a1c8:	eb001967 	bl	1076c <strcpy>
    a1cc:	e1a0000b 	mov	r0, fp
    a1d0:	eb0018c5 	bl	104ec <strlen>
    a1d4:	e2800001 	add	r0, r0, #1
    a1d8:	eb001bd5 	bl	11134 <operator new[](unsigned int)>
    a1dc:	e59da00c 	ldr	sl, [sp, #12]
    a1e0:	e1a0100b 	mov	r1, fp
    a1e4:	e58a0008 	str	r0, [sl, #8]
    a1e8:	eb00195f 	bl	1076c <strcpy>
    a1ec:	e5943890 	ldr	r3, [r4, #2192]	@ 0x890
    a1f0:	e58a3000 	str	r3, [sl]
    a1f4:	e584a890 	str	sl, [r4, #2192]	@ 0x890
    a1f8:	eafffefc 	b	9df0 <CKernelOptions::CKernelOptions()+0xec>

0000a1fc <CLogger::CLogger(unsigned int, CTimer*, bool)>:
    a1fc:	e92d4010 	push	{r4, lr}
    a200:	e1a04000 	mov	r4, r0
    a204:	e3a0c000 	mov	ip, #0
    a208:	e8800006 	stm	r0, {r1, r2}
    a20c:	e3a02001 	mov	r2, #1
    a210:	e5c43008 	strb	r3, [r4, #8]
    a214:	e3a00901 	mov	r0, #16384	@ 0x4000
    a218:	e584c00c 	str	ip, [r4, #12]
    a21c:	e584c010 	str	ip, [r4, #16]
    a220:	e584c014 	str	ip, [r4, #20]
    a224:	e584c018 	str	ip, [r4, #24]
    a228:	e584201c 	str	r2, [r4, #28]
    a22c:	e584c0e8 	str	ip, [r4, #232]	@ 0xe8
    a230:	e584c0ec 	str	ip, [r4, #236]	@ 0xec
    a234:	e58420f0 	str	r2, [r4, #240]	@ 0xf0
    a238:	e584c0f4 	str	ip, [r4, #244]	@ 0xf4
    a23c:	e584c0f8 	str	ip, [r4, #248]	@ 0xf8
    a240:	eb001bbb 	bl	11134 <operator new[](unsigned int)>
    a244:	e30736f8 	movw	r3, #30456	@ 0x76f8
    a248:	e3403001 	movt	r3, #1
    a24c:	e5840010 	str	r0, [r4, #16]
    a250:	e1a00004 	mov	r0, r4
    a254:	e5834000 	str	r4, [r3]
    a258:	e8bd8010 	pop	{r4, pc}

0000a25c <CLogger::~CLogger()>:
    a25c:	e30726f8 	movw	r2, #30456	@ 0x76f8
    a260:	e3402001 	movt	r2, #1
    a264:	e92d4010 	push	{r4, lr}
    a268:	e3a01000 	mov	r1, #0
    a26c:	e59030ec 	ldr	r3, [r0, #236]	@ 0xec
    a270:	e590c0e8 	ldr	ip, [r0, #232]	@ 0xe8
    a274:	e1a04000 	mov	r4, r0
    a278:	e5821000 	str	r1, [r2]
    a27c:	ea00000a 	b	a2ac <CLogger::~CLogger()+0x50>
    a280:	e7940102 	ldr	r0, [r4, r2, lsl #2]
    a284:	e3500000 	cmp	r0, #0
    a288:	0a000002 	beq	a298 <CLogger::~CLogger()+0x3c>
    a28c:	eb001bba 	bl	1117c <operator delete(void*, unsigned int)>
    a290:	e59430ec 	ldr	r3, [r4, #236]	@ 0xec
    a294:	e594c0e8 	ldr	ip, [r4, #232]	@ 0xe8
    a298:	e2833001 	add	r3, r3, #1
    a29c:	e58430ec 	str	r3, [r4, #236]	@ 0xec
    a2a0:	e3530032 	cmp	r3, #50	@ 0x32
    a2a4:	03a03000 	moveq	r3, #0
    a2a8:	058430ec 	streq	r3, [r4, #236]	@ 0xec
    a2ac:	e2832008 	add	r2, r3, #8
    a2b0:	e3a01f42 	mov	r1, #264	@ 0x108
    a2b4:	e153000c 	cmp	r3, ip
    a2b8:	1afffff0 	bne	a280 <CLogger::~CLogger()+0x24>
    a2bc:	e5940010 	ldr	r0, [r4, #16]
    a2c0:	e3500000 	cmp	r0, #0
    a2c4:	0a000000 	beq	a2cc <CLogger::~CLogger()+0x70>
    a2c8:	eb001ba5 	bl	11164 <operator delete[](void*)>
    a2cc:	e1a00004 	mov	r0, r4
    a2d0:	e8bd8010 	pop	{r4, pc}

0000a2d4 <CLogger::SetNewTarget(CDevice*)>:
    a2d4:	e580100c 	str	r1, [r0, #12]
    a2d8:	e12fff1e 	bx	lr

0000a2dc <CLogger::Get()>:
    a2dc:	e92d4070 	push	{r4, r5, r6, lr}
    a2e0:	e30756f8 	movw	r5, #30456	@ 0x76f8
    a2e4:	e3405001 	movt	r5, #1
    a2e8:	e5954000 	ldr	r4, [r5]
    a2ec:	e3540000 	cmp	r4, #0
    a2f0:	0a000001 	beq	a2fc <CLogger::Get()+0x20>
    a2f4:	e1a00004 	mov	r0, r4
    a2f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a2fc:	e3a000fc 	mov	r0, #252	@ 0xfc
    a300:	eb001b85 	bl	1111c <operator new(unsigned int)>
    a304:	e1a04000 	mov	r4, r0
    a308:	e3a03000 	mov	r3, #0
    a30c:	e3a02001 	mov	r2, #1
    a310:	e3a00901 	mov	r0, #16384	@ 0x4000
    a314:	e5843000 	str	r3, [r4]
    a318:	e5843004 	str	r3, [r4, #4]
    a31c:	e5c42008 	strb	r2, [r4, #8]
    a320:	e584300c 	str	r3, [r4, #12]
    a324:	e5843010 	str	r3, [r4, #16]
    a328:	e5843014 	str	r3, [r4, #20]
    a32c:	e5843018 	str	r3, [r4, #24]
    a330:	e584201c 	str	r2, [r4, #28]
    a334:	e58430e8 	str	r3, [r4, #232]	@ 0xe8
    a338:	e58430ec 	str	r3, [r4, #236]	@ 0xec
    a33c:	e58420f0 	str	r2, [r4, #240]	@ 0xf0
    a340:	e58430f4 	str	r3, [r4, #244]	@ 0xf4
    a344:	e58430f8 	str	r3, [r4, #248]	@ 0xf8
    a348:	eb001b79 	bl	11134 <operator new[](unsigned int)>
    a34c:	e5854000 	str	r4, [r5]
    a350:	e5840010 	str	r0, [r4, #16]
    a354:	e1a00004 	mov	r0, r4
    a358:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a35c <CLogger::Write(char const*)>:
    a35c:	e92d4070 	push	{r4, r5, r6, lr}
    a360:	e1a04000 	mov	r4, r0
    a364:	e1a00001 	mov	r0, r1
    a368:	e1a05001 	mov	r5, r1
    a36c:	eb00185e 	bl	104ec <strlen>
    a370:	e594300c 	ldr	r3, [r4, #12]
    a374:	e1a06000 	mov	r6, r0
    a378:	e3530000 	cmp	r3, #0
    a37c:	0a000005 	beq	a398 <CLogger::Write(char const*)+0x3c>
    a380:	e5932000 	ldr	r2, [r3]
    a384:	e1a00003 	mov	r0, r3
    a388:	e1a01005 	mov	r1, r5
    a38c:	e592300c 	ldr	r3, [r2, #12]
    a390:	e1a02006 	mov	r2, r6
    a394:	e12fff33 	blx	r3
    a398:	e594001c 	ldr	r0, [r4, #28]
    a39c:	e3500000 	cmp	r0, #0
    a3a0:	1a000021 	bne	a42c <CLogger::Write(char const*)+0xd0>
    a3a4:	e3560000 	cmp	r6, #0
    a3a8:	08bd8070 	popeq	{r4, r5, r6, pc}
    a3ac:	e1a0c005 	mov	ip, r5
    a3b0:	ea000002 	b	a3c0 <CLogger::Write(char const*)+0x64>
    a3b4:	e045300c 	sub	r3, r5, ip
    a3b8:	e1730006 	cmn	r3, r6
    a3bc:	0a000015 	beq	a418 <CLogger::Write(char const*)+0xbc>
    a3c0:	e0dc30d1 	ldrsb	r3, [ip], #1
    a3c4:	e353000d 	cmp	r3, #13
    a3c8:	0afffff9 	beq	a3b4 <CLogger::Write(char const*)+0x58>
    a3cc:	e5942014 	ldr	r2, [r4, #20]
    a3d0:	e5941010 	ldr	r1, [r4, #16]
    a3d4:	e7c13002 	strb	r3, [r1, r2]
    a3d8:	e5943014 	ldr	r3, [r4, #20]
    a3dc:	e594e018 	ldr	lr, [r4, #24]
    a3e0:	e2833001 	add	r3, r3, #1
    a3e4:	e7ed3053 	ubfx	r3, r3, #0, #14
    a3e8:	e5843014 	str	r3, [r4, #20]
    a3ec:	e153000e 	cmp	r3, lr
    a3f0:	1affffef 	bne	a3b4 <CLogger::Write(char const*)+0x58>
    a3f4:	e5d41008 	ldrb	r1, [r4, #8]
    a3f8:	e2832001 	add	r2, r3, #1
    a3fc:	e3510000 	cmp	r1, #0
    a400:	0a00000d 	beq	a43c <CLogger::Write(char const*)+0xe0>
    a404:	e045300c 	sub	r3, r5, ip
    a408:	e7ed2052 	ubfx	r2, r2, #0, #14
    a40c:	e1730006 	cmn	r3, r6
    a410:	e5842018 	str	r2, [r4, #24]
    a414:	1affffe9 	bne	a3c0 <CLogger::Write(char const*)+0x64>
    a418:	e594301c 	ldr	r3, [r4, #28]
    a41c:	e3530000 	cmp	r3, #0
    a420:	08bd8070 	popeq	{r4, r5, r6, pc}
    a424:	e8bd4070 	pop	{r4, r5, r6, lr}
    a428:	ea001f5b 	b	1219c <LeaveCritical>
    a42c:	eb001f2f 	bl	120f0 <EnterCritical>
    a430:	e3560000 	cmp	r6, #0
    a434:	1affffdc 	bne	a3ac <CLogger::Write(char const*)+0x50>
    a438:	eafffff6 	b	a418 <CLogger::Write(char const*)+0xbc>
    a43c:	e2433001 	sub	r3, r3, #1
    a440:	e7ed3053 	ubfx	r3, r3, #0, #14
    a444:	e5843014 	str	r3, [r4, #20]
    a448:	eafffff2 	b	a418 <CLogger::Write(char const*)+0xbc>

0000a44c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    a44c:	e92d4070 	push	{r4, r5, r6, lr}
    a450:	e1a05003 	mov	r5, r3
    a454:	e5903000 	ldr	r3, [r0]
    a458:	e24dd0c8 	sub	sp, sp, #200	@ 0xc8
    a45c:	e1520003 	cmp	r2, r3
    a460:	8a000012 	bhi	a4b0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
    a464:	e3a03000 	mov	r3, #0
    a468:	e1a04000 	mov	r4, r0
    a46c:	e3520000 	cmp	r2, #0
    a470:	e5cd3000 	strb	r3, [sp]
    a474:	0a00000f 	beq	a4b8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    a478:	e1a0000d 	mov	r0, sp
    a47c:	eb0018d2 	bl	107cc <strcat>
    a480:	e59f1098 	ldr	r1, [pc, #152]	@ a520 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a484:	e1a0000d 	mov	r0, sp
    a488:	eb0018cf 	bl	107cc <strcat>
    a48c:	e1a01005 	mov	r1, r5
    a490:	e1a0000d 	mov	r0, sp
    a494:	eb0018cc 	bl	107cc <strcat>
    a498:	e59f1084 	ldr	r1, [pc, #132]	@ a524 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    a49c:	e1a0000d 	mov	r0, sp
    a4a0:	eb0018c9 	bl	107cc <strcat>
    a4a4:	e1a0100d 	mov	r1, sp
    a4a8:	e1a00004 	mov	r0, r4
    a4ac:	ebffffaa 	bl	a35c <CLogger::Write(char const*)>
    a4b0:	e28dd0c8 	add	sp, sp, #200	@ 0xc8
    a4b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a4b8:	e1a06001 	mov	r6, r1
    a4bc:	e1a0000d 	mov	r0, sp
    a4c0:	e3051318 	movw	r1, #21272	@ 0x5318
    a4c4:	e3401001 	movt	r1, #1
    a4c8:	eb0018a7 	bl	1076c <strcpy>
    a4cc:	e1a01006 	mov	r1, r6
    a4d0:	e1a0000d 	mov	r0, sp
    a4d4:	eb0018bc 	bl	107cc <strcat>
    a4d8:	e59f1040 	ldr	r1, [pc, #64]	@ a520 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a4dc:	e1a0000d 	mov	r0, sp
    a4e0:	eb0018b9 	bl	107cc <strcat>
    a4e4:	e1a01005 	mov	r1, r5
    a4e8:	e1a0000d 	mov	r0, sp
    a4ec:	eb0018b6 	bl	107cc <strcat>
    a4f0:	e59f1030 	ldr	r1, [pc, #48]	@ a528 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
    a4f4:	e1a0000d 	mov	r0, sp
    a4f8:	eb0018b3 	bl	107cc <strcat>
    a4fc:	e59f1020 	ldr	r1, [pc, #32]	@ a524 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    a500:	e1a0000d 	mov	r0, sp
    a504:	eb0018b0 	bl	107cc <strcat>
    a508:	e1a0100d 	mov	r1, sp
    a50c:	e1a00004 	mov	r0, r4
    a510:	ebffff91 	bl	a35c <CLogger::Write(char const*)>
    a514:	e3a000ff 	mov	r0, #255	@ 0xff
    a518:	eb00140f 	bl	f55c <set_qemu_exit_status>
    a51c:	eb00140f 	bl	f560 <halt>
    a520:	00015320 	.word	0x00015320
    a524:	0001532c 	.word	0x0001532c
    a528:	00015324 	.word	0x00015324

0000a52c <CLogger::Read(void*, unsigned int, bool)>:
    a52c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a530:	e1a04000 	mov	r4, r0
    a534:	e590001c 	ldr	r0, [r0, #28]
    a538:	e1a05001 	mov	r5, r1
    a53c:	e1a07002 	mov	r7, r2
    a540:	e1a08003 	mov	r8, r3
    a544:	e3500000 	cmp	r0, #0
    a548:	1a00001a 	bne	a5b8 <CLogger::Read(void*, unsigned int, bool)+0x8c>
    a54c:	e594c018 	ldr	ip, [r4, #24]
    a550:	e5943014 	ldr	r3, [r4, #20]
    a554:	e153000c 	cmp	r3, ip
    a558:	0a00001f 	beq	a5dc <CLogger::Read(void*, unsigned int, bool)+0xb0>
    a55c:	e1a09007 	mov	r9, r7
    a560:	e3a0e000 	mov	lr, #0
    a564:	ea000007 	b	a588 <CLogger::Read(void*, unsigned int, bool)+0x5c>
    a568:	e5946010 	ldr	r6, [r4, #16]
    a56c:	e28ee001 	add	lr, lr, #1
    a570:	e19660dc 	ldrsb	r6, [r6, ip]
    a574:	e7edc051 	ubfx	ip, r1, #0, #14
    a578:	e4c56001 	strb	r6, [r5], #1
    a57c:	e5941014 	ldr	r1, [r4, #20]
    a580:	e151000c 	cmp	r1, ip
    a584:	0a000009 	beq	a5b0 <CLogger::Read(void*, unsigned int, bool)+0x84>
    a588:	e28c1001 	add	r1, ip, #1
    a58c:	e15e0007 	cmp	lr, r7
    a590:	1afffff4 	bne	a568 <CLogger::Read(void*, unsigned int, bool)+0x3c>
    a594:	e594301c 	ldr	r3, [r4, #28]
    a598:	e3580000 	cmp	r8, #0
    a59c:	1584c018 	strne	ip, [r4, #24]
    a5a0:	e3530000 	cmp	r3, #0
    a5a4:	1a00000e 	bne	a5e4 <CLogger::Read(void*, unsigned int, bool)+0xb8>
    a5a8:	e1a00009 	mov	r0, r9
    a5ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a5b0:	e1a0900e 	mov	r9, lr
    a5b4:	eafffff6 	b	a594 <CLogger::Read(void*, unsigned int, bool)+0x68>
    a5b8:	eb001ecc 	bl	120f0 <EnterCritical>
    a5bc:	e594c018 	ldr	ip, [r4, #24]
    a5c0:	e5943014 	ldr	r3, [r4, #20]
    a5c4:	e153000c 	cmp	r3, ip
    a5c8:	1affffe3 	bne	a55c <CLogger::Read(void*, unsigned int, bool)+0x30>
    a5cc:	e594301c 	ldr	r3, [r4, #28]
    a5d0:	e3530000 	cmp	r3, #0
    a5d4:	0a000000 	beq	a5dc <CLogger::Read(void*, unsigned int, bool)+0xb0>
    a5d8:	eb001eef 	bl	1219c <LeaveCritical>
    a5dc:	e3e09000 	mvn	r9, #0
    a5e0:	eafffff0 	b	a5a8 <CLogger::Read(void*, unsigned int, bool)+0x7c>
    a5e4:	eb001eec 	bl	1219c <LeaveCritical>
    a5e8:	e1a00009 	mov	r0, r9
    a5ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000a5f0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    a5f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a5f4:	e1a05000 	mov	r5, r0
    a5f8:	e3a00f42 	mov	r0, #264	@ 0x108
    a5fc:	e24dd008 	sub	sp, sp, #8
    a600:	e1a06003 	mov	r6, r3
    a604:	e1a07002 	mov	r7, r2
    a608:	e1a08001 	mov	r8, r1
    a60c:	eb001ac2 	bl	1111c <operator new(unsigned int)>
    a610:	e1a04000 	mov	r4, r0
    a614:	e1a01008 	mov	r1, r8
    a618:	e3a02032 	mov	r2, #50	@ 0x32
    a61c:	e4c07001 	strb	r7, [r0], #1
    a620:	eb00185c 	bl	10798 <strncpy>
    a624:	e1a01006 	mov	r1, r6
    a628:	e3a020c8 	mov	r2, #200	@ 0xc8
    a62c:	e3a06000 	mov	r6, #0
    a630:	e2840033 	add	r0, r4, #51	@ 0x33
    a634:	e5c46032 	strb	r6, [r4, #50]	@ 0x32
    a638:	eb001856 	bl	10798 <strncpy>
    a63c:	e5950004 	ldr	r0, [r5, #4]
    a640:	e5c460fa 	strb	r6, [r4, #250]	@ 0xfa
    a644:	e1500006 	cmp	r0, r6
    a648:	0a000004 	beq	a660 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    a64c:	e28d2004 	add	r2, sp, #4
    a650:	e1a0100d 	mov	r1, sp
    a654:	eb0014a9 	bl	f900 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    a658:	e1500006 	cmp	r0, r6
    a65c:	1a000037 	bne	a740 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x150>
    a660:	e3a03000 	mov	r3, #0
    a664:	e58430fc 	str	r3, [r4, #252]	@ 0xfc
    a668:	e1a00003 	mov	r0, r3
    a66c:	e5843100 	str	r3, [r4, #256]	@ 0x100
    a670:	e59520f0 	ldr	r2, [r5, #240]	@ 0xf0
    a674:	e5840104 	str	r0, [r4, #260]	@ 0x104
    a678:	e3520000 	cmp	r2, #0
    a67c:	1a00002b 	bne	a730 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
    a680:	e59530e8 	ldr	r3, [r5, #232]	@ 0xe8
    a684:	e3530031 	cmp	r3, #49	@ 0x31
    a688:	e2831001 	add	r1, r3, #1
    a68c:	e0850103 	add	r0, r5, r3, lsl #2
    a690:	e5804020 	str	r4, [r0, #32]
    a694:	e595c0ec 	ldr	ip, [r5, #236]	@ 0xec
    a698:	0a000019 	beq	a704 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x114>
    a69c:	e151000c 	cmp	r1, ip
    a6a0:	e58510e8 	str	r1, [r5, #232]	@ 0xe8
    a6a4:	0a000007 	beq	a6c8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd8>
    a6a8:	e3520000 	cmp	r2, #0
    a6ac:	1a000012 	bne	a6fc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>
    a6b0:	e59530f4 	ldr	r3, [r5, #244]	@ 0xf4
    a6b4:	e3530000 	cmp	r3, #0
    a6b8:	0a000000 	beq	a6c0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>
    a6bc:	e12fff33 	blx	r3
    a6c0:	e28dd008 	add	sp, sp, #8
    a6c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a6c8:	e3530030 	cmp	r3, #48	@ 0x30
    a6cc:	e5904024 	ldr	r4, [r0, #36]	@ 0x24
    a6d0:	12833002 	addne	r3, r3, #2
    a6d4:	03a03000 	moveq	r3, #0
    a6d8:	e3520000 	cmp	r2, #0
    a6dc:	e58530ec 	str	r3, [r5, #236]	@ 0xec
    a6e0:	1a000010 	bne	a728 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
    a6e4:	e3540000 	cmp	r4, #0
    a6e8:	0afffff0 	beq	a6b0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
    a6ec:	e3a01f42 	mov	r1, #264	@ 0x108
    a6f0:	e1a00004 	mov	r0, r4
    a6f4:	eb001aa0 	bl	1117c <operator delete(void*, unsigned int)>
    a6f8:	eaffffec 	b	a6b0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
    a6fc:	eb001ea6 	bl	1219c <LeaveCritical>
    a700:	eaffffea 	b	a6b0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
    a704:	e3a03000 	mov	r3, #0
    a708:	e58530e8 	str	r3, [r5, #232]	@ 0xe8
    a70c:	e15c0003 	cmp	ip, r3
    a710:	1affffe4 	bne	a6a8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb8>
    a714:	e3a03001 	mov	r3, #1
    a718:	e5954020 	ldr	r4, [r5, #32]
    a71c:	e3520000 	cmp	r2, #0
    a720:	e58530ec 	str	r3, [r5, #236]	@ 0xec
    a724:	0affffee 	beq	a6e4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
    a728:	eb001e9b 	bl	1219c <LeaveCritical>
    a72c:	eaffffec 	b	a6e4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
    a730:	e1a00002 	mov	r0, r2
    a734:	eb001e6d 	bl	120f0 <EnterCritical>
    a738:	e59520f0 	ldr	r2, [r5, #240]	@ 0xf0
    a73c:	eaffffcf 	b	a680 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x90>
    a740:	e59d3004 	ldr	r3, [sp, #4]
    a744:	e3012759 	movw	r2, #5977	@ 0x1759
    a748:	e34d21b7 	movt	r2, #53687	@ 0xd1b7
    a74c:	e59d1000 	ldr	r1, [sp]
    a750:	e5950004 	ldr	r0, [r5, #4]
    a754:	e58410fc 	str	r1, [r4, #252]	@ 0xfc
    a758:	e0832392 	umull	r2, r3, r2, r3
    a75c:	e1a036a3 	lsr	r3, r3, #13
    a760:	e5843100 	str	r3, [r4, #256]	@ 0x100
    a764:	eb001433 	bl	f838 <CTimer::GetTimeZone() const>
    a768:	eaffffc0 	b	a670 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>

0000a76c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    a76c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a770:	e1a04000 	mov	r4, r0
    a774:	e59000f0 	ldr	r0, [r0, #240]	@ 0xf0
    a778:	e1a06001 	mov	r6, r1
    a77c:	e1a08002 	mov	r8, r2
    a780:	e1a07003 	mov	r7, r3
    a784:	e3500000 	cmp	r0, #0
    a788:	1a00001e 	bne	a808 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x9c>
    a78c:	e594c0ec 	ldr	ip, [r4, #236]	@ 0xec
    a790:	e59430e8 	ldr	r3, [r4, #232]	@ 0xe8
    a794:	e153000c 	cmp	r3, ip
    a798:	0a00002e 	beq	a858 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xec>
    a79c:	e35c0031 	cmp	ip, #49	@ 0x31
    a7a0:	128c0001 	addne	r0, ip, #1
    a7a4:	e28cc008 	add	ip, ip, #8
    a7a8:	e794510c 	ldr	r5, [r4, ip, lsl #2]
    a7ac:	e58400ec 	str	r0, [r4, #236]	@ 0xec
    a7b0:	e1a01005 	mov	r1, r5
    a7b4:	e1a00008 	mov	r0, r8
    a7b8:	e4d13001 	ldrb	r3, [r1], #1
    a7bc:	e5c63000 	strb	r3, [r6]
    a7c0:	eb0017e9 	bl	1076c <strcpy>
    a7c4:	e2851033 	add	r1, r5, #51	@ 0x33
    a7c8:	e1a00007 	mov	r0, r7
    a7cc:	eb0017e6 	bl	1076c <strcpy>
    a7d0:	e59d1018 	ldr	r1, [sp, #24]
    a7d4:	e59520fc 	ldr	r2, [r5, #252]	@ 0xfc
    a7d8:	e1a00005 	mov	r0, r5
    a7dc:	e5953100 	ldr	r3, [r5, #256]	@ 0x100
    a7e0:	e5812000 	str	r2, [r1]
    a7e4:	e3a01f42 	mov	r1, #264	@ 0x108
    a7e8:	e59d201c 	ldr	r2, [sp, #28]
    a7ec:	e5823000 	str	r3, [r2]
    a7f0:	e59d2020 	ldr	r2, [sp, #32]
    a7f4:	e5953104 	ldr	r3, [r5, #260]	@ 0x104
    a7f8:	e5823000 	str	r3, [r2]
    a7fc:	eb001a5e 	bl	1117c <operator delete(void*, unsigned int)>
    a800:	e3a00001 	mov	r0, #1
    a804:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a808:	eb001e38 	bl	120f0 <EnterCritical>
    a80c:	e59430ec 	ldr	r3, [r4, #236]	@ 0xec
    a810:	e59420e8 	ldr	r2, [r4, #232]	@ 0xe8
    a814:	e1520003 	cmp	r2, r3
    a818:	0a00000a 	beq	a848 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
    a81c:	e2832008 	add	r2, r3, #8
    a820:	e3530031 	cmp	r3, #49	@ 0x31
    a824:	12833001 	addne	r3, r3, #1
    a828:	03a03000 	moveq	r3, #0
    a82c:	e7945102 	ldr	r5, [r4, r2, lsl #2]
    a830:	e58430ec 	str	r3, [r4, #236]	@ 0xec
    a834:	e59430f0 	ldr	r3, [r4, #240]	@ 0xf0
    a838:	e3530000 	cmp	r3, #0
    a83c:	0affffdb 	beq	a7b0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x44>
    a840:	eb001e55 	bl	1219c <LeaveCritical>
    a844:	eaffffd9 	b	a7b0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x44>
    a848:	e59430f0 	ldr	r3, [r4, #240]	@ 0xf0
    a84c:	e3530000 	cmp	r3, #0
    a850:	0a000000 	beq	a858 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xec>
    a854:	eb001e50 	bl	1219c <LeaveCritical>
    a858:	e3a00000 	mov	r0, #0
    a85c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a860 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    a860:	e58010f4 	str	r1, [r0, #244]	@ 0xf4
    a864:	e12fff1e 	bx	lr

0000a868 <CLogger::RegisterPanicHandler(void (*)())>:
    a868:	e58010f8 	str	r1, [r0, #248]	@ 0xf8
    a86c:	e12fff1e 	bx	lr

0000a870 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    a870:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a874:	e1a06003 	mov	r6, r3
    a878:	e1a04000 	mov	r4, r0
    a87c:	e24dd024 	sub	sp, sp, #36	@ 0x24
    a880:	e1a05002 	mov	r5, r2
    a884:	e1a0000d 	mov	r0, sp
    a888:	e1a07001 	mov	r7, r1
    a88c:	eb000d6a 	bl	de3c <CString::CString()>
    a890:	e1a01006 	mov	r1, r6
    a894:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
    a898:	e1a0000d 	mov	r0, sp
    a89c:	eb000fbd 	bl	e798 <CString::FormatV(char const*, std::__va_list)>
    a8a0:	e1a0000d 	mov	r0, sp
    a8a4:	eb000d9c 	bl	df1c <CString::operator char const*() const>
    a8a8:	e1a02005 	mov	r2, r5
    a8ac:	e1a03000 	mov	r3, r0
    a8b0:	e1a01007 	mov	r1, r7
    a8b4:	e1a00004 	mov	r0, r4
    a8b8:	ebffff4c 	bl	a5f0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    a8bc:	e5943000 	ldr	r3, [r4]
    a8c0:	e1550003 	cmp	r5, r3
    a8c4:	8a00002b 	bhi	a978 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x108>
    a8c8:	e28d0010 	add	r0, sp, #16
    a8cc:	eb000d5a 	bl	de3c <CString::CString()>
    a8d0:	e3550000 	cmp	r5, #0
    a8d4:	0a00002b 	beq	a988 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x118>
    a8d8:	e5940004 	ldr	r0, [r4, #4]
    a8dc:	e3500000 	cmp	r0, #0
    a8e0:	0a00000d 	beq	a91c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    a8e4:	eb001470 	bl	faac <CTimer::GetTimeString()>
    a8e8:	e2506000 	subs	r6, r0, #0
    a8ec:	0a00000a 	beq	a91c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    a8f0:	eb000d89 	bl	df1c <CString::operator char const*() const>
    a8f4:	e1a01000 	mov	r1, r0
    a8f8:	e28d0010 	add	r0, sp, #16
    a8fc:	eb000dc8 	bl	e024 <CString::Append(char const*)>
    a900:	e28d0010 	add	r0, sp, #16
    a904:	e59f10e4 	ldr	r1, [pc, #228]	@ a9f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x180>
    a908:	eb000dc5 	bl	e024 <CString::Append(char const*)>
    a90c:	e5963000 	ldr	r3, [r6]
    a910:	e1a00006 	mov	r0, r6
    a914:	e5933004 	ldr	r3, [r3, #4]
    a918:	e12fff33 	blx	r3
    a91c:	e1a01007 	mov	r1, r7
    a920:	e28d0010 	add	r0, sp, #16
    a924:	eb000dbe 	bl	e024 <CString::Append(char const*)>
    a928:	e59f10c4 	ldr	r1, [pc, #196]	@ a9f4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x184>
    a92c:	e28d0010 	add	r0, sp, #16
    a930:	eb000dbb 	bl	e024 <CString::Append(char const*)>
    a934:	e1a0000d 	mov	r0, sp
    a938:	eb000d77 	bl	df1c <CString::operator char const*() const>
    a93c:	e1a01000 	mov	r1, r0
    a940:	e28d0010 	add	r0, sp, #16
    a944:	eb000db6 	bl	e024 <CString::Append(char const*)>
    a948:	e3550000 	cmp	r5, #0
    a94c:	0a000015 	beq	a9a8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x138>
    a950:	e59f10a0 	ldr	r1, [pc, #160]	@ a9f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x188>
    a954:	e28d0010 	add	r0, sp, #16
    a958:	eb000db1 	bl	e024 <CString::Append(char const*)>
    a95c:	e28d0010 	add	r0, sp, #16
    a960:	eb000d6d 	bl	df1c <CString::operator char const*() const>
    a964:	e1a01000 	mov	r1, r0
    a968:	e1a00004 	mov	r0, r4
    a96c:	ebfffe7a 	bl	a35c <CLogger::Write(char const*)>
    a970:	e28d0010 	add	r0, sp, #16
    a974:	eb000cfd 	bl	dd70 <CString::~CString()>
    a978:	e1a0000d 	mov	r0, sp
    a97c:	eb000cfb 	bl	dd70 <CString::~CString()>
    a980:	e28dd024 	add	sp, sp, #36	@ 0x24
    a984:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a988:	e28d0010 	add	r0, sp, #16
    a98c:	e3051318 	movw	r1, #21272	@ 0x5318
    a990:	e3401001 	movt	r1, #1
    a994:	eb000d66 	bl	df34 <CString::operator=(char const*)>
    a998:	e5940004 	ldr	r0, [r4, #4]
    a99c:	e3500000 	cmp	r0, #0
    a9a0:	1affffcf 	bne	a8e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
    a9a4:	eaffffdc 	b	a91c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    a9a8:	e59f104c 	ldr	r1, [pc, #76]	@ a9fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x18c>
    a9ac:	e28d0010 	add	r0, sp, #16
    a9b0:	eb000d9b 	bl	e024 <CString::Append(char const*)>
    a9b4:	e59f103c 	ldr	r1, [pc, #60]	@ a9f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x188>
    a9b8:	e28d0010 	add	r0, sp, #16
    a9bc:	eb000d98 	bl	e024 <CString::Append(char const*)>
    a9c0:	e28d0010 	add	r0, sp, #16
    a9c4:	eb000d54 	bl	df1c <CString::operator char const*() const>
    a9c8:	e1a01000 	mov	r1, r0
    a9cc:	e1a00004 	mov	r0, r4
    a9d0:	ebfffe61 	bl	a35c <CLogger::Write(char const*)>
    a9d4:	e59430f8 	ldr	r3, [r4, #248]	@ 0xf8
    a9d8:	e3530000 	cmp	r3, #0
    a9dc:	0a000000 	beq	a9e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x174>
    a9e0:	e12fff33 	blx	r3
    a9e4:	e3a000ff 	mov	r0, #255	@ 0xff
    a9e8:	eb0012db 	bl	f55c <set_qemu_exit_status>
    a9ec:	eb0012db 	bl	f560 <halt>
    a9f0:	00015330 	.word	0x00015330
    a9f4:	00015320 	.word	0x00015320
    a9f8:	0001532c 	.word	0x0001532c
    a9fc:	00015324 	.word	0x00015324

0000aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    aa00:	e52d3004 	push	{r3}		@ (str r3, [sp, #-4]!)
    aa04:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    aa08:	e24dd010 	sub	sp, sp, #16
    aa0c:	e28dc018 	add	ip, sp, #24
    aa10:	e59d3014 	ldr	r3, [sp, #20]
    aa14:	e58dc000 	str	ip, [sp]
    aa18:	e58dc00c 	str	ip, [sp, #12]
    aa1c:	ebffff93 	bl	a870 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    aa20:	e28dd010 	add	sp, sp, #16
    aa24:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
    aa28:	e28dd004 	add	sp, sp, #4
    aa2c:	e12fff1e 	bx	lr

0000aa30 <CLogger::Initialize(CDevice*)>:
    aa30:	e92d4010 	push	{r4, lr}
    aa34:	e1a04000 	mov	r4, r0
    aa38:	e24dd008 	sub	sp, sp, #8
    aa3c:	e580100c 	str	r1, [r0, #12]
    aa40:	eb000235 	bl	b31c <CMachineInfo::Get()>
    aa44:	eb000131 	bl	af10 <CMachineInfo::GetMachineName() const>
    aa48:	e3051318 	movw	r1, #21272	@ 0x5318
    aa4c:	e3401001 	movt	r1, #1
    aa50:	e1a0c000 	mov	ip, r0
    aa54:	e281301c 	add	r3, r1, #28
    aa58:	e1a00004 	mov	r0, r4
    aa5c:	e58dc004 	str	ip, [sp, #4]
    aa60:	e3a02003 	mov	r2, #3
    aa64:	e2811034 	add	r1, r1, #52	@ 0x34
    aa68:	e307c718 	movw	ip, #30488	@ 0x7718
    aa6c:	e340c001 	movt	ip, #1
    aa70:	e58dc000 	str	ip, [sp]
    aa74:	ebffffe1 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aa78:	e3a00001 	mov	r0, #1
    aa7c:	e28dd008 	add	sp, sp, #8
    aa80:	e8bd8010 	pop	{r4, pc}

0000aa84 <CMachineInfo::CMachineInfo()>:
    aa84:	e92d4830 	push	{r4, r5, fp, lr}
    aa88:	e28db00c 	add	fp, sp, #12
    aa8c:	e24dd048 	sub	sp, sp, #72	@ 0x48
    aa90:	e50b0048 	str	r0, [fp, #-72]	@ 0xffffffb8
    aa94:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    aa98:	e3a02000 	mov	r2, #0
    aa9c:	e5832000 	str	r2, [r3]
    aaa0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    aaa4:	e3a02014 	mov	r2, #20
    aaa8:	e5c32008 	strb	r2, [r3, #8]
    aaac:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    aab0:	e3a02000 	mov	r2, #0
    aab4:	e5832010 	str	r2, [r3, #16]
    aab8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    aabc:	e3a02000 	mov	r2, #0
    aac0:	e5832018 	str	r2, [r3, #24]
    aac4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    aac8:	e3a02004 	mov	r2, #4
    aacc:	e5c32020 	strb	r2, [r3, #32]
    aad0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    aad4:	e3a02000 	mov	r2, #0
    aad8:	e5832028 	str	r2, [r3, #40]	@ 0x28
    aadc:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    aae0:	e3012f35 	movw	r2, #7989	@ 0x1f35
    aae4:	e1c323b0 	strh	r2, [r3, #48]	@ 0x30
    aae8:	e30736fc 	movw	r3, #30460	@ 0x76fc
    aaec:	e3403001 	movt	r3, #1
    aaf0:	e5933000 	ldr	r3, [r3]
    aaf4:	e3530000 	cmp	r3, #0
    aaf8:	0a000025 	beq	ab94 <CMachineInfo::CMachineInfo()+0x110>
    aafc:	e30736fc 	movw	r3, #30460	@ 0x76fc
    ab00:	e3403001 	movt	r3, #1
    ab04:	e5933000 	ldr	r3, [r3]
    ab08:	e5932000 	ldr	r2, [r3]
    ab0c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ab10:	e5832000 	str	r2, [r3]
    ab14:	e30736fc 	movw	r3, #30460	@ 0x76fc
    ab18:	e3403001 	movt	r3, #1
    ab1c:	e5933000 	ldr	r3, [r3]
    ab20:	e5d32008 	ldrb	r2, [r3, #8]
    ab24:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ab28:	e5c32008 	strb	r2, [r3, #8]
    ab2c:	e30736fc 	movw	r3, #30460	@ 0x76fc
    ab30:	e3403001 	movt	r3, #1
    ab34:	e5933000 	ldr	r3, [r3]
    ab38:	e5932010 	ldr	r2, [r3, #16]
    ab3c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ab40:	e5832010 	str	r2, [r3, #16]
    ab44:	e30736fc 	movw	r3, #30460	@ 0x76fc
    ab48:	e3403001 	movt	r3, #1
    ab4c:	e5933000 	ldr	r3, [r3]
    ab50:	e5932018 	ldr	r2, [r3, #24]
    ab54:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ab58:	e5832018 	str	r2, [r3, #24]
    ab5c:	e30736fc 	movw	r3, #30460	@ 0x76fc
    ab60:	e3403001 	movt	r3, #1
    ab64:	e5933000 	ldr	r3, [r3]
    ab68:	e5d32020 	ldrb	r2, [r3, #32]
    ab6c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ab70:	e5c32020 	strb	r2, [r3, #32]
    ab74:	e30736fc 	movw	r3, #30460	@ 0x76fc
    ab78:	e3403001 	movt	r3, #1
    ab7c:	e5933000 	ldr	r3, [r3]
    ab80:	e5932028 	ldr	r2, [r3, #40]	@ 0x28
    ab84:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ab88:	e5832028 	str	r2, [r3, #40]	@ 0x28
    ab8c:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
    ab90:	ea0000d1 	b	aedc <CMachineInfo::CMachineInfo()+0x458>
    ab94:	e30736fc 	movw	r3, #30460	@ 0x76fc
    ab98:	e3403001 	movt	r3, #1
    ab9c:	e51b2048 	ldr	r2, [fp, #-72]	@ 0xffffffb8
    aba0:	e5832000 	str	r2, [r3]
    aba4:	e24b3020 	sub	r3, fp, #32
    aba8:	e3a01001 	mov	r1, #1
    abac:	e1a00003 	mov	r0, r3
    abb0:	eb0020c9 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
    abb4:	e24b2030 	sub	r2, fp, #48	@ 0x30
    abb8:	e24b0020 	sub	r0, fp, #32
    abbc:	e3a03000 	mov	r3, #0
    abc0:	e58d3000 	str	r3, [sp]
    abc4:	e3a03010 	mov	r3, #16
    abc8:	e3a01001 	mov	r1, #1
    abcc:	e3401006 	movt	r1, #6
    abd0:	eb002113 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    abd4:	e1a03000 	mov	r3, r0
    abd8:	e3530000 	cmp	r3, #0
    abdc:	0a000003 	beq	abf0 <CMachineInfo::CMachineInfo()+0x16c>
    abe0:	e51b3024 	ldr	r3, [fp, #-36]	@ 0xffffffdc
    abe4:	e6ff2073 	uxth	r2, r3
    abe8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    abec:	e1c323b0 	strh	r2, [r3, #48]	@ 0x30
    abf0:	e24b2040 	sub	r2, fp, #64	@ 0x40
    abf4:	e24b0020 	sub	r0, fp, #32
    abf8:	e3a03000 	mov	r3, #0
    abfc:	e58d3000 	str	r3, [sp]
    ac00:	e3a03010 	mov	r3, #16
    ac04:	e3a01002 	mov	r1, #2
    ac08:	e3401001 	movt	r1, #1
    ac0c:	eb002104 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ac10:	e1a03000 	mov	r3, r0
    ac14:	e2233001 	eor	r3, r3, #1
    ac18:	e6ef3073 	uxtb	r3, r3
    ac1c:	e3530000 	cmp	r3, #0
    ac20:	0a000002 	beq	ac30 <CMachineInfo::CMachineInfo()+0x1ac>
    ac24:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
    ac28:	e3a05000 	mov	r5, #0
    ac2c:	ea0000a3 	b	aec0 <CMachineInfo::CMachineInfo()+0x43c>
    ac30:	e51b2034 	ldr	r2, [fp, #-52]	@ 0xffffffcc
    ac34:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ac38:	e5832000 	str	r2, [r3]
    ac3c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ac40:	e5933000 	ldr	r3, [r3]
    ac44:	e2033502 	and	r3, r3, #8388608	@ 0x800000
    ac48:	e3530000 	cmp	r3, #0
    ac4c:	0a000063 	beq	ade0 <CMachineInfo::CMachineInfo()+0x35c>
    ac50:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ac54:	e5933000 	ldr	r3, [r3]
    ac58:	e1a03223 	lsr	r3, r3, #4
    ac5c:	e6ef3073 	uxtb	r3, r3
    ac60:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
    ac64:	e3a03000 	mov	r3, #0
    ac68:	e50b3010 	str	r3, [fp, #-16]
    ac6c:	ea00000c 	b	aca4 <CMachineInfo::CMachineInfo()+0x220>
    ac70:	e3053358 	movw	r3, #21336	@ 0x5358
    ac74:	e3403001 	movt	r3, #1
    ac78:	e51b2010 	ldr	r2, [fp, #-16]
    ac7c:	e3a0100c 	mov	r1, #12
    ac80:	e0020291 	mul	r2, r1, r2
    ac84:	e0833002 	add	r3, r3, r2
    ac88:	e5933000 	ldr	r3, [r3]
    ac8c:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
    ac90:	e1520003 	cmp	r2, r3
    ac94:	0a000006 	beq	acb4 <CMachineInfo::CMachineInfo()+0x230>
    ac98:	e51b3010 	ldr	r3, [fp, #-16]
    ac9c:	e2833001 	add	r3, r3, #1
    aca0:	e50b3010 	str	r3, [fp, #-16]
    aca4:	e51b3010 	ldr	r3, [fp, #-16]
    aca8:	e3530011 	cmp	r3, #17
    acac:	9affffef 	bls	ac70 <CMachineInfo::CMachineInfo()+0x1ec>
    acb0:	ea000000 	b	acb8 <CMachineInfo::CMachineInfo()+0x234>
    acb4:	e320f000 	nop	{0}
    acb8:	e51b3010 	ldr	r3, [fp, #-16]
    acbc:	e3530011 	cmp	r3, #17
    acc0:	9a000002 	bls	acd0 <CMachineInfo::CMachineInfo()+0x24c>
    acc4:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
    acc8:	e3a05000 	mov	r5, #0
    accc:	ea00007b 	b	aec0 <CMachineInfo::CMachineInfo()+0x43c>
    acd0:	e3053358 	movw	r3, #21336	@ 0x5358
    acd4:	e3403001 	movt	r3, #1
    acd8:	e51b2010 	ldr	r2, [fp, #-16]
    acdc:	e3a0100c 	mov	r1, #12
    ace0:	e0020291 	mul	r2, r1, r2
    ace4:	e0833002 	add	r3, r3, r2
    ace8:	e2833004 	add	r3, r3, #4
    acec:	e5d32000 	ldrb	r2, [r3]
    acf0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    acf4:	e5c32008 	strb	r2, [r3, #8]
    acf8:	e3053358 	movw	r3, #21336	@ 0x5358
    acfc:	e3403001 	movt	r3, #1
    ad00:	e51b2010 	ldr	r2, [fp, #-16]
    ad04:	e3a0100c 	mov	r1, #12
    ad08:	e0020291 	mul	r2, r1, r2
    ad0c:	e0833002 	add	r3, r3, r2
    ad10:	e2833008 	add	r3, r3, #8
    ad14:	e5932000 	ldr	r2, [r3]
    ad18:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ad1c:	e5832010 	str	r2, [r3, #16]
    ad20:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ad24:	e5933000 	ldr	r3, [r3]
    ad28:	e203300f 	and	r3, r3, #15
    ad2c:	e2832001 	add	r2, r3, #1
    ad30:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ad34:	e5832018 	str	r2, [r3, #24]
    ad38:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ad3c:	e5933000 	ldr	r3, [r3]
    ad40:	e1a03623 	lsr	r3, r3, #12
    ad44:	e6ef3073 	uxtb	r3, r3
    ad48:	e203300f 	and	r3, r3, #15
    ad4c:	e6ef2073 	uxtb	r2, r3
    ad50:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ad54:	e5c32020 	strb	r2, [r3, #32]
    ad58:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ad5c:	e5933000 	ldr	r3, [r3]
    ad60:	e1a03a23 	lsr	r3, r3, #20
    ad64:	e2033007 	and	r3, r3, #7
    ad68:	e3a02c01 	mov	r2, #256	@ 0x100
    ad6c:	e1a03312 	lsl	r3, r2, r3
    ad70:	e1a02003 	mov	r2, r3
    ad74:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ad78:	e5832028 	str	r2, [r3, #40]	@ 0x28
    ad7c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ad80:	e5d33020 	ldrb	r3, [r3, #32]
    ad84:	e3530003 	cmp	r3, #3
    ad88:	9a000002 	bls	ad98 <CMachineInfo::CMachineInfo()+0x314>
    ad8c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ad90:	e3a02004 	mov	r2, #4
    ad94:	e5c32020 	strb	r2, [r3, #32]
    ad98:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ad9c:	e5d33008 	ldrb	r3, [r3, #8]
    ada0:	e3530003 	cmp	r3, #3
    ada4:	1a000044 	bne	aebc <CMachineInfo::CMachineInfo()+0x438>
    ada8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    adac:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
    adb0:	e3530c01 	cmp	r3, #256	@ 0x100
    adb4:	1a000040 	bne	aebc <CMachineInfo::CMachineInfo()+0x438>
    adb8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    adbc:	e5933018 	ldr	r3, [r3, #24]
    adc0:	e3530001 	cmp	r3, #1
    adc4:	1a000001 	bne	add0 <CMachineInfo::CMachineInfo()+0x34c>
    adc8:	e3a02001 	mov	r2, #1
    adcc:	ea000000 	b	add4 <CMachineInfo::CMachineInfo()+0x350>
    add0:	e3a02002 	mov	r2, #2
    add4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    add8:	e5c32008 	strb	r2, [r3, #8]
    addc:	ea000036 	b	aebc <CMachineInfo::CMachineInfo()+0x438>
    ade0:	e3a03000 	mov	r3, #0
    ade4:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
    ade8:	ea00000a 	b	ae18 <CMachineInfo::CMachineInfo()+0x394>
    adec:	e3053430 	movw	r3, #21552	@ 0x5430
    adf0:	e3403001 	movt	r3, #1
    adf4:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
    adf8:	e7932202 	ldr	r2, [r3, r2, lsl #4]
    adfc:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ae00:	e5933000 	ldr	r3, [r3]
    ae04:	e1520003 	cmp	r2, r3
    ae08:	0a000006 	beq	ae28 <CMachineInfo::CMachineInfo()+0x3a4>
    ae0c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    ae10:	e2833001 	add	r3, r3, #1
    ae14:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
    ae18:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    ae1c:	e3530010 	cmp	r3, #16
    ae20:	9afffff1 	bls	adec <CMachineInfo::CMachineInfo()+0x368>
    ae24:	ea000000 	b	ae2c <CMachineInfo::CMachineInfo()+0x3a8>
    ae28:	e320f000 	nop	{0}
    ae2c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    ae30:	e3530010 	cmp	r3, #16
    ae34:	9a000002 	bls	ae44 <CMachineInfo::CMachineInfo()+0x3c0>
    ae38:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
    ae3c:	e3a05000 	mov	r5, #0
    ae40:	ea00001e 	b	aec0 <CMachineInfo::CMachineInfo()+0x43c>
    ae44:	e3052430 	movw	r2, #21552	@ 0x5430
    ae48:	e3402001 	movt	r2, #1
    ae4c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    ae50:	e1a03203 	lsl	r3, r3, #4
    ae54:	e0823003 	add	r3, r2, r3
    ae58:	e5d32004 	ldrb	r2, [r3, #4]
    ae5c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ae60:	e5c32008 	strb	r2, [r3, #8]
    ae64:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ae68:	e3a02001 	mov	r2, #1
    ae6c:	e5832010 	str	r2, [r3, #16]
    ae70:	e3052430 	movw	r2, #21552	@ 0x5430
    ae74:	e3402001 	movt	r2, #1
    ae78:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    ae7c:	e1a03203 	lsl	r3, r3, #4
    ae80:	e0823003 	add	r3, r2, r3
    ae84:	e5932008 	ldr	r2, [r3, #8]
    ae88:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ae8c:	e5832018 	str	r2, [r3, #24]
    ae90:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    ae94:	e3a02000 	mov	r2, #0
    ae98:	e5c32020 	strb	r2, [r3, #32]
    ae9c:	e3052430 	movw	r2, #21552	@ 0x5430
    aea0:	e3402001 	movt	r2, #1
    aea4:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    aea8:	e1a03203 	lsl	r3, r3, #4
    aeac:	e0823003 	add	r3, r2, r3
    aeb0:	e593200c 	ldr	r2, [r3, #12]
    aeb4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    aeb8:	e5832028 	str	r2, [r3, #40]	@ 0x28
    aebc:	e3a05001 	mov	r5, #1
    aec0:	e24b3020 	sub	r3, fp, #32
    aec4:	e1a00003 	mov	r0, r3
    aec8:	eb00200a 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
    aecc:	e3550001 	cmp	r5, #1
    aed0:	1a000001 	bne	aedc <CMachineInfo::CMachineInfo()+0x458>
    aed4:	e320f000 	nop	{0}
    aed8:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
    aedc:	e1a03004 	mov	r3, r4
    aee0:	e1a00003 	mov	r0, r3
    aee4:	e24bd00c 	sub	sp, fp, #12
    aee8:	e8bd8830 	pop	{r4, r5, fp, pc}

0000aeec <CMachineInfo::~CMachineInfo()>:
    aeec:	e30736fc 	movw	r3, #30460	@ 0x76fc
    aef0:	e3403001 	movt	r3, #1
    aef4:	e5932000 	ldr	r2, [r3]
    aef8:	e1520000 	cmp	r2, r0
    aefc:	03a02000 	moveq	r2, #0
    af00:	05832000 	streq	r2, [r3]
    af04:	e12fff1e 	bx	lr

0000af08 <CMachineInfo::GetMachineModel() const>:
    af08:	e5d00008 	ldrb	r0, [r0, #8]
    af0c:	e12fff1e 	bx	lr

0000af10 <CMachineInfo::GetMachineName() const>:
    af10:	e5d02008 	ldrb	r2, [r0, #8]
    af14:	e3053540 	movw	r3, #21824	@ 0x5540
    af18:	e3403001 	movt	r3, #1
    af1c:	e7930102 	ldr	r0, [r3, r2, lsl #2]
    af20:	e12fff1e 	bx	lr

0000af24 <CMachineInfo::GetModelMajor() const>:
    af24:	e5900010 	ldr	r0, [r0, #16]
    af28:	e12fff1e 	bx	lr

0000af2c <CMachineInfo::GetModelRevision() const>:
    af2c:	e5900018 	ldr	r0, [r0, #24]
    af30:	e12fff1e 	bx	lr

0000af34 <CMachineInfo::GetSoCType() const>:
    af34:	e5d00020 	ldrb	r0, [r0, #32]
    af38:	e12fff1e 	bx	lr

0000af3c <CMachineInfo::GetRAMSize() const>:
    af3c:	e5900028 	ldr	r0, [r0, #40]	@ 0x28
    af40:	e12fff1e 	bx	lr

0000af44 <CMachineInfo::GetSoCName() const>:
    af44:	e5d02020 	ldrb	r2, [r0, #32]
    af48:	e3053540 	movw	r3, #21824	@ 0x5540
    af4c:	e3403001 	movt	r3, #1
    af50:	e0833102 	add	r3, r3, r2, lsl #2
    af54:	e5930058 	ldr	r0, [r3, #88]	@ 0x58
    af58:	e12fff1e 	bx	lr

0000af5c <CMachineInfo::GetRevisionRaw() const>:
    af5c:	e5900000 	ldr	r0, [r0]
    af60:	e12fff1e 	bx	lr

0000af64 <CMachineInfo::GetActLEDInfo() const>:
    af64:	e5d02008 	ldrb	r2, [r0, #8]
    af68:	e3053540 	movw	r3, #21824	@ 0x5540
    af6c:	e3403001 	movt	r3, #1
    af70:	e0833102 	add	r3, r3, r2, lsl #2
    af74:	e5930070 	ldr	r0, [r3, #112]	@ 0x70
    af78:	e12fff1e 	bx	lr

0000af7c <CMachineInfo::GetClockRate(unsigned int) const>:
    af7c:	e92d4070 	push	{r4, r5, r6, lr}
    af80:	e1a04001 	mov	r4, r1
    af84:	e1a06000 	mov	r6, r0
    af88:	e24dd028 	sub	sp, sp, #40	@ 0x28
    af8c:	e3a01000 	mov	r1, #0
    af90:	e28d000c 	add	r0, sp, #12
    af94:	eb001fd0 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
    af98:	e3a03014 	mov	r3, #20
    af9c:	e3a02004 	mov	r2, #4
    afa0:	e3a01002 	mov	r1, #2
    afa4:	e3401003 	movt	r1, #3
    afa8:	e58d2000 	str	r2, [sp]
    afac:	e28d000c 	add	r0, sp, #12
    afb0:	e08d2003 	add	r2, sp, r3
    afb4:	e58d4020 	str	r4, [sp, #32]
    afb8:	eb002019 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    afbc:	e3500000 	cmp	r0, #0
    afc0:	0a000002 	beq	afd0 <CMachineInfo::GetClockRate(unsigned int) const+0x54>
    afc4:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
    afc8:	e3550000 	cmp	r5, #0
    afcc:	1a000026 	bne	b06c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    afd0:	e3a03014 	mov	r3, #20
    afd4:	e3a01004 	mov	r1, #4
    afd8:	e08d2003 	add	r2, sp, r3
    afdc:	e58d1000 	str	r1, [sp]
    afe0:	e28d000c 	add	r0, sp, #12
    afe4:	e3a01047 	mov	r1, #71	@ 0x47
    afe8:	e3401003 	movt	r1, #3
    afec:	e58d4020 	str	r4, [sp, #32]
    aff0:	eb00200b 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    aff4:	e3500000 	cmp	r0, #0
    aff8:	0a000002 	beq	b008 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    affc:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
    b000:	e3550000 	cmp	r5, #0
    b004:	1a000018 	bne	b06c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    b008:	e2444001 	sub	r4, r4, #1
    b00c:	e354000d 	cmp	r4, #13
    b010:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
    b014:	ea000022 	b	b0a4 <CMachineInfo::GetClockRate(unsigned int) const+0x128>
    b018:	0000b080 	.word	0x0000b080
    b01c:	0000b098 	.word	0x0000b098
    b020:	0000b0a4 	.word	0x0000b0a4
    b024:	0000b050 	.word	0x0000b050
    b028:	0000b0a4 	.word	0x0000b0a4
    b02c:	0000b0a4 	.word	0x0000b0a4
    b030:	0000b0a4 	.word	0x0000b0a4
    b034:	0000b0a4 	.word	0x0000b0a4
    b038:	0000b0a4 	.word	0x0000b0a4
    b03c:	0000b0a4 	.word	0x0000b0a4
    b040:	0000b0a4 	.word	0x0000b0a4
    b044:	0000b080 	.word	0x0000b080
    b048:	0000b0a4 	.word	0x0000b0a4
    b04c:	0000b08c 	.word	0x0000b08c
    b050:	e5962010 	ldr	r2, [r6, #16]
    b054:	e30b3280 	movw	r3, #45696	@ 0xb280
    b058:	e3403ee6 	movt	r3, #3814	@ 0xee6
    b05c:	e3a05ca3 	mov	r5, #41728	@ 0xa300
    b060:	e34151e1 	movt	r5, #4577	@ 0x11e1
    b064:	e3520002 	cmp	r2, #2
    b068:	91a05003 	movls	r5, r3
    b06c:	e28d000c 	add	r0, sp, #12
    b070:	eb001fa0 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
    b074:	e1a00005 	mov	r0, r5
    b078:	e28dd028 	add	sp, sp, #40	@ 0x28
    b07c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b080:	e3a05ce1 	mov	r5, #57600	@ 0xe100
    b084:	e34055f5 	movt	r5, #1525	@ 0x5f5
    b088:	eafffff7 	b	b06c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    b08c:	e30658c0 	movw	r5, #26816	@ 0x68c0
    b090:	e3405478 	movt	r5, #1144	@ 0x478
    b094:	eafffff4 	b	b06c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    b098:	e3a05b1b 	mov	r5, #27648	@ 0x6c00
    b09c:	e34052dc 	movt	r5, #732	@ 0x2dc
    b0a0:	eafffff1 	b	b06c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    b0a4:	e59f1008 	ldr	r1, [pc, #8]	@ b0b4 <CMachineInfo::GetClockRate(unsigned int) const+0x138>
    b0a8:	e3002161 	movw	r2, #353	@ 0x161
    b0ac:	e2810010 	add	r0, r1, #16
    b0b0:	eb001e26 	bl	12950 <assertion_failed>
    b0b4:	00015604 	.word	0x00015604

0000b0b8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    b0b8:	e3510036 	cmp	r1, #54	@ 0x36
    b0bc:	0a000006 	beq	b0dc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    b0c0:	e3510037 	cmp	r1, #55	@ 0x37
    b0c4:	1a00000e 	bne	b104 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
    b0c8:	e5d03008 	ldrb	r3, [r0, #8]
    b0cc:	e3530004 	cmp	r3, #4
    b0d0:	33a0002d 	movcc	r0, #45	@ 0x2d
    b0d4:	23a00028 	movcs	r0, #40	@ 0x28
    b0d8:	e12fff1e 	bx	lr
    b0dc:	e5d03008 	ldrb	r3, [r0, #8]
    b0e0:	e3530003 	cmp	r3, #3
    b0e4:	9a000004 	bls	b0fc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
    b0e8:	e5903010 	ldr	r3, [r0, #16]
    b0ec:	e3530003 	cmp	r3, #3
    b0f0:	33a0002d 	movcc	r0, #45	@ 0x2d
    b0f4:	23a00029 	movcs	r0, #41	@ 0x29
    b0f8:	e12fff1e 	bx	lr
    b0fc:	e3a00028 	mov	r0, #40	@ 0x28
    b100:	e12fff1e 	bx	lr
    b104:	e59f100c 	ldr	r1, [pc, #12]	@ b118 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
    b108:	e3a02f69 	mov	r2, #420	@ 0x1a4
    b10c:	e92d4010 	push	{r4, lr}
    b110:	e2810010 	add	r0, r1, #16
    b114:	eb001e0d 	bl	12950 <assertion_failed>
    b118:	00015604 	.word	0x00015604

0000b11c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
    b11c:	e5903010 	ldr	r3, [r0, #16]
    b120:	e3530003 	cmp	r3, #3
    b124:	8a000006 	bhi	b144 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>
    b128:	e3510001 	cmp	r1, #1
    b12c:	0a00000b 	beq	b160 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
    b130:	e3510006 	cmp	r1, #6
    b134:	e3a00c65 	mov	r0, #25856	@ 0x6500
    b138:	e3410dcd 	movt	r0, #7629	@ 0x1dcd
    b13c:	13a00000 	movne	r0, #0
    b140:	e12fff1e 	bx	lr
    b144:	e3510001 	cmp	r1, #1
    b148:	0a000007 	beq	b16c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
    b14c:	e3510006 	cmp	r1, #6
    b150:	e3a00d5e 	mov	r0, #6016	@ 0x1780
    b154:	e3420cb4 	movt	r0, #11444	@ 0x2cb4
    b158:	13a00000 	movne	r0, #0
    b15c:	e12fff1e 	bx	lr
    b160:	e3a00b3e 	mov	r0, #63488	@ 0xf800
    b164:	e3400124 	movt	r0, #292	@ 0x124
    b168:	e12fff1e 	bx	lr
    b16c:	e30f0980 	movw	r0, #63872	@ 0xf980
    b170:	e3400337 	movt	r0, #823	@ 0x337
    b174:	e12fff1e 	bx	lr

0000b178 <CMachineInfo::GetDevice(TDeviceId) const>:
    b178:	e3510000 	cmp	r1, #0
    b17c:	1a000003 	bne	b190 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    b180:	e5d00008 	ldrb	r0, [r0, #8]
    b184:	e2500001 	subs	r0, r0, #1
    b188:	13a00001 	movne	r0, #1
    b18c:	e12fff1e 	bx	lr
    b190:	e59f100c 	ldr	r1, [pc, #12]	@ b1a4 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
    b194:	e30021df 	movw	r2, #479	@ 0x1df
    b198:	e92d4010 	push	{r4, lr}
    b19c:	e2810010 	add	r0, r1, #16
    b1a0:	eb001dea 	bl	12950 <assertion_failed>
    b1a4:	00015604 	.word	0x00015604

0000b1a8 <CMachineInfo::ArePWMChannelsSwapped() const>:
    b1a8:	e5d03008 	ldrb	r3, [r0, #8]
    b1ac:	e2430006 	sub	r0, r3, #6
    b1b0:	e3500002 	cmp	r0, #2
    b1b4:	83530003 	cmphi	r3, #3
    b1b8:	83a00001 	movhi	r0, #1
    b1bc:	93a00000 	movls	r0, #0
    b1c0:	e12fff1e 	bx	lr

0000b1c4 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
    b1c4:	e30726fc 	movw	r2, #30460	@ 0x76fc
    b1c8:	e3402001 	movt	r2, #1
    b1cc:	e92d4010 	push	{r4, lr}
    b1d0:	e5922000 	ldr	r2, [r2]
    b1d4:	e3520000 	cmp	r2, #0
    b1d8:	11a03000 	movne	r3, r0
    b1dc:	1a000001 	bne	b1e8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x24>
    b1e0:	ea00000f 	b	b224 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x60>
    b1e4:	e1a03002 	mov	r3, r2
    b1e8:	e1520003 	cmp	r2, r3
    b1ec:	1afffffc 	bne	b1e4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
    b1f0:	e351000f 	cmp	r1, #15
    b1f4:	8a00000e 	bhi	b234 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x70>
    b1f8:	e351000b 	cmp	r1, #11
    b1fc:	8a000020 	bhi	b284 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    b200:	e1d233b0 	ldrh	r3, [r2, #48]	@ 0x30
    b204:	e1a00153 	asr	r0, r3, r1
    b208:	e3100001 	tst	r0, #1
    b20c:	0a000015 	beq	b268 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa4>
    b210:	e3a0c001 	mov	ip, #1
    b214:	e1a00001 	mov	r0, r1
    b218:	e1c3311c 	bic	r3, r3, ip, lsl r1
    b21c:	e1c233b0 	strh	r3, [r2, #48]	@ 0x30
    b220:	e8bd8010 	pop	{r4, pc}
    b224:	e59f1068 	ldr	r1, [pc, #104]	@ b294 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
    b228:	e3a02e1f 	mov	r2, #496	@ 0x1f0
    b22c:	e2810014 	add	r0, r1, #20
    b230:	eb001dc6 	bl	12950 <assertion_failed>
    b234:	e3510081 	cmp	r1, #129	@ 0x81
    b238:	e1d3c3b0 	ldrh	ip, [r3, #48]	@ 0x30
    b23c:	13a0200b 	movne	r2, #11
    b240:	03a02006 	moveq	r2, #6
    b244:	e1a0125c 	asr	r1, ip, r2
    b248:	e3110001 	tst	r1, #1
    b24c:	0a000003 	beq	b260 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x9c>
    b250:	ea000006 	b	b270 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
    b254:	e1a0125c 	asr	r1, ip, r2
    b258:	e3110001 	tst	r1, #1
    b25c:	1a000003 	bne	b270 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
    b260:	e2522001 	subs	r2, r2, #1
    b264:	2afffffa 	bcs	b254 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x90>
    b268:	e3a00080 	mov	r0, #128	@ 0x80
    b26c:	e8bd8010 	pop	{r4, pc}
    b270:	e3a01001 	mov	r1, #1
    b274:	e1a00002 	mov	r0, r2
    b278:	e1ccc211 	bic	ip, ip, r1, lsl r2
    b27c:	e1c3c3b0 	strh	ip, [r3, #48]	@ 0x30
    b280:	e8bd8010 	pop	{r4, pc}
    b284:	e59f1008 	ldr	r1, [pc, #8]	@ b294 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
    b288:	e30021f9 	movw	r2, #505	@ 0x1f9
    b28c:	e2810024 	add	r0, r1, #36	@ 0x24
    b290:	eb001dae 	bl	12950 <assertion_failed>
    b294:	00015604 	.word	0x00015604

0000b298 <CMachineInfo::FreeDMAChannel(unsigned int)>:
    b298:	e30736fc 	movw	r3, #30460	@ 0x76fc
    b29c:	e3403001 	movt	r3, #1
    b2a0:	e92d4010 	push	{r4, lr}
    b2a4:	e5933000 	ldr	r3, [r3]
    b2a8:	e3530000 	cmp	r3, #0
    b2ac:	1a000001 	bne	b2b8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
    b2b0:	ea00000c 	b	b2e8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x50>
    b2b4:	e1a00003 	mov	r0, r3
    b2b8:	e1530000 	cmp	r3, r0
    b2bc:	1afffffc 	bne	b2b4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
    b2c0:	e351000b 	cmp	r1, #11
    b2c4:	8a00000b 	bhi	b2f8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x60>
    b2c8:	e1d323b0 	ldrh	r2, [r3, #48]	@ 0x30
    b2cc:	e1e00152 	mvn	r0, r2, asr r1
    b2d0:	e3100001 	tst	r0, #1
    b2d4:	0a00000b 	beq	b308 <CMachineInfo::FreeDMAChannel(unsigned int)+0x70>
    b2d8:	e3a00001 	mov	r0, #1
    b2dc:	e1822110 	orr	r2, r2, r0, lsl r1
    b2e0:	e1c323b0 	strh	r2, [r3, #48]	@ 0x30
    b2e4:	e8bd8010 	pop	{r4, pc}
    b2e8:	e59f1028 	ldr	r1, [pc, #40]	@ b318 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b2ec:	e300221d 	movw	r2, #541	@ 0x21d
    b2f0:	e2810014 	add	r0, r1, #20
    b2f4:	eb001d95 	bl	12950 <assertion_failed>
    b2f8:	e59f1018 	ldr	r1, [pc, #24]	@ b318 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b2fc:	e3002225 	movw	r2, #549	@ 0x225
    b300:	e2810024 	add	r0, r1, #36	@ 0x24
    b304:	eb001d91 	bl	12950 <assertion_failed>
    b308:	e59f1008 	ldr	r1, [pc, #8]	@ b318 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b30c:	e3002226 	movw	r2, #550	@ 0x226
    b310:	e2810040 	add	r0, r1, #64	@ 0x40
    b314:	eb001d8d 	bl	12950 <assertion_failed>
    b318:	00015604 	.word	0x00015604

0000b31c <CMachineInfo::Get()>:
    b31c:	e30736fc 	movw	r3, #30460	@ 0x76fc
    b320:	e3403001 	movt	r3, #1
    b324:	e5930000 	ldr	r0, [r3]
    b328:	e3500000 	cmp	r0, #0
    b32c:	112fff1e 	bxne	lr
    b330:	e59f100c 	ldr	r1, [pc, #12]	@ b344 <CMachineInfo::Get()+0x28>
    b334:	e300226f 	movw	r2, #623	@ 0x26f
    b338:	e92d4010 	push	{r4, lr}
    b33c:	e2810014 	add	r0, r1, #20
    b340:	eb001d82 	bl	12950 <assertion_failed>
    b344:	00015604 	.word	0x00015604

0000b348 <CScreenDevice::~CScreenDevice()>:
    b348:	e92d4070 	push	{r4, r5, r6, lr}
    b34c:	e1a04000 	mov	r4, r0
    b350:	e59f509c 	ldr	r5, [pc, #156]	@ b3f4 <CScreenDevice::~CScreenDevice()+0xac>
    b354:	e5805000 	str	r5, [r0]
    b358:	ebfff5cb 	bl	8a8c <CDeviceNameService::Get()>
    b35c:	e5942014 	ldr	r2, [r4, #20]
    b360:	e3a03000 	mov	r3, #0
    b364:	e2851020 	add	r1, r5, #32
    b368:	e2822001 	add	r2, r2, #1
    b36c:	ebfff5ec 	bl	8b24 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    b370:	e5d43010 	ldrb	r3, [r4, #16]
    b374:	e3530000 	cmp	r3, #0
    b378:	0a000003 	beq	b38c <CScreenDevice::~CScreenDevice()+0x44>
    b37c:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
    b380:	e3500000 	cmp	r0, #0
    b384:	0a000000 	beq	b38c <CScreenDevice::~CScreenDevice()+0x44>
    b388:	eb001775 	bl	11164 <operator delete[](void*)>
    b38c:	e5945018 	ldr	r5, [r4, #24]
    b390:	e3a03000 	mov	r3, #0
    b394:	e5843024 	str	r3, [r4, #36]	@ 0x24
    b398:	e1550003 	cmp	r5, r3
    b39c:	0a000004 	beq	b3b4 <CScreenDevice::~CScreenDevice()+0x6c>
    b3a0:	e1a00005 	mov	r0, r5
    b3a4:	eb001de1 	bl	12b30 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b3a8:	e3a01098 	mov	r1, #152	@ 0x98
    b3ac:	e1a00005 	mov	r0, r5
    b3b0:	eb001771 	bl	1117c <operator delete(void*, unsigned int)>
    b3b4:	e5940020 	ldr	r0, [r4, #32]
    b3b8:	e3a03000 	mov	r3, #0
    b3bc:	e5843018 	str	r3, [r4, #24]
    b3c0:	e1500003 	cmp	r0, r3
    b3c4:	0a000000 	beq	b3cc <CScreenDevice::~CScreenDevice()+0x84>
    b3c8:	eb001765 	bl	11164 <operator delete[](void*)>
    b3cc:	e3a03000 	mov	r3, #0
    b3d0:	e2840064 	add	r0, r4, #100	@ 0x64
    b3d4:	e5843020 	str	r3, [r4, #32]
    b3d8:	eb00208e 	bl	13618 <CDMAChannel::~CDMAChannel()>
    b3dc:	e284001c 	add	r0, r4, #28
    b3e0:	eb001f4f 	bl	13124 <CCharGenerator::~CCharGenerator()>
    b3e4:	e1a00004 	mov	r0, r4
    b3e8:	eb001fe7 	bl	1338c <CDevice::~CDevice()>
    b3ec:	e1a00004 	mov	r0, r4
    b3f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b3f4:	00015840 	.word	0x00015840

0000b3f8 <CScreenDevice::~CScreenDevice()>:
    b3f8:	e92d4010 	push	{r4, lr}
    b3fc:	e1a04000 	mov	r4, r0
    b400:	ebffffd0 	bl	b348 <CScreenDevice::~CScreenDevice()>
    b404:	e1a00004 	mov	r0, r4
    b408:	e3a01090 	mov	r1, #144	@ 0x90
    b40c:	eb00175a 	bl	1117c <operator delete(void*, unsigned int)>
    b410:	e1a00004 	mov	r0, r4
    b414:	e8bd8010 	pop	{r4, pc}

0000b418 <CScreenDevice::InvertCursor() [clone .part.0]>:
    b418:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b41c:	e1a04000 	mov	r4, r0
    b420:	e280801c 	add	r8, r0, #28
    b424:	e1a00008 	mov	r0, r8
    b428:	e5946020 	ldr	r6, [r4, #32]
    b42c:	eb001f41 	bl	13138 <CCharGenerator::GetUnderline() const>
    b430:	e1a07000 	mov	r7, r0
    b434:	e1a00008 	mov	r0, r8
    b438:	eb001f3c 	bl	13130 <CCharGenerator::GetCharHeight() const>
    b43c:	e1570000 	cmp	r7, r0
    b440:	2a000030 	bcs	b508 <CScreenDevice::InvertCursor() [clone .part.0]+0xf0>
    b444:	e3a05000 	mov	r5, #0
    b448:	ea000007 	b	b46c <CScreenDevice::InvertCursor() [clone .part.0]+0x54>
    b44c:	e1530002 	cmp	r3, r2
    b450:	2a000002 	bcs	b460 <CScreenDevice::InvertCursor() [clone .part.0]+0x48>
    b454:	e5942034 	ldr	r2, [r4, #52]	@ 0x34
    b458:	e1500002 	cmp	r0, r2
    b45c:	3a00001b 	bcc	b4d0 <CScreenDevice::InvertCursor() [clone .part.0]+0xb8>
    b460:	e1d435b4 	ldrh	r3, [r4, #84]	@ 0x54
    b464:	e14630b2 	strh	r3, [r6, #-2]
    b468:	e2855001 	add	r5, r5, #1
    b46c:	e1a00008 	mov	r0, r8
    b470:	eb001f2c 	bl	13128 <CCharGenerator::GetCharWidth() const>
    b474:	e1550000 	cmp	r5, r0
    b478:	2a00001d 	bcs	b4f4 <CScreenDevice::InvertCursor() [clone .part.0]+0xdc>
    b47c:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
    b480:	e2866002 	add	r6, r6, #2
    b484:	e594004c 	ldr	r0, [r4, #76]	@ 0x4c
    b488:	e5d41051 	ldrb	r1, [r4, #81]	@ 0x51
    b48c:	e0853003 	add	r3, r5, r3
    b490:	e5942030 	ldr	r2, [r4, #48]	@ 0x30
    b494:	e0870000 	add	r0, r7, r0
    b498:	e3510000 	cmp	r1, #0
    b49c:	0affffea 	beq	b44c <CScreenDevice::InvertCursor() [clone .part.0]+0x34>
    b4a0:	e1530002 	cmp	r3, r2
    b4a4:	2affffef 	bcs	b468 <CScreenDevice::InvertCursor() [clone .part.0]+0x50>
    b4a8:	e5942034 	ldr	r2, [r4, #52]	@ 0x34
    b4ac:	e1500002 	cmp	r0, r2
    b4b0:	2affffec 	bcs	b468 <CScreenDevice::InvertCursor() [clone .part.0]+0x50>
    b4b4:	e594c02c 	ldr	ip, [r4, #44]	@ 0x2c
    b4b8:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
    b4bc:	e15610b2 	ldrh	r1, [r6, #-2]
    b4c0:	e023309c 	mla	r3, ip, r0, r3
    b4c4:	e1a03083 	lsl	r3, r3, #1
    b4c8:	e18210b3 	strh	r1, [r2, r3]
    b4cc:	eaffffe5 	b	b468 <CScreenDevice::InvertCursor() [clone .part.0]+0x50>
    b4d0:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
    b4d4:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
    b4d8:	e0233092 	mla	r3, r2, r0, r3
    b4dc:	e1a03083 	lsl	r3, r3, #1
    b4e0:	e19120b3 	ldrh	r2, [r1, r3]
    b4e4:	e14620b2 	strh	r2, [r6, #-2]
    b4e8:	e1d425b2 	ldrh	r2, [r4, #82]	@ 0x52
    b4ec:	e18120b3 	strh	r2, [r1, r3]
    b4f0:	eaffffdc 	b	b468 <CScreenDevice::InvertCursor() [clone .part.0]+0x50>
    b4f4:	e2877001 	add	r7, r7, #1
    b4f8:	e1a00008 	mov	r0, r8
    b4fc:	eb001f0b 	bl	13130 <CCharGenerator::GetCharHeight() const>
    b500:	e1570000 	cmp	r7, r0
    b504:	3affffce 	bcc	b444 <CScreenDevice::InvertCursor() [clone .part.0]+0x2c>
    b508:	e5d43051 	ldrb	r3, [r4, #81]	@ 0x51
    b50c:	e2233001 	eor	r3, r3, #1
    b510:	e5c43051 	strb	r3, [r4, #81]	@ 0x51
    b514:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b518 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
    b518:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b51c:	e1a04000 	mov	r4, r0
    b520:	e1a05001 	mov	r5, r1
    b524:	e1a07002 	mov	r7, r2
    b528:	e1a06003 	mov	r6, r3
    b52c:	eb001fc3 	bl	13440 <CDevice::CDevice()>
    b530:	e59d3018 	ldr	r3, [sp, #24]
    b534:	e5843014 	str	r3, [r4, #20]
    b538:	e284001c 	add	r0, r4, #28
    b53c:	e59f3064 	ldr	r3, [pc, #100]	@ b5a8 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0x90>
    b540:	e5845008 	str	r5, [r4, #8]
    b544:	e3a05000 	mov	r5, #0
    b548:	e5843000 	str	r3, [r4]
    b54c:	e584700c 	str	r7, [r4, #12]
    b550:	e5c46010 	strb	r6, [r4, #16]
    b554:	e5845018 	str	r5, [r4, #24]
    b558:	eb001eee 	bl	13118 <CCharGenerator::CCharGenerator()>
    b55c:	e1a02005 	mov	r2, r5
    b560:	e3a01081 	mov	r1, #129	@ 0x81
    b564:	e2840064 	add	r0, r4, #100	@ 0x64
    b568:	e5845020 	str	r5, [r4, #32]
    b56c:	e3a03001 	mov	r3, #1
    b570:	e34f3fdf 	movt	r3, #65503	@ 0xffdf
    b574:	e5845024 	str	r5, [r4, #36]	@ 0x24
    b578:	e5843050 	str	r3, [r4, #80]	@ 0x50
    b57c:	e584503c 	str	r5, [r4, #60]	@ 0x3c
    b580:	e5845040 	str	r5, [r4, #64]	@ 0x40
    b584:	e5845048 	str	r5, [r4, #72]	@ 0x48
    b588:	e584504c 	str	r5, [r4, #76]	@ 0x4c
    b58c:	e5845054 	str	r5, [r4, #84]	@ 0x54
    b590:	e5c45060 	strb	r5, [r4, #96]	@ 0x60
    b594:	eb001fe7 	bl	13538 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
    b598:	e3a03001 	mov	r3, #1
    b59c:	e1a00004 	mov	r0, r4
    b5a0:	e584308c 	str	r3, [r4, #140]	@ 0x8c
    b5a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b5a8:	00015840 	.word	0x00015840

0000b5ac <CScreenDevice::GetWidth() const>:
    b5ac:	e5900030 	ldr	r0, [r0, #48]	@ 0x30
    b5b0:	e12fff1e 	bx	lr

0000b5b4 <CScreenDevice::GetHeight() const>:
    b5b4:	e5900034 	ldr	r0, [r0, #52]	@ 0x34
    b5b8:	e12fff1e 	bx	lr

0000b5bc <CScreenDevice::GetColumns() const>:
    b5bc:	e1a03000 	mov	r3, r0
    b5c0:	e92d4010 	push	{r4, lr}
    b5c4:	e280001c 	add	r0, r0, #28
    b5c8:	e5934030 	ldr	r4, [r3, #48]	@ 0x30
    b5cc:	eb001ed5 	bl	13128 <CCharGenerator::GetCharWidth() const>
    b5d0:	e730f014 	udiv	r0, r4, r0
    b5d4:	e8bd8010 	pop	{r4, pc}

0000b5d8 <CScreenDevice::GetRows() const>:
    b5d8:	e1a03000 	mov	r3, r0
    b5dc:	e92d4010 	push	{r4, lr}
    b5e0:	e280001c 	add	r0, r0, #28
    b5e4:	e5934038 	ldr	r4, [r3, #56]	@ 0x38
    b5e8:	eb001ed0 	bl	13130 <CCharGenerator::GetCharHeight() const>
    b5ec:	e730f014 	udiv	r0, r4, r0
    b5f0:	e8bd8010 	pop	{r4, pc}

0000b5f4 <CScreenDevice::GetFrameBuffer()>:
    b5f4:	e5900018 	ldr	r0, [r0, #24]
    b5f8:	e12fff1e 	bx	lr

0000b5fc <CScreenDevice::GetStatus()>:
    b5fc:	e5912028 	ldr	r2, [r1, #40]	@ 0x28
    b600:	e5802004 	str	r2, [r0, #4]
    b604:	e5912040 	ldr	r2, [r1, #64]	@ 0x40
    b608:	e591c024 	ldr	ip, [r1, #36]	@ 0x24
    b60c:	e580200c 	str	r2, [r0, #12]
    b610:	e5912048 	ldr	r2, [r1, #72]	@ 0x48
    b614:	e580c000 	str	ip, [r0]
    b618:	e5802014 	str	r2, [r0, #20]
    b61c:	e591c03c 	ldr	ip, [r1, #60]	@ 0x3c
    b620:	e5d12050 	ldrb	r2, [r1, #80]	@ 0x50
    b624:	e580c008 	str	ip, [r0, #8]
    b628:	e5c0201c 	strb	r2, [r0, #28]
    b62c:	e591c044 	ldr	ip, [r1, #68]	@ 0x44
    b630:	e5912058 	ldr	r2, [r1, #88]	@ 0x58
    b634:	e580c010 	str	ip, [r0, #16]
    b638:	e5802024 	str	r2, [r0, #36]	@ 0x24
    b63c:	e591c04c 	ldr	ip, [r1, #76]	@ 0x4c
    b640:	e591205c 	ldr	r2, [r1, #92]	@ 0x5c
    b644:	e580c018 	str	ip, [r0, #24]
    b648:	e5802028 	str	r2, [r0, #40]	@ 0x28
    b64c:	e1d1c5b2 	ldrh	ip, [r1, #82]	@ 0x52
    b650:	e5d12060 	ldrb	r2, [r1, #96]	@ 0x60
    b654:	e5911054 	ldr	r1, [r1, #84]	@ 0x54
    b658:	e1c0c1be 	strh	ip, [r0, #30]
    b65c:	e5801020 	str	r1, [r0, #32]
    b660:	e5c0202c 	strb	r2, [r0, #44]	@ 0x2c
    b664:	e12fff1e 	bx	lr

0000b668 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    b668:	e5902028 	ldr	r2, [r0, #40]	@ 0x28
    b66c:	e5913004 	ldr	r3, [r1, #4]
    b670:	e1520003 	cmp	r2, r3
    b674:	0a000001 	beq	b680 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    b678:	e3a00000 	mov	r0, #0
    b67c:	e12fff1e 	bx	lr
    b680:	e92d4070 	push	{r4, r5, r6, lr}
    b684:	e1a05001 	mov	r5, r1
    b688:	e5903030 	ldr	r3, [r0, #48]	@ 0x30
    b68c:	e590102c 	ldr	r1, [r0, #44]	@ 0x2c
    b690:	e1a04000 	mov	r4, r0
    b694:	e1510003 	cmp	r1, r3
    b698:	0a000001 	beq	b6a4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x3c>
    b69c:	e3a00000 	mov	r0, #0
    b6a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b6a4:	e590008c 	ldr	r0, [r0, #140]	@ 0x8c
    b6a8:	e3500000 	cmp	r0, #0
    b6ac:	1a000024 	bne	b744 <CScreenDevice::SetStatus(TScreenStatus const&)+0xdc>
    b6b0:	e5d43060 	ldrb	r3, [r4, #96]	@ 0x60
    b6b4:	e3530000 	cmp	r3, #0
    b6b8:	1afffff7 	bne	b69c <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
    b6bc:	e5d5302c 	ldrb	r3, [r5, #44]	@ 0x2c
    b6c0:	e3530000 	cmp	r3, #0
    b6c4:	1afffff4 	bne	b69c <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
    b6c8:	e5951000 	ldr	r1, [r5]
    b6cc:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
    b6d0:	eb001589 	bl	10cfc <memcpy>
    b6d4:	e5951008 	ldr	r1, [r5, #8]
    b6d8:	e595200c 	ldr	r2, [r5, #12]
    b6dc:	e5d5301c 	ldrb	r3, [r5, #28]
    b6e0:	e584103c 	str	r1, [r4, #60]	@ 0x3c
    b6e4:	e5842040 	str	r2, [r4, #64]	@ 0x40
    b6e8:	e5951010 	ldr	r1, [r5, #16]
    b6ec:	e5952014 	ldr	r2, [r5, #20]
    b6f0:	e5842048 	str	r2, [r4, #72]	@ 0x48
    b6f4:	e5841044 	str	r1, [r4, #68]	@ 0x44
    b6f8:	e594208c 	ldr	r2, [r4, #140]	@ 0x8c
    b6fc:	e5951018 	ldr	r1, [r5, #24]
    b700:	e5c43050 	strb	r3, [r4, #80]	@ 0x50
    b704:	e3520000 	cmp	r2, #0
    b708:	e1d531be 	ldrh	r3, [r5, #30]
    b70c:	e1c435b2 	strh	r3, [r4, #82]	@ 0x52
    b710:	e1d532b0 	ldrh	r3, [r5, #32]
    b714:	e5952024 	ldr	r2, [r5, #36]	@ 0x24
    b718:	e584104c 	str	r1, [r4, #76]	@ 0x4c
    b71c:	e1d512b2 	ldrh	r1, [r5, #34]	@ 0x22
    b720:	e1c435b4 	strh	r3, [r4, #84]	@ 0x54
    b724:	e5953028 	ldr	r3, [r5, #40]	@ 0x28
    b728:	e584305c 	str	r3, [r4, #92]	@ 0x5c
    b72c:	e1c415b6 	strh	r1, [r4, #86]	@ 0x56
    b730:	e5842058 	str	r2, [r4, #88]	@ 0x58
    b734:	1a00000f 	bne	b778 <CScreenDevice::SetStatus(TScreenStatus const&)+0x110>
    b738:	f57ff05f 	dmb	sy
    b73c:	e3a00001 	mov	r0, #1
    b740:	e8bd8070 	pop	{r4, r5, r6, pc}
    b744:	eb001a69 	bl	120f0 <EnterCritical>
    b748:	e5d43060 	ldrb	r3, [r4, #96]	@ 0x60
    b74c:	e3530000 	cmp	r3, #0
    b750:	1a000003 	bne	b764 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b754:	e5d5302c 	ldrb	r3, [r5, #44]	@ 0x2c
    b758:	e3530000 	cmp	r3, #0
    b75c:	05942028 	ldreq	r2, [r4, #40]	@ 0x28
    b760:	0affffd8 	beq	b6c8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    b764:	e594308c 	ldr	r3, [r4, #140]	@ 0x8c
    b768:	e3530000 	cmp	r3, #0
    b76c:	0affffca 	beq	b69c <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
    b770:	eb001a89 	bl	1219c <LeaveCritical>
    b774:	eaffffc8 	b	b69c <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
    b778:	eb001a87 	bl	1219c <LeaveCritical>
    b77c:	eaffffed 	b	b738 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>

0000b780 <CScreenDevice::CarriageReturn()>:
    b780:	e3a03000 	mov	r3, #0
    b784:	e5803048 	str	r3, [r0, #72]	@ 0x48
    b788:	e12fff1e 	bx	lr

0000b78c <CScreenDevice::CursorHome()>:
    b78c:	e5903040 	ldr	r3, [r0, #64]	@ 0x40
    b790:	e3a02000 	mov	r2, #0
    b794:	e580304c 	str	r3, [r0, #76]	@ 0x4c
    b798:	e5802048 	str	r2, [r0, #72]	@ 0x48
    b79c:	e12fff1e 	bx	lr

0000b7a0 <CScreenDevice::CursorLeft()>:
    b7a0:	e5903048 	ldr	r3, [r0, #72]	@ 0x48
    b7a4:	e92d4070 	push	{r4, r5, r6, lr}
    b7a8:	e1a04000 	mov	r4, r0
    b7ac:	e3530000 	cmp	r3, #0
    b7b0:	1a00000f 	bne	b7f4 <CScreenDevice::CursorLeft()+0x54>
    b7b4:	e590204c 	ldr	r2, [r0, #76]	@ 0x4c
    b7b8:	e5903040 	ldr	r3, [r0, #64]	@ 0x40
    b7bc:	e1520003 	cmp	r2, r3
    b7c0:	98bd8070 	popls	{r4, r5, r6, pc}
    b7c4:	e5905030 	ldr	r5, [r0, #48]	@ 0x30
    b7c8:	e280601c 	add	r6, r0, #28
    b7cc:	e1a00006 	mov	r0, r6
    b7d0:	eb001e54 	bl	13128 <CCharGenerator::GetCharWidth() const>
    b7d4:	e0455000 	sub	r5, r5, r0
    b7d8:	e1a00006 	mov	r0, r6
    b7dc:	e5845048 	str	r5, [r4, #72]	@ 0x48
    b7e0:	eb001e52 	bl	13130 <CCharGenerator::GetCharHeight() const>
    b7e4:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    b7e8:	e0433000 	sub	r3, r3, r0
    b7ec:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    b7f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b7f4:	e280001c 	add	r0, r0, #28
    b7f8:	eb001e4a 	bl	13128 <CCharGenerator::GetCharWidth() const>
    b7fc:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
    b800:	e0433000 	sub	r3, r3, r0
    b804:	e5843048 	str	r3, [r4, #72]	@ 0x48
    b808:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b80c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b80c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b810:	e280701c 	add	r7, r0, #28
    b814:	e1a04002 	mov	r4, r2
    b818:	e1a05000 	mov	r5, r0
    b81c:	e1a00007 	mov	r0, r7
    b820:	e1a06001 	mov	r6, r1
    b824:	e2444001 	sub	r4, r4, #1
    b828:	eb001e3e 	bl	13128 <CCharGenerator::GetCharWidth() const>
    b82c:	e1a03000 	mov	r3, r0
    b830:	e1a00007 	mov	r0, r7
    b834:	e0040493 	mul	r4, r3, r4
    b838:	eb001e3c 	bl	13130 <CCharGenerator::GetCharHeight() const>
    b83c:	e5953030 	ldr	r3, [r5, #48]	@ 0x30
    b840:	e1530004 	cmp	r3, r4
    b844:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    b848:	e2466001 	sub	r6, r6, #1
    b84c:	e5953040 	ldr	r3, [r5, #64]	@ 0x40
    b850:	e0000690 	mul	r0, r0, r6
    b854:	e1530000 	cmp	r3, r0
    b858:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
    b85c:	e5953044 	ldr	r3, [r5, #68]	@ 0x44
    b860:	e1530000 	cmp	r3, r0
    b864:	85854048 	strhi	r4, [r5, #72]	@ 0x48
    b868:	8585004c 	strhi	r0, [r5, #76]	@ 0x4c
    b86c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b870 <CScreenDevice::CursorUp()>:
    b870:	e590204c 	ldr	r2, [r0, #76]	@ 0x4c
    b874:	e5903040 	ldr	r3, [r0, #64]	@ 0x40
    b878:	e1520003 	cmp	r2, r3
    b87c:	912fff1e 	bxls	lr
    b880:	e92d4010 	push	{r4, lr}
    b884:	e1a04000 	mov	r4, r0
    b888:	e280001c 	add	r0, r0, #28
    b88c:	eb001e27 	bl	13130 <CCharGenerator::GetCharHeight() const>
    b890:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    b894:	e0433000 	sub	r3, r3, r0
    b898:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    b89c:	e8bd8010 	pop	{r4, pc}

0000b8a0 <CScreenDevice::DeleteChars(unsigned int)>:
    b8a0:	e12fff1e 	bx	lr

0000b8a4 <CScreenDevice::DeleteLines(unsigned int)>:
    b8a4:	e12fff1e 	bx	lr

0000b8a8 <CScreenDevice::GetTextBackgroundColor()>:
    b8a8:	e5d03056 	ldrb	r3, [r0, #86]	@ 0x56
    b8ac:	e3530000 	cmp	r3, #0
    b8b0:	11d005b2 	ldrhne	r0, [r0, #82]	@ 0x52
    b8b4:	01d005b4 	ldrheq	r0, [r0, #84]	@ 0x54
    b8b8:	e12fff1e 	bx	lr

0000b8bc <CScreenDevice::GetTextColor()>:
    b8bc:	e5d03056 	ldrb	r3, [r0, #86]	@ 0x56
    b8c0:	e3530000 	cmp	r3, #0
    b8c4:	11d005b4 	ldrhne	r0, [r0, #84]	@ 0x54
    b8c8:	01d005b2 	ldrheq	r0, [r0, #82]	@ 0x52
    b8cc:	e12fff1e 	bx	lr

0000b8d0 <CScreenDevice::InsertLines(unsigned int)>:
    b8d0:	e12fff1e 	bx	lr

0000b8d4 <CScreenDevice::InsertMode(bool)>:
    b8d4:	e5c01057 	strb	r1, [r0, #87]	@ 0x57
    b8d8:	e12fff1e 	bx	lr

0000b8dc <CScreenDevice::ReverseScroll()>:
    b8dc:	e12fff1e 	bx	lr

0000b8e0 <CScreenDevice::SetCursorMode(bool)>:
    b8e0:	e5c01050 	strb	r1, [r0, #80]	@ 0x50
    b8e4:	e12fff1e 	bx	lr

0000b8e8 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    b8e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b8ec:	e280701c 	add	r7, r0, #28
    b8f0:	e1a05000 	mov	r5, r0
    b8f4:	e1a04001 	mov	r4, r1
    b8f8:	e1a00007 	mov	r0, r7
    b8fc:	e1a06002 	mov	r6, r2
    b900:	e2444001 	sub	r4, r4, #1
    b904:	eb001e09 	bl	13130 <CCharGenerator::GetCharHeight() const>
    b908:	e1a03000 	mov	r3, r0
    b90c:	e1a00007 	mov	r0, r7
    b910:	e0040493 	mul	r4, r3, r4
    b914:	eb001e05 	bl	13130 <CCharGenerator::GetCharHeight() const>
    b918:	e5953038 	ldr	r3, [r5, #56]	@ 0x38
    b91c:	e0020096 	mul	r2, r6, r0
    b920:	e1530002 	cmp	r3, r2
    b924:	21530004 	cmpcs	r3, r4
    b928:	83a03001 	movhi	r3, #1
    b92c:	93a03000 	movls	r3, #0
    b930:	e1540002 	cmp	r4, r2
    b934:	23a03000 	movcs	r3, #0
    b938:	32033001 	andcc	r3, r3, #1
    b93c:	e3530000 	cmp	r3, #0
    b940:	e3a03000 	mov	r3, #0
    b944:	15854040 	strne	r4, [r5, #64]	@ 0x40
    b948:	15852044 	strne	r2, [r5, #68]	@ 0x44
    b94c:	05954040 	ldreq	r4, [r5, #64]	@ 0x40
    b950:	e585404c 	str	r4, [r5, #76]	@ 0x4c
    b954:	e5853048 	str	r3, [r5, #72]	@ 0x48
    b958:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b95c <CScreenDevice::SetStandoutMode(unsigned int)>:
    b95c:	e351006b 	cmp	r1, #107	@ 0x6b
    b960:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    b964:	ea00006d 	b	bb20 <CScreenDevice::SetStandoutMode(unsigned int)+0x1c4>
    b968:	0000bb40 	.word	0x0000bb40
    b96c:	0000bb24 	.word	0x0000bb24
    b970:	0000bb34 	.word	0x0000bb34
    b974:	0000bb20 	.word	0x0000bb20
    b978:	0000bb20 	.word	0x0000bb20
    b97c:	0000bb20 	.word	0x0000bb20
    b980:	0000bb20 	.word	0x0000bb20
    b984:	0000bccc 	.word	0x0000bccc
    b988:	0000bb20 	.word	0x0000bb20
    b98c:	0000bb20 	.word	0x0000bb20
    b990:	0000bb20 	.word	0x0000bb20
    b994:	0000bb20 	.word	0x0000bb20
    b998:	0000bb20 	.word	0x0000bb20
    b99c:	0000bb20 	.word	0x0000bb20
    b9a0:	0000bb20 	.word	0x0000bb20
    b9a4:	0000bb20 	.word	0x0000bb20
    b9a8:	0000bb20 	.word	0x0000bb20
    b9ac:	0000bb20 	.word	0x0000bb20
    b9b0:	0000bb20 	.word	0x0000bb20
    b9b4:	0000bb20 	.word	0x0000bb20
    b9b8:	0000bb20 	.word	0x0000bb20
    b9bc:	0000bb20 	.word	0x0000bb20
    b9c0:	0000bb20 	.word	0x0000bb20
    b9c4:	0000bb20 	.word	0x0000bb20
    b9c8:	0000bb20 	.word	0x0000bb20
    b9cc:	0000bb20 	.word	0x0000bb20
    b9d0:	0000bb20 	.word	0x0000bb20
    b9d4:	0000bb40 	.word	0x0000bb40
    b9d8:	0000bb20 	.word	0x0000bb20
    b9dc:	0000bb20 	.word	0x0000bb20
    b9e0:	0000bc20 	.word	0x0000bc20
    b9e4:	0000bc14 	.word	0x0000bc14
    b9e8:	0000bc08 	.word	0x0000bc08
    b9ec:	0000bbf8 	.word	0x0000bbf8
    b9f0:	0000bb34 	.word	0x0000bb34
    b9f4:	0000bbe8 	.word	0x0000bbe8
    b9f8:	0000bbdc 	.word	0x0000bbdc
    b9fc:	0000bbcc 	.word	0x0000bbcc
    ba00:	0000bb20 	.word	0x0000bb20
    ba04:	0000bb20 	.word	0x0000bb20
    ba08:	0000bbc0 	.word	0x0000bbc0
    ba0c:	0000bbb4 	.word	0x0000bbb4
    ba10:	0000bba8 	.word	0x0000bba8
    ba14:	0000bb98 	.word	0x0000bb98
    ba18:	0000bb8c 	.word	0x0000bb8c
    ba1c:	0000bb7c 	.word	0x0000bb7c
    ba20:	0000bb70 	.word	0x0000bb70
    ba24:	0000bb60 	.word	0x0000bb60
    ba28:	0000bb20 	.word	0x0000bb20
    ba2c:	0000bb20 	.word	0x0000bb20
    ba30:	0000bb20 	.word	0x0000bb20
    ba34:	0000bb20 	.word	0x0000bb20
    ba38:	0000bb20 	.word	0x0000bb20
    ba3c:	0000bb20 	.word	0x0000bb20
    ba40:	0000bb20 	.word	0x0000bb20
    ba44:	0000bb20 	.word	0x0000bb20
    ba48:	0000bb20 	.word	0x0000bb20
    ba4c:	0000bb20 	.word	0x0000bb20
    ba50:	0000bb20 	.word	0x0000bb20
    ba54:	0000bb20 	.word	0x0000bb20
    ba58:	0000bb20 	.word	0x0000bb20
    ba5c:	0000bb20 	.word	0x0000bb20
    ba60:	0000bb20 	.word	0x0000bb20
    ba64:	0000bb20 	.word	0x0000bb20
    ba68:	0000bb20 	.word	0x0000bb20
    ba6c:	0000bb20 	.word	0x0000bb20
    ba70:	0000bb20 	.word	0x0000bb20
    ba74:	0000bb20 	.word	0x0000bb20
    ba78:	0000bb20 	.word	0x0000bb20
    ba7c:	0000bb20 	.word	0x0000bb20
    ba80:	0000bb20 	.word	0x0000bb20
    ba84:	0000bb20 	.word	0x0000bb20
    ba88:	0000bb20 	.word	0x0000bb20
    ba8c:	0000bb20 	.word	0x0000bb20
    ba90:	0000bb20 	.word	0x0000bb20
    ba94:	0000bb20 	.word	0x0000bb20
    ba98:	0000bb20 	.word	0x0000bb20
    ba9c:	0000bb20 	.word	0x0000bb20
    baa0:	0000bb20 	.word	0x0000bb20
    baa4:	0000bb20 	.word	0x0000bb20
    baa8:	0000bb20 	.word	0x0000bb20
    baac:	0000bb20 	.word	0x0000bb20
    bab0:	0000bb20 	.word	0x0000bb20
    bab4:	0000bb20 	.word	0x0000bb20
    bab8:	0000bb20 	.word	0x0000bb20
    babc:	0000bb20 	.word	0x0000bb20
    bac0:	0000bb20 	.word	0x0000bb20
    bac4:	0000bb20 	.word	0x0000bb20
    bac8:	0000bb20 	.word	0x0000bb20
    bacc:	0000bb20 	.word	0x0000bb20
    bad0:	0000bcc0 	.word	0x0000bcc0
    bad4:	0000bb24 	.word	0x0000bb24
    bad8:	0000bb54 	.word	0x0000bb54
    badc:	0000bc84 	.word	0x0000bc84
    bae0:	0000bc78 	.word	0x0000bc78
    bae4:	0000bc6c 	.word	0x0000bc6c
    bae8:	0000bc60 	.word	0x0000bc60
    baec:	0000bc54 	.word	0x0000bc54
    baf0:	0000bb20 	.word	0x0000bb20
    baf4:	0000bb20 	.word	0x0000bb20
    baf8:	0000bc48 	.word	0x0000bc48
    bafc:	0000bc38 	.word	0x0000bc38
    bb00:	0000bc2c 	.word	0x0000bc2c
    bb04:	0000bca8 	.word	0x0000bca8
    bb08:	0000bc9c 	.word	0x0000bc9c
    bb0c:	0000bc90 	.word	0x0000bc90
    bb10:	0000bcb4 	.word	0x0000bcb4
    bb14:	0000bb18 	.word	0x0000bb18
    bb18:	e3e03020 	mvn	r3, #32
    bb1c:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bb20:	e12fff1e 	bx	lr
    bb24:	e30f3a8a 	movw	r3, #64138	@ 0xfa8a
    bb28:	e34f3fff 	movt	r3, #65535	@ 0xffff
    bb2c:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bb30:	e12fff1e 	bx	lr
    bb34:	e3a03015 	mov	r3, #21
    bb38:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bb3c:	e12fff1e 	bx	lr
    bb40:	e3a02000 	mov	r2, #0
    bb44:	e3e03020 	mvn	r3, #32
    bb48:	e5c02056 	strb	r2, [r0, #86]	@ 0x56
    bb4c:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bb50:	e12fff1e 	bx	lr
    bb54:	e30537ca 	movw	r3, #22474	@ 0x57ca
    bb58:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bb5c:	e12fff1e 	bx	lr
    bb60:	e30a3d55 	movw	r3, #44373	@ 0xad55
    bb64:	e34f3fff 	movt	r3, #65535	@ 0xffff
    bb68:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bb6c:	e12fff1e 	bx	lr
    bb70:	e3003555 	movw	r3, #1365	@ 0x555
    bb74:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bb78:	e12fff1e 	bx	lr
    bb7c:	e30a3815 	movw	r3, #43029	@ 0xa815
    bb80:	e34f3fff 	movt	r3, #65535	@ 0xffff
    bb84:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bb88:	e12fff1e 	bx	lr
    bb8c:	e3a03015 	mov	r3, #21
    bb90:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bb94:	e12fff1e 	bx	lr
    bb98:	e30a3a80 	movw	r3, #43648	@ 0xaa80
    bb9c:	e34f3fff 	movt	r3, #65535	@ 0xffff
    bba0:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bba4:	e12fff1e 	bx	lr
    bba8:	e3a03d15 	mov	r3, #1344	@ 0x540
    bbac:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bbb0:	e12fff1e 	bx	lr
    bbb4:	e3a03b2a 	mov	r3, #43008	@ 0xa800
    bbb8:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bbbc:	e12fff1e 	bx	lr
    bbc0:	e3a03000 	mov	r3, #0
    bbc4:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bbc8:	e12fff1e 	bx	lr
    bbcc:	e30a3d55 	movw	r3, #44373	@ 0xad55
    bbd0:	e34f3fff 	movt	r3, #65535	@ 0xffff
    bbd4:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bbd8:	e12fff1e 	bx	lr
    bbdc:	e3003555 	movw	r3, #1365	@ 0x555
    bbe0:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bbe4:	e12fff1e 	bx	lr
    bbe8:	e30a3815 	movw	r3, #43029	@ 0xa815
    bbec:	e34f3fff 	movt	r3, #65535	@ 0xffff
    bbf0:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bbf4:	e12fff1e 	bx	lr
    bbf8:	e30a3a80 	movw	r3, #43648	@ 0xaa80
    bbfc:	e34f3fff 	movt	r3, #65535	@ 0xffff
    bc00:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bc04:	e12fff1e 	bx	lr
    bc08:	e3a03d15 	mov	r3, #1344	@ 0x540
    bc0c:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bc10:	e12fff1e 	bx	lr
    bc14:	e3a03b2a 	mov	r3, #43008	@ 0xa800
    bc18:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bc1c:	e12fff1e 	bx	lr
    bc20:	e3a03000 	mov	r3, #0
    bc24:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bc28:	e12fff1e 	bx	lr
    bc2c:	e30537ca 	movw	r3, #22474	@ 0x57ca
    bc30:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bc34:	e12fff1e 	bx	lr
    bc38:	e30f3a8a 	movw	r3, #64138	@ 0xfa8a
    bc3c:	e34f3fff 	movt	r3, #65535	@ 0xffff
    bc40:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bc44:	e12fff1e 	bx	lr
    bc48:	e305328a 	movw	r3, #21130	@ 0x528a
    bc4c:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bc50:	e12fff1e 	bx	lr
    bc54:	e3e03020 	mvn	r3, #32
    bc58:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bc5c:	e12fff1e 	bx	lr
    bc60:	e30537df 	movw	r3, #22495	@ 0x57df
    bc64:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bc68:	e12fff1e 	bx	lr
    bc6c:	e3e03e56 	mvn	r3, #1376	@ 0x560
    bc70:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bc74:	e12fff1e 	bx	lr
    bc78:	e305329f 	movw	r3, #21151	@ 0x529f
    bc7c:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bc80:	e12fff1e 	bx	lr
    bc84:	e3e03035 	mvn	r3, #53	@ 0x35
    bc88:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bc8c:	e12fff1e 	bx	lr
    bc90:	e3e03e56 	mvn	r3, #1376	@ 0x560
    bc94:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bc98:	e12fff1e 	bx	lr
    bc9c:	e305329f 	movw	r3, #21151	@ 0x529f
    bca0:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bca4:	e12fff1e 	bx	lr
    bca8:	e3e03035 	mvn	r3, #53	@ 0x35
    bcac:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bcb0:	e12fff1e 	bx	lr
    bcb4:	e30537df 	movw	r3, #22495	@ 0x57df
    bcb8:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
    bcbc:	e12fff1e 	bx	lr
    bcc0:	e305328a 	movw	r3, #21130	@ 0x528a
    bcc4:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
    bcc8:	e12fff1e 	bx	lr
    bccc:	e3a03001 	mov	r3, #1
    bcd0:	e5c03056 	strb	r3, [r0, #86]	@ 0x56
    bcd4:	e12fff1e 	bx	lr

0000bcd8 <CScreenDevice::Scroll()>:
    bcd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bcdc:	e1a06000 	mov	r6, r0
    bce0:	e280001c 	add	r0, r0, #28
    bce4:	e24dd008 	sub	sp, sp, #8
    bce8:	eb001d10 	bl	13130 <CCharGenerator::GetCharHeight() const>
    bcec:	e5961040 	ldr	r1, [r6, #64]	@ 0x40
    bcf0:	e596302c 	ldr	r3, [r6, #44]	@ 0x2c
    bcf4:	e1a04000 	mov	r4, r0
    bcf8:	e5967044 	ldr	r7, [r6, #68]	@ 0x44
    bcfc:	e5962024 	ldr	r2, [r6, #36]	@ 0x24
    bd00:	e0477001 	sub	r7, r7, r1
    bd04:	e0477000 	sub	r7, r7, r0
    bd08:	e1a00083 	lsl	r0, r3, #1
    bd0c:	e0050193 	mul	r5, r3, r1
    bd10:	e0070790 	mul	r7, r0, r7
    bd14:	e0825085 	add	r5, r2, r5, lsl #1
    bd18:	e3570000 	cmp	r7, #0
    bd1c:	1a00002a 	bne	bdcc <CScreenDevice::Scroll()+0xf4>
    bd20:	e0020493 	mul	r2, r3, r4
    bd24:	e7fd20d2 	ubfx	r2, r2, #1, #30
    bd28:	e2420001 	sub	r0, r2, #1
    bd2c:	e3520000 	cmp	r2, #0
    bd30:	0a000023 	beq	bdc4 <CScreenDevice::Scroll()+0xec>
    bd34:	e1d6c5b4 	ldrh	ip, [r6, #84]	@ 0x54
    bd38:	e7e03155 	ubfx	r3, r5, #2, #1
    bd3c:	e3500005 	cmp	r0, #5
    bd40:	9a000010 	bls	bd88 <CScreenDevice::Scroll()+0xb0>
    bd44:	e3530000 	cmp	r3, #0
    bd48:	e1a0e005 	mov	lr, r5
    bd4c:	12420002 	subne	r0, r2, #2
    bd50:	e0422003 	sub	r2, r2, r3
    bd54:	eea0cb90 	vdup.32	q8, ip
    bd58:	e0853103 	add	r3, r5, r3, lsl #2
    bd5c:	e1a01122 	lsr	r1, r2, #2
    bd60:	148ec004 	strne	ip, [lr], #4
    bd64:	e0831201 	add	r1, r3, r1, lsl #4
    bd68:	f4430add 	vst1.64	{d16-d17}, [r3 :64]!
    bd6c:	e1510003 	cmp	r1, r3
    bd70:	1afffffc 	bne	bd68 <CScreenDevice::Scroll()+0x90>
    bd74:	e3120003 	tst	r2, #3
    bd78:	0a000011 	beq	bdc4 <CScreenDevice::Scroll()+0xec>
    bd7c:	e3c22003 	bic	r2, r2, #3
    bd80:	e0400002 	sub	r0, r0, r2
    bd84:	e08e5102 	add	r5, lr, r2, lsl #2
    bd88:	e3500000 	cmp	r0, #0
    bd8c:	e585c000 	str	ip, [r5]
    bd90:	0a00000b 	beq	bdc4 <CScreenDevice::Scroll()+0xec>
    bd94:	e3500001 	cmp	r0, #1
    bd98:	e585c004 	str	ip, [r5, #4]
    bd9c:	0a000008 	beq	bdc4 <CScreenDevice::Scroll()+0xec>
    bda0:	e3500002 	cmp	r0, #2
    bda4:	e585c008 	str	ip, [r5, #8]
    bda8:	0a000005 	beq	bdc4 <CScreenDevice::Scroll()+0xec>
    bdac:	e3500003 	cmp	r0, #3
    bdb0:	e585c00c 	str	ip, [r5, #12]
    bdb4:	0a000002 	beq	bdc4 <CScreenDevice::Scroll()+0xec>
    bdb8:	e3500004 	cmp	r0, #4
    bdbc:	e585c010 	str	ip, [r5, #16]
    bdc0:	1585c014 	strne	ip, [r5, #20]
    bdc4:	e28dd008 	add	sp, sp, #8
    bdc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bdcc:	e0811004 	add	r1, r1, r4
    bdd0:	e2868064 	add	r8, r6, #100	@ 0x64
    bdd4:	e3a03000 	mov	r3, #0
    bdd8:	e58d3004 	str	r3, [sp, #4]
    bddc:	e3a03002 	mov	r3, #2
    bde0:	e58d3000 	str	r3, [sp]
    bde4:	e0222190 	mla	r2, r0, r1, r2
    bde8:	e1a03007 	mov	r3, r7
    bdec:	e1a01005 	mov	r1, r5
    bdf0:	e1a00008 	mov	r0, r8
    bdf4:	eb001e42 	bl	13704 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
    bdf8:	e1a00008 	mov	r0, r8
    bdfc:	eb002022 	bl	13e8c <CDMAChannel::Start()>
    be00:	e3c77003 	bic	r7, r7, #3
    be04:	e1a00008 	mov	r0, r8
    be08:	e0855007 	add	r5, r5, r7
    be0c:	eb002074 	bl	13fe4 <CDMAChannel::Wait()>
    be10:	e596302c 	ldr	r3, [r6, #44]	@ 0x2c
    be14:	eaffffc1 	b	bd20 <CScreenDevice::Scroll()+0x48>

0000be18 <CScreenDevice::CursorDown()>:
    be18:	e92d4070 	push	{r4, r5, r6, lr}
    be1c:	e1a04000 	mov	r4, r0
    be20:	e280501c 	add	r5, r0, #28
    be24:	e1a00005 	mov	r0, r5
    be28:	eb001cc0 	bl	13130 <CCharGenerator::GetCharHeight() const>
    be2c:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
    be30:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
    be34:	e0800002 	add	r0, r0, r2
    be38:	e584004c 	str	r0, [r4, #76]	@ 0x4c
    be3c:	e1500003 	cmp	r0, r3
    be40:	38bd8070 	popcc	{r4, r5, r6, pc}
    be44:	e1a00004 	mov	r0, r4
    be48:	ebffffa2 	bl	bcd8 <CScreenDevice::Scroll()>
    be4c:	e1a00005 	mov	r0, r5
    be50:	eb001cb6 	bl	13130 <CCharGenerator::GetCharHeight() const>
    be54:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    be58:	e0433000 	sub	r3, r3, r0
    be5c:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    be60:	e8bd8070 	pop	{r4, r5, r6, pc}

0000be64 <CScreenDevice::NewLine()>:
    be64:	e92d4070 	push	{r4, r5, r6, lr}
    be68:	e1a04000 	mov	r4, r0
    be6c:	e280501c 	add	r5, r0, #28
    be70:	e3a03000 	mov	r3, #0
    be74:	e1a00005 	mov	r0, r5
    be78:	e5843048 	str	r3, [r4, #72]	@ 0x48
    be7c:	eb001cab 	bl	13130 <CCharGenerator::GetCharHeight() const>
    be80:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
    be84:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
    be88:	e0800002 	add	r0, r0, r2
    be8c:	e584004c 	str	r0, [r4, #76]	@ 0x4c
    be90:	e1500003 	cmp	r0, r3
    be94:	38bd8070 	popcc	{r4, r5, r6, pc}
    be98:	e1a00004 	mov	r0, r4
    be9c:	ebffff8d 	bl	bcd8 <CScreenDevice::Scroll()>
    bea0:	e1a00005 	mov	r0, r5
    bea4:	eb001ca1 	bl	13130 <CCharGenerator::GetCharHeight() const>
    bea8:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    beac:	e0433000 	sub	r3, r3, r0
    beb0:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    beb4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000beb8 <CScreenDevice::CursorRight()>:
    beb8:	e92d4070 	push	{r4, r5, r6, lr}
    bebc:	e1a04000 	mov	r4, r0
    bec0:	e280501c 	add	r5, r0, #28
    bec4:	e1a00005 	mov	r0, r5
    bec8:	eb001c96 	bl	13128 <CCharGenerator::GetCharWidth() const>
    becc:	e5942048 	ldr	r2, [r4, #72]	@ 0x48
    bed0:	e5943030 	ldr	r3, [r4, #48]	@ 0x30
    bed4:	e0800002 	add	r0, r0, r2
    bed8:	e5840048 	str	r0, [r4, #72]	@ 0x48
    bedc:	e1500003 	cmp	r0, r3
    bee0:	38bd8070 	popcc	{r4, r5, r6, pc}
    bee4:	e3a03000 	mov	r3, #0
    bee8:	e1a00005 	mov	r0, r5
    beec:	e5843048 	str	r3, [r4, #72]	@ 0x48
    bef0:	eb001c8e 	bl	13130 <CCharGenerator::GetCharHeight() const>
    bef4:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
    bef8:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
    befc:	e0800002 	add	r0, r0, r2
    bf00:	e584004c 	str	r0, [r4, #76]	@ 0x4c
    bf04:	e1500003 	cmp	r0, r3
    bf08:	38bd8070 	popcc	{r4, r5, r6, pc}
    bf0c:	e1a00004 	mov	r0, r4
    bf10:	ebffff70 	bl	bcd8 <CScreenDevice::Scroll()>
    bf14:	e1a00005 	mov	r0, r5
    bf18:	eb001c84 	bl	13130 <CCharGenerator::GetCharHeight() const>
    bf1c:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    bf20:	e0433000 	sub	r3, r3, r0
    bf24:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    bf28:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bf2c <CScreenDevice::Tabulator()>:
    bf2c:	e92d4070 	push	{r4, r5, r6, lr}
    bf30:	e1a04000 	mov	r4, r0
    bf34:	e280501c 	add	r5, r0, #28
    bf38:	e1a00005 	mov	r0, r5
    bf3c:	eb001c79 	bl	13128 <CCharGenerator::GetCharWidth() const>
    bf40:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
    bf44:	e1a00180 	lsl	r0, r0, #3
    bf48:	e5942030 	ldr	r2, [r4, #48]	@ 0x30
    bf4c:	e0803003 	add	r3, r0, r3
    bf50:	e733f013 	udiv	r3, r3, r0
    bf54:	e0030390 	mul	r3, r0, r3
    bf58:	e5843048 	str	r3, [r4, #72]	@ 0x48
    bf5c:	e1530002 	cmp	r3, r2
    bf60:	38bd8070 	popcc	{r4, r5, r6, pc}
    bf64:	e3a03000 	mov	r3, #0
    bf68:	e1a00005 	mov	r0, r5
    bf6c:	e5843048 	str	r3, [r4, #72]	@ 0x48
    bf70:	eb001c6e 	bl	13130 <CCharGenerator::GetCharHeight() const>
    bf74:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
    bf78:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
    bf7c:	e0800002 	add	r0, r0, r2
    bf80:	e584004c 	str	r0, [r4, #76]	@ 0x4c
    bf84:	e1500003 	cmp	r0, r3
    bf88:	38bd8070 	popcc	{r4, r5, r6, pc}
    bf8c:	e1a00004 	mov	r0, r4
    bf90:	ebffff50 	bl	bcd8 <CScreenDevice::Scroll()>
    bf94:	e1a00005 	mov	r0, r5
    bf98:	eb001c64 	bl	13130 <CCharGenerator::GetCharHeight() const>
    bf9c:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    bfa0:	e0433000 	sub	r3, r3, r0
    bfa4:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    bfa8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bfac <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    bfac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bfb0:	e280701c 	add	r7, r0, #28
    bfb4:	e1a06000 	mov	r6, r0
    bfb8:	e24dd00c 	sub	sp, sp, #12
    bfbc:	e3a08000 	mov	r8, #0
    bfc0:	e1a00007 	mov	r0, r7
    bfc4:	e1a09001 	mov	r9, r1
    bfc8:	e1a0a003 	mov	sl, r3
    bfcc:	e1ddb3b0 	ldrh	fp, [sp, #48]	@ 0x30
    bfd0:	e58d2004 	str	r2, [sp, #4]
    bfd4:	eb001c55 	bl	13130 <CCharGenerator::GetCharHeight() const>
    bfd8:	e1500008 	cmp	r0, r8
    bfdc:	9a000025 	bls	c078 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
    bfe0:	e59d5004 	ldr	r5, [sp, #4]
    bfe4:	e3a04000 	mov	r4, #0
    bfe8:	ea000013 	b	c03c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x90>
    bfec:	eb001c53 	bl	13140 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bff0:	e1a0200b 	mov	r2, fp
    bff4:	e3500000 	cmp	r0, #0
    bff8:	1a000003 	bne	c00c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x60>
    bffc:	e5d63056 	ldrb	r3, [r6, #86]	@ 0x56
    c000:	e3530000 	cmp	r3, #0
    c004:	11d625b2 	ldrhne	r2, [r6, #82]	@ 0x52
    c008:	01d625b4 	ldrheq	r2, [r6, #84]	@ 0x54
    c00c:	e5963030 	ldr	r3, [r6, #48]	@ 0x30
    c010:	e2844001 	add	r4, r4, #1
    c014:	e1550003 	cmp	r5, r3
    c018:	2a000006 	bcs	c038 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x8c>
    c01c:	e5963034 	ldr	r3, [r6, #52]	@ 0x34
    c020:	e153000a 	cmp	r3, sl
    c024:	8596302c 	ldrhi	r3, [r6, #44]	@ 0x2c
    c028:	85961024 	ldrhi	r1, [r6, #36]	@ 0x24
    c02c:	80235a93 	mlahi	r3, r3, sl, r5
    c030:	81a03083 	lslhi	r3, r3, #1
    c034:	818120b3 	strhhi	r2, [r1, r3]
    c038:	e2855001 	add	r5, r5, #1
    c03c:	e1a00007 	mov	r0, r7
    c040:	eb001c38 	bl	13128 <CCharGenerator::GetCharWidth() const>
    c044:	e1a0c000 	mov	ip, r0
    c048:	e1a03008 	mov	r3, r8
    c04c:	e1a02004 	mov	r2, r4
    c050:	e1a01009 	mov	r1, r9
    c054:	e1a00007 	mov	r0, r7
    c058:	e15c0004 	cmp	ip, r4
    c05c:	8affffe2 	bhi	bfec <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x40>
    c060:	e2888001 	add	r8, r8, #1
    c064:	e1a00007 	mov	r0, r7
    c068:	eb001c30 	bl	13130 <CCharGenerator::GetCharHeight() const>
    c06c:	e28aa001 	add	sl, sl, #1
    c070:	e1500008 	cmp	r0, r8
    c074:	8affffd9 	bhi	bfe0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    c078:	e28dd00c 	add	sp, sp, #12
    c07c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c080 <CScreenDevice::DisplayChar(char)>:
    c080:	e6ef3071 	uxtb	r3, r1
    c084:	e353001f 	cmp	r3, #31
    c088:	912fff1e 	bxls	lr
    c08c:	e92d4030 	push	{r4, r5, lr}
    c090:	e1a04000 	mov	r4, r0
    c094:	e5d00056 	ldrb	r0, [r0, #86]	@ 0x56
    c098:	e24dd00c 	sub	sp, sp, #12
    c09c:	e284501c 	add	r5, r4, #28
    c0a0:	e3500000 	cmp	r0, #0
    c0a4:	e5942048 	ldr	r2, [r4, #72]	@ 0x48
    c0a8:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    c0ac:	11d405b4 	ldrhne	r0, [r4, #84]	@ 0x54
    c0b0:	01d405b2 	ldrheq	r0, [r4, #82]	@ 0x52
    c0b4:	e58d0000 	str	r0, [sp]
    c0b8:	e1a00004 	mov	r0, r4
    c0bc:	ebffffba 	bl	bfac <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c0c0:	e1a00005 	mov	r0, r5
    c0c4:	eb001c17 	bl	13128 <CCharGenerator::GetCharWidth() const>
    c0c8:	e5942048 	ldr	r2, [r4, #72]	@ 0x48
    c0cc:	e5943030 	ldr	r3, [r4, #48]	@ 0x30
    c0d0:	e0800002 	add	r0, r0, r2
    c0d4:	e5840048 	str	r0, [r4, #72]	@ 0x48
    c0d8:	e1500003 	cmp	r0, r3
    c0dc:	2a000001 	bcs	c0e8 <CScreenDevice::DisplayChar(char)+0x68>
    c0e0:	e28dd00c 	add	sp, sp, #12
    c0e4:	e8bd8030 	pop	{r4, r5, pc}
    c0e8:	e3a03000 	mov	r3, #0
    c0ec:	e1a00005 	mov	r0, r5
    c0f0:	e5843048 	str	r3, [r4, #72]	@ 0x48
    c0f4:	eb001c0d 	bl	13130 <CCharGenerator::GetCharHeight() const>
    c0f8:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
    c0fc:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
    c100:	e0800002 	add	r0, r0, r2
    c104:	e584004c 	str	r0, [r4, #76]	@ 0x4c
    c108:	e1500003 	cmp	r0, r3
    c10c:	3afffff3 	bcc	c0e0 <CScreenDevice::DisplayChar(char)+0x60>
    c110:	e1a00004 	mov	r0, r4
    c114:	ebfffeef 	bl	bcd8 <CScreenDevice::Scroll()>
    c118:	e1a00005 	mov	r0, r5
    c11c:	eb001c03 	bl	13130 <CCharGenerator::GetCharHeight() const>
    c120:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    c124:	e0433000 	sub	r3, r3, r0
    c128:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    c12c:	eaffffeb 	b	c0e0 <CScreenDevice::DisplayChar(char)+0x60>

0000c130 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    c130:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c134:	e1a06000 	mov	r6, r0
    c138:	e1a0a001 	mov	sl, r1
    c13c:	e1a08002 	mov	r8, r2
    c140:	e3a09000 	mov	r9, #0
    c144:	e280701c 	add	r7, r0, #28
    c148:	e1a00007 	mov	r0, r7
    c14c:	eb001bf7 	bl	13130 <CCharGenerator::GetCharHeight() const>
    c150:	e1500009 	cmp	r0, r9
    c154:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    c158:	e1a0400a 	mov	r4, sl
    c15c:	e3a05000 	mov	r5, #0
    c160:	ea00000d 	b	c19c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x6c>
    c164:	e5963030 	ldr	r3, [r6, #48]	@ 0x30
    c168:	e2855001 	add	r5, r5, #1
    c16c:	e1540003 	cmp	r4, r3
    c170:	2a000008 	bcs	c198 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    c174:	e5963034 	ldr	r3, [r6, #52]	@ 0x34
    c178:	e1530008 	cmp	r3, r8
    c17c:	9a000005 	bls	c198 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    c180:	e596302c 	ldr	r3, [r6, #44]	@ 0x2c
    c184:	e5962024 	ldr	r2, [r6, #36]	@ 0x24
    c188:	e1d615b4 	ldrh	r1, [r6, #84]	@ 0x54
    c18c:	e0234893 	mla	r3, r3, r8, r4
    c190:	e1a03083 	lsl	r3, r3, #1
    c194:	e18210b3 	strh	r1, [r2, r3]
    c198:	e2844001 	add	r4, r4, #1
    c19c:	e1a00007 	mov	r0, r7
    c1a0:	eb001be0 	bl	13128 <CCharGenerator::GetCharWidth() const>
    c1a4:	e1500005 	cmp	r0, r5
    c1a8:	8affffed 	bhi	c164 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c1ac:	e2899001 	add	r9, r9, #1
    c1b0:	e2888001 	add	r8, r8, #1
    c1b4:	eaffffe3 	b	c148 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000c1b8 <CScreenDevice::ClearLineEnd()>:
    c1b8:	e5903030 	ldr	r3, [r0, #48]	@ 0x30
    c1bc:	e92d4070 	push	{r4, r5, r6, lr}
    c1c0:	e5904048 	ldr	r4, [r0, #72]	@ 0x48
    c1c4:	e1540003 	cmp	r4, r3
    c1c8:	28bd8070 	popcs	{r4, r5, r6, pc}
    c1cc:	e1a05000 	mov	r5, r0
    c1d0:	e280601c 	add	r6, r0, #28
    c1d4:	e1a01004 	mov	r1, r4
    c1d8:	e595204c 	ldr	r2, [r5, #76]	@ 0x4c
    c1dc:	e1a00005 	mov	r0, r5
    c1e0:	ebffffd2 	bl	c130 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c1e4:	e1a00006 	mov	r0, r6
    c1e8:	eb001bce 	bl	13128 <CCharGenerator::GetCharWidth() const>
    c1ec:	e5953030 	ldr	r3, [r5, #48]	@ 0x30
    c1f0:	e0844000 	add	r4, r4, r0
    c1f4:	e1530004 	cmp	r3, r4
    c1f8:	8afffff5 	bhi	c1d4 <CScreenDevice::ClearLineEnd()+0x1c>
    c1fc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c200 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
    c200:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c204:	e1a05000 	mov	r5, r0
    c208:	e1a04001 	mov	r4, r1
    c20c:	e280701c 	add	r7, r0, #28
    c210:	e5956048 	ldr	r6, [r5, #72]	@ 0x48
    c214:	e1a00007 	mov	r0, r7
    c218:	eb001bc2 	bl	13128 <CCharGenerator::GetCharWidth() const>
    c21c:	e5953030 	ldr	r3, [r5, #48]	@ 0x30
    c220:	e0266094 	mla	r6, r4, r0, r6
    c224:	e5954048 	ldr	r4, [r5, #72]	@ 0x48
    c228:	e1560003 	cmp	r6, r3
    c22c:	21a06003 	movcs	r6, r3
    c230:	e1560004 	cmp	r6, r4
    c234:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    c238:	e1a01004 	mov	r1, r4
    c23c:	e595204c 	ldr	r2, [r5, #76]	@ 0x4c
    c240:	e1a00005 	mov	r0, r5
    c244:	ebffffb9 	bl	c130 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c248:	e1a00007 	mov	r0, r7
    c24c:	eb001bb5 	bl	13128 <CCharGenerator::GetCharWidth() const>
    c250:	e0844000 	add	r4, r4, r0
    c254:	e1560004 	cmp	r6, r4
    c258:	8afffff6 	bhi	c238 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x38>
    c25c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c260 <CScreenDevice::EraseChars(unsigned int)>:
    c260:	e3510000 	cmp	r1, #0
    c264:	012fff1e 	bxeq	lr
    c268:	eaffffe4 	b	c200 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>

0000c26c <CScreenDevice::ClearDisplayEnd()>:
    c26c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c270:	e1a04000 	mov	r4, r0
    c274:	e5905048 	ldr	r5, [r0, #72]	@ 0x48
    c278:	e5903030 	ldr	r3, [r0, #48]	@ 0x30
    c27c:	e280601c 	add	r6, r0, #28
    c280:	e1550003 	cmp	r5, r3
    c284:	2a000009 	bcs	c2b0 <CScreenDevice::ClearDisplayEnd()+0x44>
    c288:	e1a01005 	mov	r1, r5
    c28c:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
    c290:	e1a00004 	mov	r0, r4
    c294:	ebffffa5 	bl	c130 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c298:	e1a00006 	mov	r0, r6
    c29c:	eb001ba1 	bl	13128 <CCharGenerator::GetCharWidth() const>
    c2a0:	e5943030 	ldr	r3, [r4, #48]	@ 0x30
    c2a4:	e0855000 	add	r5, r5, r0
    c2a8:	e1550003 	cmp	r5, r3
    c2ac:	3afffff5 	bcc	c288 <CScreenDevice::ClearDisplayEnd()+0x1c>
    c2b0:	e594504c 	ldr	r5, [r4, #76]	@ 0x4c
    c2b4:	e1a00006 	mov	r0, r6
    c2b8:	eb001b9c 	bl	13130 <CCharGenerator::GetCharHeight() const>
    c2bc:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
    c2c0:	e0850000 	add	r0, r5, r0
    c2c4:	e594c028 	ldr	ip, [r4, #40]	@ 0x28
    c2c8:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
    c2cc:	e0000093 	mul	r0, r3, r0
    c2d0:	e1a0c0ac 	lsr	ip, ip, #1
    c2d4:	e04ce000 	sub	lr, ip, r0
    c2d8:	e35e0000 	cmp	lr, #0
    c2dc:	e1a06080 	lsl	r6, r0, #1
    c2e0:	e0812006 	add	r2, r1, r6
    c2e4:	e24e3001 	sub	r3, lr, #1
    c2e8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c2ec:	e353000d 	cmp	r3, #13
    c2f0:	9a000005 	bls	c30c <CScreenDevice::ClearDisplayEnd()+0xa0>
    c2f4:	e081c08c 	add	ip, r1, ip, lsl #1
    c2f8:	e2845054 	add	r5, r4, #84	@ 0x54
    c2fc:	e2847056 	add	r7, r4, #86	@ 0x56
    c300:	e1520007 	cmp	r2, r7
    c304:	3155000c 	cmpcc	r5, ip
    c308:	2a000005 	bcs	c324 <CScreenDevice::ClearDisplayEnd()+0xb8>
    c30c:	e1d415b4 	ldrh	r1, [r4, #84]	@ 0x54
    c310:	e2433001 	sub	r3, r3, #1
    c314:	e3730001 	cmn	r3, #1
    c318:	e0c210b2 	strh	r1, [r2], #2
    c31c:	1afffffa 	bne	c30c <CScreenDevice::ClearDisplayEnd()+0xa0>
    c320:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c324:	e1a0c0a2 	lsr	ip, r2, #1
    c328:	e26cc000 	rsb	ip, ip, #0
    c32c:	e21c5003 	ands	r5, ip, #3
    c330:	0a00000d 	beq	c36c <CScreenDevice::ClearDisplayEnd()+0x100>
    c334:	e1d435b4 	ldrh	r3, [r4, #84]	@ 0x54
    c338:	e31c0002 	tst	ip, #2
    c33c:	e18130b6 	strh	r3, [r1, r6]
    c340:	02822002 	addeq	r2, r2, #2
    c344:	024e3002 	subeq	r3, lr, #2
    c348:	0a000007 	beq	c36c <CScreenDevice::ClearDisplayEnd()+0x100>
    c34c:	e3550003 	cmp	r5, #3
    c350:	e1c230b2 	strh	r3, [r2, #2]
    c354:	12822004 	addne	r2, r2, #4
    c358:	124e3003 	subne	r3, lr, #3
    c35c:	01d435b4 	ldrheq	r3, [r4, #84]	@ 0x54
    c360:	01c230b4 	strheq	r3, [r2, #4]
    c364:	02822006 	addeq	r2, r2, #6
    c368:	024e3004 	subeq	r3, lr, #4
    c36c:	e0800005 	add	r0, r0, r5
    c370:	e04ee005 	sub	lr, lr, r5
    c374:	e0811080 	add	r1, r1, r0, lsl #1
    c378:	e1d405b4 	ldrh	r0, [r4, #84]	@ 0x54
    c37c:	e1a0c1ae 	lsr	ip, lr, #3
    c380:	eea00bb0 	vdup.16	q8, r0
    c384:	e3a00000 	mov	r0, #0
    c388:	e2800001 	add	r0, r0, #1
    c38c:	f4410add 	vst1.64	{d16-d17}, [r1 :64]!
    c390:	e150000c 	cmp	r0, ip
    c394:	1afffffb 	bne	c388 <CScreenDevice::ClearDisplayEnd()+0x11c>
    c398:	e3ce1007 	bic	r1, lr, #7
    c39c:	e31e0007 	tst	lr, #7
    c3a0:	e0433001 	sub	r3, r3, r1
    c3a4:	e1a01081 	lsl	r1, r1, #1
    c3a8:	e0820001 	add	r0, r2, r1
    c3ac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c3b0:	e3530000 	cmp	r3, #0
    c3b4:	e1d4c5b4 	ldrh	ip, [r4, #84]	@ 0x54
    c3b8:	e182c0b1 	strh	ip, [r2, r1]
    c3bc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c3c0:	e3530001 	cmp	r3, #1
    c3c4:	e1c0c0b2 	strh	ip, [r0, #2]
    c3c8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c3cc:	e3530002 	cmp	r3, #2
    c3d0:	e1d425b4 	ldrh	r2, [r4, #84]	@ 0x54
    c3d4:	e1c020b4 	strh	r2, [r0, #4]
    c3d8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c3dc:	e3530003 	cmp	r3, #3
    c3e0:	e1c020b6 	strh	r2, [r0, #6]
    c3e4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c3e8:	e3530004 	cmp	r3, #4
    c3ec:	e1d425b4 	ldrh	r2, [r4, #84]	@ 0x54
    c3f0:	e1c020b8 	strh	r2, [r0, #8]
    c3f4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c3f8:	e3530005 	cmp	r3, #5
    c3fc:	e1c020ba 	strh	r2, [r0, #10]
    c400:	11d435b4 	ldrhne	r3, [r4, #84]	@ 0x54
    c404:	11c030bc 	strhne	r3, [r0, #12]
    c408:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c40c <CScreenDevice::Initialize()>:
    c40c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c410:	e1a04000 	mov	r4, r0
    c414:	e5d05010 	ldrb	r5, [r0, #16]
    c418:	e24dd010 	sub	sp, sp, #16
    c41c:	e3550000 	cmp	r5, #0
    c420:	0a00002f 	beq	c4e4 <CScreenDevice::Initialize()+0xd8>
    c424:	e5900008 	ldr	r0, [r0, #8]
    c428:	e284601c 	add	r6, r4, #28
    c42c:	e594300c 	ldr	r3, [r4, #12]
    c430:	e5840030 	str	r0, [r4, #48]	@ 0x30
    c434:	e584002c 	str	r0, [r4, #44]	@ 0x2c
    c438:	e5843034 	str	r3, [r4, #52]	@ 0x34
    c43c:	e0000093 	mul	r0, r3, r0
    c440:	e370010f 	cmn	r0, #-1073741821	@ 0xc0000003
    c444:	e1a00080 	lsl	r0, r0, #1
    c448:	e5840028 	str	r0, [r4, #40]	@ 0x28
    c44c:	23e00000 	mvncs	r0, #0
    c450:	eb001337 	bl	11134 <operator new[](unsigned int)>
    c454:	e5840024 	str	r0, [r4, #36]	@ 0x24
    c458:	e5945034 	ldr	r5, [r4, #52]	@ 0x34
    c45c:	e1a00006 	mov	r0, r6
    c460:	eb001b32 	bl	13130 <CCharGenerator::GetCharHeight() const>
    c464:	e1a03000 	mov	r3, r0
    c468:	e1a00006 	mov	r0, r6
    c46c:	e735f315 	udiv	r5, r5, r3
    c470:	eb001b2e 	bl	13130 <CCharGenerator::GetCharHeight() const>
    c474:	e1a03000 	mov	r3, r0
    c478:	e5941040 	ldr	r1, [r4, #64]	@ 0x40
    c47c:	e3a02000 	mov	r2, #0
    c480:	e1a00004 	mov	r0, r4
    c484:	e584104c 	str	r1, [r4, #76]	@ 0x4c
    c488:	e0030593 	mul	r3, r3, r5
    c48c:	e5842048 	str	r2, [r4, #72]	@ 0x48
    c490:	e5843038 	str	r3, [r4, #56]	@ 0x38
    c494:	e5843044 	str	r3, [r4, #68]	@ 0x44
    c498:	ebffff73 	bl	c26c <CScreenDevice::ClearDisplayEnd()>
    c49c:	e5d43050 	ldrb	r3, [r4, #80]	@ 0x50
    c4a0:	e3530000 	cmp	r3, #0
    c4a4:	1a00000b 	bne	c4d8 <CScreenDevice::Initialize()+0xcc>
    c4a8:	ebfff177 	bl	8a8c <CDeviceNameService::Get()>
    c4ac:	e5942014 	ldr	r2, [r4, #20]
    c4b0:	e59f1144 	ldr	r1, [pc, #324]	@ c5fc <CScreenDevice::Initialize()+0x1f0>
    c4b4:	e3a03000 	mov	r3, #0
    c4b8:	e2822001 	add	r2, r2, #1
    c4bc:	ebfff1b0 	bl	8b84 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>
    c4c0:	e2505000 	subs	r5, r0, #0
    c4c4:	0a000044 	beq	c5dc <CScreenDevice::Initialize()+0x1d0>
    c4c8:	e3a05001 	mov	r5, #1
    c4cc:	e1a00005 	mov	r0, r5
    c4d0:	e28dd010 	add	sp, sp, #16
    c4d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c4d8:	e1a00004 	mov	r0, r4
    c4dc:	ebfffbcd 	bl	b418 <CScreenDevice::InvertCursor() [clone .part.0]>
    c4e0:	eafffff0 	b	c4a8 <CScreenDevice::Initialize()+0x9c>
    c4e4:	e3a00098 	mov	r0, #152	@ 0x98
    c4e8:	eb00130b 	bl	1111c <operator new(unsigned int)>
    c4ec:	e5943014 	ldr	r3, [r4, #20]
    c4f0:	e58d3008 	str	r3, [sp, #8]
    c4f4:	e1a06000 	mov	r6, r0
    c4f8:	e58d500c 	str	r5, [sp, #12]
    c4fc:	e3a03010 	mov	r3, #16
    c500:	e58d5004 	str	r5, [sp, #4]
    c504:	e58d5000 	str	r5, [sp]
    c508:	e594200c 	ldr	r2, [r4, #12]
    c50c:	e5941008 	ldr	r1, [r4, #8]
    c510:	eb00192f 	bl	129d4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
    c514:	e1a00006 	mov	r0, r6
    c518:	e5846018 	str	r6, [r4, #24]
    c51c:	eb0019f2 	bl	12cec <CBcmFrameBuffer::Initialize()>
    c520:	e3500000 	cmp	r0, #0
    c524:	0affffe8 	beq	c4cc <CScreenDevice::Initialize()+0xc0>
    c528:	e5940018 	ldr	r0, [r4, #24]
    c52c:	eb0019b6 	bl	12c0c <CBcmFrameBuffer::GetDepth() const>
    c530:	e3500010 	cmp	r0, #16
    c534:	1affffe4 	bne	c4cc <CScreenDevice::Initialize()+0xc0>
    c538:	e5940018 	ldr	r0, [r4, #24]
    c53c:	e284601c 	add	r6, r4, #28
    c540:	eb0019b3 	bl	12c14 <CBcmFrameBuffer::GetBuffer() const>
    c544:	e1a03000 	mov	r3, r0
    c548:	e5940018 	ldr	r0, [r4, #24]
    c54c:	e5843024 	str	r3, [r4, #36]	@ 0x24
    c550:	eb0019b1 	bl	12c1c <CBcmFrameBuffer::GetSize() const>
    c554:	e1a03000 	mov	r3, r0
    c558:	e5940018 	ldr	r0, [r4, #24]
    c55c:	e5843028 	str	r3, [r4, #40]	@ 0x28
    c560:	eb0019a7 	bl	12c04 <CBcmFrameBuffer::GetPitch() const>
    c564:	e1a03000 	mov	r3, r0
    c568:	e5940018 	ldr	r0, [r4, #24]
    c56c:	e584302c 	str	r3, [r4, #44]	@ 0x2c
    c570:	eb00199b 	bl	12be4 <CBcmFrameBuffer::GetWidth() const>
    c574:	e1a03000 	mov	r3, r0
    c578:	e5940018 	ldr	r0, [r4, #24]
    c57c:	e5843030 	str	r3, [r4, #48]	@ 0x30
    c580:	eb001999 	bl	12bec <CBcmFrameBuffer::GetHeight() const>
    c584:	e5840034 	str	r0, [r4, #52]	@ 0x34
    c588:	e1a00006 	mov	r0, r6
    c58c:	eb001ae5 	bl	13128 <CCharGenerator::GetCharWidth() const>
    c590:	e1a08000 	mov	r8, r0
    c594:	e1a00006 	mov	r0, r6
    c598:	eb001ae4 	bl	13130 <CCharGenerator::GetCharHeight() const>
    c59c:	e1a07000 	mov	r7, r0
    c5a0:	e1a00006 	mov	r0, r6
    c5a4:	eb001ae3 	bl	13138 <CCharGenerator::GetUnderline() const>
    c5a8:	e0477000 	sub	r7, r7, r0
    c5ac:	e0000798 	mul	r0, r8, r7
    c5b0:	e3700113 	cmn	r0, #-1073741820	@ 0xc0000004
    c5b4:	91a00080 	lslls	r0, r0, #1
    c5b8:	83e00000 	mvnhi	r0, #0
    c5bc:	eb0012dc 	bl	11134 <operator new[](unsigned int)>
    c5c0:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
    c5c4:	e5840020 	str	r0, [r4, #32]
    c5c8:	e3130003 	tst	r3, #3
    c5cc:	1affffbe 	bne	c4cc <CScreenDevice::Initialize()+0xc0>
    c5d0:	e1a030a3 	lsr	r3, r3, #1
    c5d4:	e584302c 	str	r3, [r4, #44]	@ 0x2c
    c5d8:	eaffff9e 	b	c458 <CScreenDevice::Initialize()+0x4c>
    c5dc:	ebfff12a 	bl	8a8c <CDeviceNameService::Get()>
    c5e0:	e5942014 	ldr	r2, [r4, #20]
    c5e4:	e59f1010 	ldr	r1, [pc, #16]	@ c5fc <CScreenDevice::Initialize()+0x1f0>
    c5e8:	e1a03004 	mov	r3, r4
    c5ec:	e2822001 	add	r2, r2, #1
    c5f0:	e58d5000 	str	r5, [sp]
    c5f4:	ebfff130 	bl	8abc <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    c5f8:	eaffffb2 	b	c4c8 <CScreenDevice::Initialize()+0xbc>
    c5fc:	00015860 	.word	0x00015860

0000c600 <CScreenDevice::Resize(unsigned int, unsigned int)>:
    c600:	e5d03010 	ldrb	r3, [r0, #16]
    c604:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c608:	e1a04000 	mov	r4, r0
    c60c:	e1a06001 	mov	r6, r1
    c610:	e1a05002 	mov	r5, r2
    c614:	e3530000 	cmp	r3, #0
    c618:	0a000003 	beq	c62c <CScreenDevice::Resize(unsigned int, unsigned int)+0x2c>
    c61c:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
    c620:	e3500000 	cmp	r0, #0
    c624:	0a000000 	beq	c62c <CScreenDevice::Resize(unsigned int, unsigned int)+0x2c>
    c628:	eb0012cd 	bl	11164 <operator delete[](void*)>
    c62c:	e5947018 	ldr	r7, [r4, #24]
    c630:	e3a03000 	mov	r3, #0
    c634:	e5843024 	str	r3, [r4, #36]	@ 0x24
    c638:	e1570003 	cmp	r7, r3
    c63c:	0a000004 	beq	c654 <CScreenDevice::Resize(unsigned int, unsigned int)+0x54>
    c640:	e1a00007 	mov	r0, r7
    c644:	eb001939 	bl	12b30 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    c648:	e3a01098 	mov	r1, #152	@ 0x98
    c64c:	e1a00007 	mov	r0, r7
    c650:	eb0012c9 	bl	1117c <operator delete(void*, unsigned int)>
    c654:	e5940020 	ldr	r0, [r4, #32]
    c658:	e3a03000 	mov	r3, #0
    c65c:	e5843018 	str	r3, [r4, #24]
    c660:	e1500003 	cmp	r0, r3
    c664:	0a000000 	beq	c66c <CScreenDevice::Resize(unsigned int, unsigned int)+0x6c>
    c668:	eb0012bd 	bl	11164 <operator delete[](void*)>
    c66c:	e3a03000 	mov	r3, #0
    c670:	e3a02001 	mov	r2, #1
    c674:	e34f2fdf 	movt	r2, #65503	@ 0xffdf
    c678:	e5843054 	str	r3, [r4, #84]	@ 0x54
    c67c:	e5842050 	str	r2, [r4, #80]	@ 0x50
    c680:	e1a00004 	mov	r0, r4
    c684:	e5843020 	str	r3, [r4, #32]
    c688:	e5846008 	str	r6, [r4, #8]
    c68c:	e584500c 	str	r5, [r4, #12]
    c690:	e584303c 	str	r3, [r4, #60]	@ 0x3c
    c694:	e5843040 	str	r3, [r4, #64]	@ 0x40
    c698:	e5843048 	str	r3, [r4, #72]	@ 0x48
    c69c:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    c6a0:	e5c43060 	strb	r3, [r4, #96]	@ 0x60
    c6a4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c6a8:	eaffff57 	b	c40c <CScreenDevice::Initialize()>

0000c6ac <CScreenDevice::Write(char)>:
    c6ac:	e92d4070 	push	{r4, r5, r6, lr}
    c6b0:	e1a04000 	mov	r4, r0
    c6b4:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
    c6b8:	e24dd008 	sub	sp, sp, #8
    c6bc:	e3530007 	cmp	r3, #7
    c6c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c6c4:	ea000009 	b	c6f0 <CScreenDevice::Write(char)+0x44>
    c6c8:	0000c738 	.word	0x0000c738
    c6cc:	0000c6e8 	.word	0x0000c6e8
    c6d0:	0000c798 	.word	0x0000c798
    c6d4:	0000c7f0 	.word	0x0000c7f0
    c6d8:	0000c8cc 	.word	0x0000c8cc
    c6dc:	0000c8ec 	.word	0x0000c8ec
    c6e0:	0000c90c 	.word	0x0000c90c
    c6e4:	0000c700 	.word	0x0000c700
    c6e8:	e351005b 	cmp	r1, #91	@ 0x5b
    c6ec:	0a0000ce 	beq	ca2c <CScreenDevice::Write(char)+0x380>
    c6f0:	e3a03000 	mov	r3, #0
    c6f4:	e584303c 	str	r3, [r4, #60]	@ 0x3c
    c6f8:	e28dd008 	add	sp, sp, #8
    c6fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    c700:	e3c13004 	bic	r3, r1, #4
    c704:	e3530068 	cmp	r3, #104	@ 0x68
    c708:	0a00008e 	beq	c948 <CScreenDevice::Write(char)+0x29c>
    c70c:	e2411030 	sub	r1, r1, #48	@ 0x30
    c710:	e6ef3071 	uxtb	r3, r1
    c714:	e3530009 	cmp	r3, #9
    c718:	8afffff4 	bhi	c6f0 <CScreenDevice::Write(char)+0x44>
    c71c:	e5903058 	ldr	r3, [r0, #88]	@ 0x58
    c720:	e3a0200a 	mov	r2, #10
    c724:	e0211392 	mla	r1, r2, r3, r1
    c728:	e5801058 	str	r1, [r0, #88]	@ 0x58
    c72c:	e3510063 	cmp	r1, #99	@ 0x63
    c730:	8affffee 	bhi	c6f0 <CScreenDevice::Write(char)+0x44>
    c734:	eaffffef 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    c738:	e2413008 	sub	r3, r1, #8
    c73c:	e3530013 	cmp	r3, #19
    c740:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c744:	ea000091 	b	c990 <CScreenDevice::Write(char)+0x2e4>
    c748:	0000cabc 	.word	0x0000cabc
    c74c:	0000cab0 	.word	0x0000cab0
    c750:	0000ca80 	.word	0x0000ca80
    c754:	0000c990 	.word	0x0000c990
    c758:	0000c990 	.word	0x0000c990
    c75c:	0000ca74 	.word	0x0000ca74
    c760:	0000c990 	.word	0x0000c990
    c764:	0000c990 	.word	0x0000c990
    c768:	0000c990 	.word	0x0000c990
    c76c:	0000c990 	.word	0x0000c990
    c770:	0000c990 	.word	0x0000c990
    c774:	0000c990 	.word	0x0000c990
    c778:	0000c990 	.word	0x0000c990
    c77c:	0000c990 	.word	0x0000c990
    c780:	0000c990 	.word	0x0000c990
    c784:	0000c990 	.word	0x0000c990
    c788:	0000c990 	.word	0x0000c990
    c78c:	0000c990 	.word	0x0000c990
    c790:	0000c990 	.word	0x0000c990
    c794:	0000ca68 	.word	0x0000ca68
    c798:	e241303f 	sub	r3, r1, #63	@ 0x3f
    c79c:	e3530011 	cmp	r3, #17
    c7a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c7a4:	ea0000a7 	b	ca48 <CScreenDevice::Write(char)+0x39c>
    c7a8:	0000cac8 	.word	0x0000cac8
    c7ac:	0000ca48 	.word	0x0000ca48
    c7b0:	0000cb18 	.word	0x0000cb18
    c7b4:	0000cad4 	.word	0x0000cad4
    c7b8:	0000cbb8 	.word	0x0000cbb8
    c7bc:	0000cba8 	.word	0x0000cba8
    c7c0:	0000ca48 	.word	0x0000ca48
    c7c4:	0000ca48 	.word	0x0000ca48
    c7c8:	0000ca48 	.word	0x0000ca48
    c7cc:	0000cb90 	.word	0x0000cb90
    c7d0:	0000ca48 	.word	0x0000ca48
    c7d4:	0000cb80 	.word	0x0000cb80
    c7d8:	0000cb40 	.word	0x0000cb40
    c7dc:	0000c6f0 	.word	0x0000c6f0
    c7e0:	0000c6f0 	.word	0x0000c6f0
    c7e4:	0000ca48 	.word	0x0000ca48
    c7e8:	0000ca48 	.word	0x0000ca48
    c7ec:	0000c6f0 	.word	0x0000c6f0
    c7f0:	e241303b 	sub	r3, r1, #59	@ 0x3b
    c7f4:	e3530032 	cmp	r3, #50	@ 0x32
    c7f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c7fc:	ea000058 	b	c964 <CScreenDevice::Write(char)+0x2b8>
    c800:	0000cc0c 	.word	0x0000cc0c
    c804:	0000c964 	.word	0x0000c964
    c808:	0000c964 	.word	0x0000c964
    c80c:	0000c964 	.word	0x0000c964
    c810:	0000c964 	.word	0x0000c964
    c814:	0000c964 	.word	0x0000c964
    c818:	0000c964 	.word	0x0000c964
    c81c:	0000c964 	.word	0x0000c964
    c820:	0000c964 	.word	0x0000c964
    c824:	0000c964 	.word	0x0000c964
    c828:	0000c964 	.word	0x0000c964
    c82c:	0000c964 	.word	0x0000c964
    c830:	0000c964 	.word	0x0000c964
    c834:	0000c964 	.word	0x0000c964
    c838:	0000c964 	.word	0x0000c964
    c83c:	0000c964 	.word	0x0000c964
    c840:	0000c964 	.word	0x0000c964
    c844:	0000c6f0 	.word	0x0000c6f0
    c848:	0000c6f0 	.word	0x0000c6f0
    c84c:	0000c964 	.word	0x0000c964
    c850:	0000c964 	.word	0x0000c964
    c854:	0000c6f0 	.word	0x0000c6f0
    c858:	0000c964 	.word	0x0000c964
    c85c:	0000c964 	.word	0x0000c964
    c860:	0000c964 	.word	0x0000c964
    c864:	0000c964 	.word	0x0000c964
    c868:	0000c964 	.word	0x0000c964
    c86c:	0000c964 	.word	0x0000c964
    c870:	0000c964 	.word	0x0000c964
    c874:	0000cbf8 	.word	0x0000cbf8
    c878:	0000c964 	.word	0x0000c964
    c87c:	0000c964 	.word	0x0000c964
    c880:	0000c964 	.word	0x0000c964
    c884:	0000c964 	.word	0x0000c964
    c888:	0000c964 	.word	0x0000c964
    c88c:	0000c964 	.word	0x0000c964
    c890:	0000c964 	.word	0x0000c964
    c894:	0000c964 	.word	0x0000c964
    c898:	0000c964 	.word	0x0000c964
    c89c:	0000c964 	.word	0x0000c964
    c8a0:	0000c964 	.word	0x0000c964
    c8a4:	0000c964 	.word	0x0000c964
    c8a8:	0000c964 	.word	0x0000c964
    c8ac:	0000c964 	.word	0x0000c964
    c8b0:	0000c964 	.word	0x0000c964
    c8b4:	0000cbc8 	.word	0x0000cbc8
    c8b8:	0000c964 	.word	0x0000c964
    c8bc:	0000c964 	.word	0x0000c964
    c8c0:	0000c964 	.word	0x0000c964
    c8c4:	0000cbc8 	.word	0x0000cbc8
    c8c8:	0000cbe4 	.word	0x0000cbe4
    c8cc:	e2411030 	sub	r1, r1, #48	@ 0x30
    c8d0:	e6ef3071 	uxtb	r3, r1
    c8d4:	e3530009 	cmp	r3, #9
    c8d8:	8affff84 	bhi	c6f0 <CScreenDevice::Write(char)+0x44>
    c8dc:	e3a03007 	mov	r3, #7
    c8e0:	e5801058 	str	r1, [r0, #88]	@ 0x58
    c8e4:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    c8e8:	eaffff82 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    c8ec:	e2411030 	sub	r1, r1, #48	@ 0x30
    c8f0:	e6ef3071 	uxtb	r3, r1
    c8f4:	e3530009 	cmp	r3, #9
    c8f8:	8affff7c 	bhi	c6f0 <CScreenDevice::Write(char)+0x44>
    c8fc:	e3a03006 	mov	r3, #6
    c900:	e580105c 	str	r1, [r0, #92]	@ 0x5c
    c904:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    c908:	eaffff7a 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    c90c:	e3510048 	cmp	r1, #72	@ 0x48
    c910:	0a0000c0 	beq	cc18 <CScreenDevice::Write(char)+0x56c>
    c914:	e3510072 	cmp	r1, #114	@ 0x72
    c918:	0a000046 	beq	ca38 <CScreenDevice::Write(char)+0x38c>
    c91c:	e2411030 	sub	r1, r1, #48	@ 0x30
    c920:	e6ef3071 	uxtb	r3, r1
    c924:	e3530009 	cmp	r3, #9
    c928:	8affff70 	bhi	c6f0 <CScreenDevice::Write(char)+0x44>
    c92c:	e590305c 	ldr	r3, [r0, #92]	@ 0x5c
    c930:	e3a0200a 	mov	r2, #10
    c934:	e0231392 	mla	r3, r2, r3, r1
    c938:	e580305c 	str	r3, [r0, #92]	@ 0x5c
    c93c:	e35300c7 	cmp	r3, #199	@ 0xc7
    c940:	8affff6a 	bhi	c6f0 <CScreenDevice::Write(char)+0x44>
    c944:	eaffff6b 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    c948:	e5903058 	ldr	r3, [r0, #88]	@ 0x58
    c94c:	e3530019 	cmp	r3, #25
    c950:	02411068 	subeq	r1, r1, #104	@ 0x68
    c954:	016f1f11 	clzeq	r1, r1
    c958:	01a012a1 	lsreq	r1, r1, #5
    c95c:	05c01050 	strbeq	r1, [r0, #80]	@ 0x50
    c960:	eaffff62 	b	c6f0 <CScreenDevice::Write(char)+0x44>
    c964:	e2411030 	sub	r1, r1, #48	@ 0x30
    c968:	e6ef3071 	uxtb	r3, r1
    c96c:	e3530009 	cmp	r3, #9
    c970:	8affff5e 	bhi	c6f0 <CScreenDevice::Write(char)+0x44>
    c974:	e5903058 	ldr	r3, [r0, #88]	@ 0x58
    c978:	e3a0200a 	mov	r2, #10
    c97c:	e0231392 	mla	r3, r2, r3, r1
    c980:	e5803058 	str	r3, [r0, #88]	@ 0x58
    c984:	e35300c7 	cmp	r3, #199	@ 0xc7
    c988:	8affff58 	bhi	c6f0 <CScreenDevice::Write(char)+0x44>
    c98c:	eaffff59 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    c990:	e6ef3071 	uxtb	r3, r1
    c994:	e353001f 	cmp	r3, #31
    c998:	9affff56 	bls	c6f8 <CScreenDevice::Write(char)+0x4c>
    c99c:	e5d00056 	ldrb	r0, [r0, #86]	@ 0x56
    c9a0:	e284501c 	add	r5, r4, #28
    c9a4:	e5942048 	ldr	r2, [r4, #72]	@ 0x48
    c9a8:	e3500000 	cmp	r0, #0
    c9ac:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    c9b0:	11d405b4 	ldrhne	r0, [r4, #84]	@ 0x54
    c9b4:	01d405b2 	ldrheq	r0, [r4, #82]	@ 0x52
    c9b8:	e58d0000 	str	r0, [sp]
    c9bc:	e1a00004 	mov	r0, r4
    c9c0:	ebfffd79 	bl	bfac <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c9c4:	e1a00005 	mov	r0, r5
    c9c8:	eb0019d6 	bl	13128 <CCharGenerator::GetCharWidth() const>
    c9cc:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
    c9d0:	e5942030 	ldr	r2, [r4, #48]	@ 0x30
    c9d4:	e0803003 	add	r3, r0, r3
    c9d8:	e5843048 	str	r3, [r4, #72]	@ 0x48
    c9dc:	e1530002 	cmp	r3, r2
    c9e0:	3affff44 	bcc	c6f8 <CScreenDevice::Write(char)+0x4c>
    c9e4:	e3a03000 	mov	r3, #0
    c9e8:	e1a00005 	mov	r0, r5
    c9ec:	e5843048 	str	r3, [r4, #72]	@ 0x48
    c9f0:	eb0019ce 	bl	13130 <CCharGenerator::GetCharHeight() const>
    c9f4:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    c9f8:	e5942044 	ldr	r2, [r4, #68]	@ 0x44
    c9fc:	e0803003 	add	r3, r0, r3
    ca00:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    ca04:	e1530002 	cmp	r3, r2
    ca08:	3affff3a 	bcc	c6f8 <CScreenDevice::Write(char)+0x4c>
    ca0c:	e1a00004 	mov	r0, r4
    ca10:	ebfffcb0 	bl	bcd8 <CScreenDevice::Scroll()>
    ca14:	e1a00005 	mov	r0, r5
    ca18:	eb0019c4 	bl	13130 <CCharGenerator::GetCharHeight() const>
    ca1c:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    ca20:	e0433000 	sub	r3, r3, r0
    ca24:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    ca28:	eaffff32 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    ca2c:	e3a03002 	mov	r3, #2
    ca30:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    ca34:	eaffff2f 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    ca38:	e590205c 	ldr	r2, [r0, #92]	@ 0x5c
    ca3c:	e5901058 	ldr	r1, [r0, #88]	@ 0x58
    ca40:	ebfffba8 	bl	b8e8 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    ca44:	eaffff29 	b	c6f0 <CScreenDevice::Write(char)+0x44>
    ca48:	e2411030 	sub	r1, r1, #48	@ 0x30
    ca4c:	e6ef3071 	uxtb	r3, r1
    ca50:	e3530009 	cmp	r3, #9
    ca54:	8affff25 	bhi	c6f0 <CScreenDevice::Write(char)+0x44>
    ca58:	e3a03003 	mov	r3, #3
    ca5c:	e5801058 	str	r1, [r0, #88]	@ 0x58
    ca60:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    ca64:	eaffff23 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    ca68:	e3a03001 	mov	r3, #1
    ca6c:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    ca70:	eaffff20 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    ca74:	e3a03000 	mov	r3, #0
    ca78:	e5803048 	str	r3, [r0, #72]	@ 0x48
    ca7c:	eaffff1d 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    ca80:	e280501c 	add	r5, r0, #28
    ca84:	e3a03000 	mov	r3, #0
    ca88:	e1a00005 	mov	r0, r5
    ca8c:	e5843048 	str	r3, [r4, #72]	@ 0x48
    ca90:	eb0019a6 	bl	13130 <CCharGenerator::GetCharHeight() const>
    ca94:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
    ca98:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
    ca9c:	e0800002 	add	r0, r0, r2
    caa0:	e584004c 	str	r0, [r4, #76]	@ 0x4c
    caa4:	e1500003 	cmp	r0, r3
    caa8:	3affff12 	bcc	c6f8 <CScreenDevice::Write(char)+0x4c>
    caac:	eaffffd6 	b	ca0c <CScreenDevice::Write(char)+0x360>
    cab0:	e28dd008 	add	sp, sp, #8
    cab4:	e8bd4070 	pop	{r4, r5, r6, lr}
    cab8:	eafffd1b 	b	bf2c <CScreenDevice::Tabulator()>
    cabc:	e28dd008 	add	sp, sp, #8
    cac0:	e8bd4070 	pop	{r4, r5, r6, lr}
    cac4:	eafffb35 	b	b7a0 <CScreenDevice::CursorLeft()>
    cac8:	e3a03004 	mov	r3, #4
    cacc:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    cad0:	eaffff08 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    cad4:	e280501c 	add	r5, r0, #28
    cad8:	e1a00005 	mov	r0, r5
    cadc:	eb001993 	bl	13130 <CCharGenerator::GetCharHeight() const>
    cae0:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    cae4:	e5942044 	ldr	r2, [r4, #68]	@ 0x44
    cae8:	e0803003 	add	r3, r0, r3
    caec:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    caf0:	e1530002 	cmp	r3, r2
    caf4:	3afffefd 	bcc	c6f0 <CScreenDevice::Write(char)+0x44>
    caf8:	e1a00004 	mov	r0, r4
    cafc:	ebfffc75 	bl	bcd8 <CScreenDevice::Scroll()>
    cb00:	e1a00005 	mov	r0, r5
    cb04:	eb001989 	bl	13130 <CCharGenerator::GetCharHeight() const>
    cb08:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    cb0c:	e0433000 	sub	r3, r3, r0
    cb10:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    cb14:	eafffef5 	b	c6f0 <CScreenDevice::Write(char)+0x44>
    cb18:	e590204c 	ldr	r2, [r0, #76]	@ 0x4c
    cb1c:	e5903040 	ldr	r3, [r0, #64]	@ 0x40
    cb20:	e1520003 	cmp	r2, r3
    cb24:	9afffef1 	bls	c6f0 <CScreenDevice::Write(char)+0x44>
    cb28:	e280001c 	add	r0, r0, #28
    cb2c:	eb00197f 	bl	13130 <CCharGenerator::GetCharHeight() const>
    cb30:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
    cb34:	e0433000 	sub	r3, r3, r0
    cb38:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    cb3c:	eafffeeb 	b	c6f0 <CScreenDevice::Write(char)+0x44>
    cb40:	e5905048 	ldr	r5, [r0, #72]	@ 0x48
    cb44:	e5903030 	ldr	r3, [r0, #48]	@ 0x30
    cb48:	e1550003 	cmp	r5, r3
    cb4c:	2afffee7 	bcs	c6f0 <CScreenDevice::Write(char)+0x44>
    cb50:	e280601c 	add	r6, r0, #28
    cb54:	e1a01005 	mov	r1, r5
    cb58:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
    cb5c:	e1a00004 	mov	r0, r4
    cb60:	ebfffd72 	bl	c130 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    cb64:	e1a00006 	mov	r0, r6
    cb68:	eb00196e 	bl	13128 <CCharGenerator::GetCharWidth() const>
    cb6c:	e5943030 	ldr	r3, [r4, #48]	@ 0x30
    cb70:	e0855000 	add	r5, r5, r0
    cb74:	e1550003 	cmp	r5, r3
    cb78:	3afffff5 	bcc	cb54 <CScreenDevice::Write(char)+0x4a8>
    cb7c:	eafffedb 	b	c6f0 <CScreenDevice::Write(char)+0x44>
    cb80:	ebfffdb9 	bl	c26c <CScreenDevice::ClearDisplayEnd()>
    cb84:	e3a03000 	mov	r3, #0
    cb88:	e584303c 	str	r3, [r4, #60]	@ 0x3c
    cb8c:	eafffed9 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    cb90:	e5902040 	ldr	r2, [r0, #64]	@ 0x40
    cb94:	e3a03000 	mov	r3, #0
    cb98:	e580204c 	str	r2, [r0, #76]	@ 0x4c
    cb9c:	e5803048 	str	r3, [r0, #72]	@ 0x48
    cba0:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    cba4:	eafffed3 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    cba8:	ebfffafc 	bl	b7a0 <CScreenDevice::CursorLeft()>
    cbac:	e3a03000 	mov	r3, #0
    cbb0:	e584303c 	str	r3, [r4, #60]	@ 0x3c
    cbb4:	eafffecf 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    cbb8:	ebfffcbe 	bl	beb8 <CScreenDevice::CursorRight()>
    cbbc:	e3a03000 	mov	r3, #0
    cbc0:	e584303c 	str	r3, [r4, #60]	@ 0x3c
    cbc4:	eafffecb 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    cbc8:	e5903058 	ldr	r3, [r0, #88]	@ 0x58
    cbcc:	e3530004 	cmp	r3, #4
    cbd0:	02411068 	subeq	r1, r1, #104	@ 0x68
    cbd4:	016f1f11 	clzeq	r1, r1
    cbd8:	01a012a1 	lsreq	r1, r1, #5
    cbdc:	05c01057 	strbeq	r1, [r0, #87]	@ 0x57
    cbe0:	eafffec2 	b	c6f0 <CScreenDevice::Write(char)+0x44>
    cbe4:	e5901058 	ldr	r1, [r0, #88]	@ 0x58
    cbe8:	ebfffb5b 	bl	b95c <CScreenDevice::SetStandoutMode(unsigned int)>
    cbec:	e3a03000 	mov	r3, #0
    cbf0:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    cbf4:	eafffebf 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    cbf8:	e5901058 	ldr	r1, [r0, #88]	@ 0x58
    cbfc:	e3510000 	cmp	r1, #0
    cc00:	0afffeba 	beq	c6f0 <CScreenDevice::Write(char)+0x44>
    cc04:	ebfffd7d 	bl	c200 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
    cc08:	eafffeb8 	b	c6f0 <CScreenDevice::Write(char)+0x44>
    cc0c:	e3a03005 	mov	r3, #5
    cc10:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    cc14:	eafffeb7 	b	c6f8 <CScreenDevice::Write(char)+0x4c>
    cc18:	e590205c 	ldr	r2, [r0, #92]	@ 0x5c
    cc1c:	e5901058 	ldr	r1, [r0, #88]	@ 0x58
    cc20:	ebfffaf9 	bl	b80c <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    cc24:	e3a03000 	mov	r3, #0
    cc28:	e584303c 	str	r3, [r4, #60]	@ 0x3c
    cc2c:	eafffeb1 	b	c6f8 <CScreenDevice::Write(char)+0x4c>

0000cc30 <CScreenDevice::Write(void const*, unsigned int)>:
    cc30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cc34:	e1a05000 	mov	r5, r0
    cc38:	e590008c 	ldr	r0, [r0, #140]	@ 0x8c
    cc3c:	e1a07001 	mov	r7, r1
    cc40:	e1a06002 	mov	r6, r2
    cc44:	e3500000 	cmp	r0, #0
    cc48:	1a00001f 	bne	cccc <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    cc4c:	e5d53050 	ldrb	r3, [r5, #80]	@ 0x50
    cc50:	e3a02001 	mov	r2, #1
    cc54:	e5c52060 	strb	r2, [r5, #96]	@ 0x60
    cc58:	e3530000 	cmp	r3, #0
    cc5c:	1a000015 	bne	ccb8 <CScreenDevice::Write(void const*, unsigned int)+0x88>
    cc60:	e3560000 	cmp	r6, #0
    cc64:	0a00000b 	beq	cc98 <CScreenDevice::Write(void const*, unsigned int)+0x68>
    cc68:	e1a04007 	mov	r4, r7
    cc6c:	e0d410d1 	ldrsb	r1, [r4], #1
    cc70:	e1a00005 	mov	r0, r5
    cc74:	ebfffe8c 	bl	c6ac <CScreenDevice::Write(char)>
    cc78:	e0463004 	sub	r3, r6, r4
    cc7c:	e1770003 	cmn	r7, r3
    cc80:	1afffff9 	bne	cc6c <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    cc84:	e5d53050 	ldrb	r3, [r5, #80]	@ 0x50
    cc88:	e3530000 	cmp	r3, #0
    cc8c:	0a000001 	beq	cc98 <CScreenDevice::Write(void const*, unsigned int)+0x68>
    cc90:	e1a00005 	mov	r0, r5
    cc94:	ebfff9df 	bl	b418 <CScreenDevice::InvertCursor() [clone .part.0]>
    cc98:	e595308c 	ldr	r3, [r5, #140]	@ 0x8c
    cc9c:	e3a02000 	mov	r2, #0
    cca0:	e5c52060 	strb	r2, [r5, #96]	@ 0x60
    cca4:	e1530002 	cmp	r3, r2
    cca8:	1a000009 	bne	ccd4 <CScreenDevice::Write(void const*, unsigned int)+0xa4>
    ccac:	f57ff05f 	dmb	sy
    ccb0:	e1a00006 	mov	r0, r6
    ccb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ccb8:	e1a00005 	mov	r0, r5
    ccbc:	ebfff9d5 	bl	b418 <CScreenDevice::InvertCursor() [clone .part.0]>
    ccc0:	e3560000 	cmp	r6, #0
    ccc4:	1affffe7 	bne	cc68 <CScreenDevice::Write(void const*, unsigned int)+0x38>
    ccc8:	eaffffed 	b	cc84 <CScreenDevice::Write(void const*, unsigned int)+0x54>
    cccc:	eb001507 	bl	120f0 <EnterCritical>
    ccd0:	eaffffdd 	b	cc4c <CScreenDevice::Write(void const*, unsigned int)+0x1c>
    ccd4:	eb001530 	bl	1219c <LeaveCritical>
    ccd8:	eafffff3 	b	ccac <CScreenDevice::Write(void const*, unsigned int)+0x7c>

0000ccdc <CScreenDevice::InvertCursor()>:
    ccdc:	e5d03050 	ldrb	r3, [r0, #80]	@ 0x50
    cce0:	e3530000 	cmp	r3, #0
    cce4:	012fff1e 	bxeq	lr
    cce8:	eafff9ca 	b	b418 <CScreenDevice::InvertCursor() [clone .part.0]>

0000ccec <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    ccec:	e590c030 	ldr	ip, [r0, #48]	@ 0x30
    ccf0:	e15c0001 	cmp	ip, r1
    ccf4:	912fff1e 	bxls	lr
    ccf8:	e590c034 	ldr	ip, [r0, #52]	@ 0x34
    ccfc:	e15c0002 	cmp	ip, r2
    cd00:	8590c02c 	ldrhi	ip, [r0, #44]	@ 0x2c
    cd04:	85900024 	ldrhi	r0, [r0, #36]	@ 0x24
    cd08:	8021129c 	mlahi	r1, ip, r2, r1
    cd0c:	81a01081 	lslhi	r1, r1, #1
    cd10:	818030b1 	strhhi	r3, [r0, r1]
    cd14:	e12fff1e 	bx	lr

0000cd18 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    cd18:	e5903030 	ldr	r3, [r0, #48]	@ 0x30
    cd1c:	e1530001 	cmp	r3, r1
    cd20:	9a000002 	bls	cd30 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
    cd24:	e5903034 	ldr	r3, [r0, #52]	@ 0x34
    cd28:	e1530002 	cmp	r3, r2
    cd2c:	8a000001 	bhi	cd38 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
    cd30:	e1d005b4 	ldrh	r0, [r0, #84]	@ 0x54
    cd34:	e12fff1e 	bx	lr
    cd38:	e590c02c 	ldr	ip, [r0, #44]	@ 0x2c
    cd3c:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
    cd40:	e022129c 	mla	r2, ip, r2, r1
    cd44:	e1a01082 	lsl	r1, r2, #1
    cd48:	e19300b1 	ldrh	r0, [r3, r1]
    cd4c:	e12fff1e 	bx	lr

0000cd50 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    cd50:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cd54:	e1a06000 	mov	r6, r0
    cd58:	e1a05001 	mov	r5, r1
    cd5c:	e24dd00c 	sub	sp, sp, #12
    cd60:	e280001c 	add	r0, r0, #28
    cd64:	e5967030 	ldr	r7, [r6, #48]	@ 0x30
    cd68:	e1a04002 	mov	r4, r2
    cd6c:	e2055003 	and	r5, r5, #3
    cd70:	eb0018ec 	bl	13128 <CCharGenerator::GetCharWidth() const>
    cd74:	e1a02000 	mov	r2, r0
    cd78:	e2044003 	and	r4, r4, #3
    cd7c:	e3053838 	movw	r3, #22584	@ 0x5838
    cd80:	e3403001 	movt	r3, #1
    cd84:	e0831004 	add	r1, r3, r4
    cd88:	e1a00006 	mov	r0, r6
    cd8c:	e0222295 	mla	r2, r5, r2, r2
    cd90:	e30f3a8a 	movw	r3, #64138	@ 0xfa8a
    cd94:	e58d3000 	str	r3, [sp]
    cd98:	e3a03000 	mov	r3, #0
    cd9c:	e1d112dc 	ldrsb	r1, [r1, #44]	@ 0x2c
    cda0:	e0472002 	sub	r2, r7, r2
    cda4:	ebfffc80 	bl	bfac <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    cda8:	e28dd00c 	add	sp, sp, #12
    cdac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000cdb0 <CSerialDevice::Read(void*, unsigned int)>:
    cdb0:	e5d03018 	ldrb	r3, [r0, #24]
    cdb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cdb8:	e3530000 	cmp	r3, #0
    cdbc:	0a00004d 	beq	cef8 <CSerialDevice::Read(void*, unsigned int)+0x148>
    cdc0:	e1a06001 	mov	r6, r1
    cdc4:	e3510000 	cmp	r1, #0
    cdc8:	0a00004f 	beq	cf0c <CSerialDevice::Read(void*, unsigned int)+0x15c>
    cdcc:	e5905008 	ldr	r5, [r0, #8]
    cdd0:	e1a04000 	mov	r4, r0
    cdd4:	e1a07002 	mov	r7, r2
    cdd8:	e3550000 	cmp	r5, #0
    cddc:	0a000029 	beq	ce88 <CSerialDevice::Read(void*, unsigned int)+0xd8>
    cde0:	e2808a01 	add	r8, r0, #4096	@ 0x1000
    cde4:	e59800e0 	ldr	r0, [r8, #224]	@ 0xe0
    cde8:	e3500000 	cmp	r0, #0
    cdec:	1a00003c 	bne	cee4 <CSerialDevice::Read(void*, unsigned int)+0x134>
    cdf0:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
    cdf4:	e3530000 	cmp	r3, #0
    cdf8:	ba00001a 	blt	ce68 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    cdfc:	e3570000 	cmp	r7, #0
    ce00:	01a05007 	moveq	r5, r7
    ce04:	0a00001a 	beq	ce74 <CSerialDevice::Read(void*, unsigned int)+0xc4>
    ce08:	e3a05000 	mov	r5, #0
    ce0c:	ea00000b 	b	ce40 <CSerialDevice::Read(void*, unsigned int)+0x90>
    ce10:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
    ce14:	e2855001 	add	r5, r5, #1
    ce18:	e1570005 	cmp	r7, r5
    ce1c:	e0842003 	add	r2, r4, r3
    ce20:	e2833001 	add	r3, r3, #1
    ce24:	e58438c0 	str	r3, [r4, #2240]	@ 0x8c0
    ce28:	e5d230bc 	ldrb	r3, [r2, #188]	@ 0xbc
    ce2c:	e4c63001 	strb	r3, [r6], #1
    ce30:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
    ce34:	e7ea3053 	ubfx	r3, r3, #0, #11
    ce38:	e58438c0 	str	r3, [r4, #2240]	@ 0x8c0
    ce3c:	0a00000c 	beq	ce74 <CSerialDevice::Read(void*, unsigned int)+0xc4>
    ce40:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
    ce44:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
    ce48:	e1520003 	cmp	r2, r3
    ce4c:	1affffef 	bne	ce10 <CSerialDevice::Read(void*, unsigned int)+0x60>
    ce50:	e59830e0 	ldr	r3, [r8, #224]	@ 0xe0
    ce54:	e3530000 	cmp	r3, #0
    ce58:	0a000008 	beq	ce80 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    ce5c:	eb0014ce 	bl	1219c <LeaveCritical>
    ce60:	e1a00005 	mov	r0, r5
    ce64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ce68:	e59458c4 	ldr	r5, [r4, #2244]	@ 0x8c4
    ce6c:	e3a03000 	mov	r3, #0
    ce70:	e58438c4 	str	r3, [r4, #2244]	@ 0x8c4
    ce74:	e59830e0 	ldr	r3, [r8, #224]	@ 0xe0
    ce78:	e3530000 	cmp	r3, #0
    ce7c:	1afffff6 	bne	ce5c <CSerialDevice::Read(void*, unsigned int)+0xac>
    ce80:	e1a00005 	mov	r0, r5
    ce84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ce88:	e3520000 	cmp	r2, #0
    ce8c:	01a05002 	moveq	r5, r2
    ce90:	1a00000a 	bne	cec0 <CSerialDevice::Read(void*, unsigned int)+0x110>
    ce94:	eafffff9 	b	ce80 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    ce98:	e3130b02 	tst	r3, #2048	@ 0x800
    ce9c:	1a00001f 	bne	cf20 <CSerialDevice::Read(void*, unsigned int)+0x170>
    cea0:	e3130c01 	tst	r3, #256	@ 0x100
    cea4:	1a00001f 	bne	cf28 <CSerialDevice::Read(void*, unsigned int)+0x178>
    cea8:	e3130c02 	tst	r3, #512	@ 0x200
    ceac:	1a00001f 	bne	cf30 <CSerialDevice::Read(void*, unsigned int)+0x180>
    ceb0:	e2855001 	add	r5, r5, #1
    ceb4:	e4c63001 	strb	r3, [r6], #1
    ceb8:	e1570005 	cmp	r7, r5
    cebc:	0affffef 	beq	ce80 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    cec0:	e5943014 	ldr	r3, [r4, #20]
    cec4:	e5932018 	ldr	r2, [r3, #24]
    cec8:	e3120010 	tst	r2, #16
    cecc:	1affffeb 	bne	ce80 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    ced0:	e5933000 	ldr	r3, [r3]
    ced4:	e3130b01 	tst	r3, #1024	@ 0x400
    ced8:	0affffee 	beq	ce98 <CSerialDevice::Read(void*, unsigned int)+0xe8>
    cedc:	e3e05000 	mvn	r5, #0
    cee0:	eaffffe6 	b	ce80 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    cee4:	eb001481 	bl	120f0 <EnterCritical>
    cee8:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
    ceec:	e3530000 	cmp	r3, #0
    cef0:	aaffffc1 	bge	cdfc <CSerialDevice::Read(void*, unsigned int)+0x4c>
    cef4:	eaffffdb 	b	ce68 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    cef8:	e3051870 	movw	r1, #22640	@ 0x5870
    cefc:	e3401001 	movt	r1, #1
    cf00:	e3a02d07 	mov	r2, #448	@ 0x1c0
    cf04:	e281000c 	add	r0, r1, #12
    cf08:	eb001690 	bl	12950 <assertion_failed>
    cf0c:	e3051870 	movw	r1, #22640	@ 0x5870
    cf10:	e3401001 	movt	r1, #1
    cf14:	e2810018 	add	r0, r1, #24
    cf18:	e30021c3 	movw	r2, #451	@ 0x1c3
    cf1c:	eb00168b 	bl	12950 <assertion_failed>
    cf20:	e3e05001 	mvn	r5, #1
    cf24:	eaffffd5 	b	ce80 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    cf28:	e3e05002 	mvn	r5, #2
    cf2c:	eaffffd3 	b	ce80 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    cf30:	e3e05003 	mvn	r5, #3
    cf34:	eaffffd1 	b	ce80 <CSerialDevice::Read(void*, unsigned int)+0xd0>

0000cf38 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
    cf38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf3c:	e1a04000 	mov	r4, r0
    cf40:	e284b01c 	add	fp, r4, #28
    cf44:	e24dd00c 	sub	sp, sp, #12
    cf48:	e305a870 	movw	sl, #22640	@ 0x5870
    cf4c:	e340a001 	movt	sl, #1
    cf50:	e1a05001 	mov	r5, r1
    cf54:	e1a06002 	mov	r6, r2
    cf58:	e1a07003 	mov	r7, r3
    cf5c:	eb001937 	bl	13440 <CDevice::CDevice()>
    cf60:	e28a202c 	add	r2, sl, #44	@ 0x2c
    cf64:	e5845008 	str	r5, [r4, #8]
    cf68:	e1a0000b 	mov	r0, fp
    cf6c:	e3a05000 	mov	r5, #0
    cf70:	e5842000 	str	r2, [r4]
    cf74:	e5c4600c 	strb	r6, [r4, #12]
    cf78:	e284906c 	add	r9, r4, #108	@ 0x6c
    cf7c:	e5847010 	str	r7, [r4, #16]
    cf80:	e2848094 	add	r8, r4, #148	@ 0x94
    cf84:	e5845014 	str	r5, [r4, #20]
    cf88:	e2866001 	add	r6, r6, #1
    cf8c:	e5c45018 	strb	r5, [r4, #24]
    cf90:	ebffef5f 	bl	8d14 <CGPIOPin::CGPIOPin()>
    cf94:	e2843044 	add	r3, r4, #68	@ 0x44
    cf98:	e1a00003 	mov	r0, r3
    cf9c:	e58d3004 	str	r3, [sp, #4]
    cfa0:	ebffef5b 	bl	8d14 <CGPIOPin::CGPIOPin()>
    cfa4:	e1a00009 	mov	r0, r9
    cfa8:	ebffef59 	bl	8d14 <CGPIOPin::CGPIOPin()>
    cfac:	e1a00008 	mov	r0, r8
    cfb0:	ebffef57 	bl	8d14 <CGPIOPin::CGPIOPin()>
    cfb4:	e2841a01 	add	r1, r4, #4096	@ 0x1000
    cfb8:	e58458bc 	str	r5, [r4, #2236]	@ 0x8bc
    cfbc:	e3a02001 	mov	r2, #1
    cfc0:	e58458c0 	str	r5, [r4, #2240]	@ 0x8c0
    cfc4:	e58458c4 	str	r5, [r4, #2244]	@ 0x8c4
    cfc8:	e58150c8 	str	r5, [r1, #200]	@ 0xc8
    cfcc:	e58160e0 	str	r6, [r1, #224]	@ 0xe0
    cfd0:	e58150cc 	str	r5, [r1, #204]	@ 0xcc
    cfd4:	e58120d0 	str	r2, [r1, #208]	@ 0xd0
    cfd8:	e58120e4 	str	r2, [r1, #228]	@ 0xe4
    cfdc:	e58150d4 	str	r5, [r1, #212]	@ 0xd4
    cfe0:	e5941010 	ldr	r1, [r4, #16]
    cfe4:	e1510005 	cmp	r1, r5
    cfe8:	1a000025 	bne	d084 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x14c>
    cfec:	e1a05207 	lsl	r5, r7, #4
    cff0:	e08a1005 	add	r1, sl, r5
    cff4:	e5916050 	ldr	r6, [r1, #80]	@ 0x50
    cff8:	e3560035 	cmp	r6, #53	@ 0x35
    cffc:	8a000020 	bhi	d084 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x14c>
    d000:	e3071700 	movw	r1, #30464	@ 0x7700
    d004:	e3401001 	movt	r1, #1
    d008:	e5910000 	ldr	r0, [r1]
    d00c:	e3500000 	cmp	r0, #0
    d010:	1a00002e 	bne	d0d0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x198>
    d014:	e5814000 	str	r4, [r1]
    d018:	e3570000 	cmp	r7, #0
    d01c:	e3a01a01 	mov	r1, #4096	@ 0x1000
    d020:	e3431f20 	movt	r1, #16160	@ 0x3f20
    d024:	e5841014 	str	r1, [r4, #20]
    d028:	0a000018 	beq	d090 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x158>
    d02c:	e08a5005 	add	r5, sl, r5
    d030:	e1a01006 	mov	r1, r6
    d034:	e1a00009 	mov	r0, r9
    d038:	ebffef43 	bl	8d4c <CGPIOPin::AssignPin(unsigned int)>
    d03c:	e3a02001 	mov	r2, #1
    d040:	e5951054 	ldr	r1, [r5, #84]	@ 0x54
    d044:	e1a00009 	mov	r0, r9
    d048:	e2811004 	add	r1, r1, #4
    d04c:	e6ef1071 	uxtb	r1, r1
    d050:	ebfff168 	bl	95f8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d054:	e5951058 	ldr	r1, [r5, #88]	@ 0x58
    d058:	e1a00008 	mov	r0, r8
    d05c:	ebffef3a 	bl	8d4c <CGPIOPin::AssignPin(unsigned int)>
    d060:	e3a02001 	mov	r2, #1
    d064:	e3a01004 	mov	r1, #4
    d068:	e1a00008 	mov	r0, r8
    d06c:	ebfff161 	bl	95f8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d070:	e3a01002 	mov	r1, #2
    d074:	e1a00008 	mov	r0, r8
    d078:	ebfff10a 	bl	94a8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    d07c:	e3a03001 	mov	r3, #1
    d080:	e5c43018 	strb	r3, [r4, #24]
    d084:	e1a00004 	mov	r0, r4
    d088:	e28dd00c 	add	sp, sp, #12
    d08c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d090:	e1a0000b 	mov	r0, fp
    d094:	e3a01020 	mov	r1, #32
    d098:	ebffef2b 	bl	8d4c <CGPIOPin::AssignPin(unsigned int)>
    d09c:	e3a02001 	mov	r2, #1
    d0a0:	e1a01007 	mov	r1, r7
    d0a4:	e1a0000b 	mov	r0, fp
    d0a8:	ebfff152 	bl	95f8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d0ac:	e59db004 	ldr	fp, [sp, #4]
    d0b0:	e3a01021 	mov	r1, #33	@ 0x21
    d0b4:	e1a0000b 	mov	r0, fp
    d0b8:	ebffef23 	bl	8d4c <CGPIOPin::AssignPin(unsigned int)>
    d0bc:	e3a02001 	mov	r2, #1
    d0c0:	e1a01007 	mov	r1, r7
    d0c4:	e1a0000b 	mov	r0, fp
    d0c8:	ebfff14a 	bl	95f8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d0cc:	eaffffd6 	b	d02c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0xf4>
    d0d0:	e3a020b0 	mov	r2, #176	@ 0xb0
    d0d4:	e1a0100a 	mov	r1, sl
    d0d8:	e28a0060 	add	r0, sl, #96	@ 0x60
    d0dc:	eb00161b 	bl	12950 <assertion_failed>

0000d0e0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
    d0e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0e4:	e5d07018 	ldrb	r7, [r0, #24]
    d0e8:	e24dd00c 	sub	sp, sp, #12
    d0ec:	e3570000 	cmp	r7, #0
    d0f0:	e5dd8030 	ldrb	r8, [sp, #48]	@ 0x30
    d0f4:	1a000003 	bne	d108 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x28>
    d0f8:	e3a07000 	mov	r7, #0
    d0fc:	e1a00007 	mov	r0, r7
    d100:	e28dd00c 	add	sp, sp, #12
    d104:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d108:	e1a0a001 	mov	sl, r1
    d10c:	e1a05002 	mov	r5, r2
    d110:	e1a06003 	mov	r6, r3
    d114:	e1a04000 	mov	r4, r0
    d118:	ebfff87f 	bl	b31c <CMachineInfo::Get()>
    d11c:	e3a01002 	mov	r1, #2
    d120:	ebfff795 	bl	af7c <CMachineInfo::GetClockRate(unsigned int) const>
    d124:	e3500000 	cmp	r0, #0
    d128:	0a000083 	beq	d33c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x25c>
    d12c:	e24a2f4b 	sub	r2, sl, #300	@ 0x12c
    d130:	e30037d4 	movw	r3, #2004	@ 0x7d4
    d134:	e340303d 	movt	r3, #61	@ 0x3d
    d138:	e1520003 	cmp	r2, r3
    d13c:	8a000083 	bhi	d350 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x270>
    d140:	e1a0320a 	lsl	r3, sl, #4
    d144:	e30f2ffe 	movw	r2, #65534	@ 0xfffe
    d148:	e739f310 	udiv	r9, r0, r3
    d14c:	e2491001 	sub	r1, r9, #1
    d150:	e1510002 	cmp	r1, r2
    d154:	8a000082 	bhi	d364 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x284>
    d158:	e0600993 	mls	r0, r3, r9, r0
    d15c:	e1a00180 	lsl	r0, r0, #3
    d160:	e731fa10 	udiv	r1, r0, sl
    d164:	e201a001 	and	sl, r1, #1
    d168:	e08aa0a1 	add	sl, sl, r1, lsr #1
    d16c:	e35a003f 	cmp	sl, #63	@ 0x3f
    d170:	8a000080 	bhi	d378 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x298>
    d174:	e5940008 	ldr	r0, [r4, #8]
    d178:	e3500000 	cmp	r0, #0
    d17c:	0a000013 	beq	d1d0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xf0>
    d180:	e307b700 	movw	fp, #30464	@ 0x7700
    d184:	e340b001 	movt	fp, #1
    d188:	e59b3004 	ldr	r3, [fp, #4]
    d18c:	e3530000 	cmp	r3, #0
    d190:	1a00004a 	bne	d2c0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1e0>
    d194:	e5d4200c 	ldrb	r2, [r4, #12]
    d198:	e58b0008 	str	r0, [fp, #8]
    d19c:	e3520000 	cmp	r2, #0
    d1a0:	e5cb200c 	strb	r2, [fp, #12]
    d1a4:	1a000051 	bne	d2f0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x210>
    d1a8:	e1a03002 	mov	r3, r2
    d1ac:	e3a01039 	mov	r1, #57	@ 0x39
    d1b0:	e30d2bc4 	movw	r2, #56260	@ 0xdbc4
    d1b4:	e3402000 	movt	r2, #0
    d1b8:	eb001456 	bl	12318 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    d1bc:	e59b3004 	ldr	r3, [fp, #4]
    d1c0:	e3530000 	cmp	r3, #0
    d1c4:	1a000052 	bne	d314 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x234>
    d1c8:	e3a03001 	mov	r3, #1
    d1cc:	e58b3004 	str	r3, [fp, #4]
    d1d0:	e5943014 	ldr	r3, [r4, #20]
    d1d4:	e3a02000 	mov	r2, #0
    d1d8:	e5832038 	str	r2, [r3, #56]	@ 0x38
    d1dc:	e2453005 	sub	r3, r5, #5
    d1e0:	e3530003 	cmp	r3, #3
    d1e4:	e30027ff 	movw	r2, #2047	@ 0x7ff
    d1e8:	e5943014 	ldr	r3, [r4, #20]
    d1ec:	e5832044 	str	r2, [r3, #68]	@ 0x44
    d1f0:	e5943014 	ldr	r3, [r4, #20]
    d1f4:	e5839024 	str	r9, [r3, #36]	@ 0x24
    d1f8:	e5943014 	ldr	r3, [r4, #20]
    d1fc:	e583a028 	str	sl, [r3, #40]	@ 0x28
    d200:	8a000066 	bhi	d3a0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2c0>
    d204:	e1a05285 	lsl	r5, r5, #5
    d208:	e2463001 	sub	r3, r6, #1
    d20c:	e2455090 	sub	r5, r5, #144	@ 0x90
    d210:	e3530001 	cmp	r3, #1
    d214:	8a000043 	bhi	d328 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x248>
    d218:	e3560002 	cmp	r6, #2
    d21c:	03855008 	orreq	r5, r5, #8
    d220:	e3580001 	cmp	r8, #1
    d224:	0a00002f 	beq	d2e8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x208>
    d228:	e3580002 	cmp	r8, #2
    d22c:	0a00002b 	beq	d2e0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x200>
    d230:	e3580000 	cmp	r8, #0
    d234:	1a000054 	bne	d38c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2ac>
    d238:	e5942014 	ldr	r2, [r4, #20]
    d23c:	e5943008 	ldr	r3, [r4, #8]
    d240:	e3530000 	cmp	r3, #0
    d244:	0582502c 	streq	r5, [r2, #44]	@ 0x2c
    d248:	0a00000e 	beq	d288 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1a8>
    d24c:	e3a03009 	mov	r3, #9
    d250:	e5823034 	str	r3, [r2, #52]	@ 0x34
    d254:	e3073700 	movw	r3, #30464	@ 0x7700
    d258:	e3403001 	movt	r3, #1
    d25c:	e5942014 	ldr	r2, [r4, #20]
    d260:	e3a01e45 	mov	r1, #1104	@ 0x450
    d264:	e3a00001 	mov	r0, #1
    d268:	e582502c 	str	r5, [r2, #44]	@ 0x2c
    d26c:	e5942014 	ldr	r2, [r4, #20]
    d270:	e5821038 	str	r1, [r2, #56]	@ 0x38
    d274:	e5932010 	ldr	r2, [r3, #16]
    d278:	e5941010 	ldr	r1, [r4, #16]
    d27c:	e1822110 	orr	r2, r2, r0, lsl r1
    d280:	e5832010 	str	r2, [r3, #16]
    d284:	f57ff04f 	dsb	sy
    d288:	e5943014 	ldr	r3, [r4, #20]
    d28c:	e3002301 	movw	r2, #769	@ 0x301
    d290:	e5832030 	str	r2, [r3, #48]	@ 0x30
    d294:	ebffedfc 	bl	8a8c <CDeviceNameService::Get()>
    d298:	e5942010 	ldr	r2, [r4, #16]
    d29c:	e3a01000 	mov	r1, #0
    d2a0:	e1a03004 	mov	r3, r4
    d2a4:	e58d1000 	str	r1, [sp]
    d2a8:	e2822001 	add	r2, r2, #1
    d2ac:	e59f1100 	ldr	r1, [pc, #256]	@ d3b4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
    d2b0:	ebffee01 	bl	8abc <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    d2b4:	e1a00007 	mov	r0, r7
    d2b8:	e28dd00c 	add	sp, sp, #12
    d2bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2c0:	e59b3008 	ldr	r3, [fp, #8]
    d2c4:	e1500003 	cmp	r0, r3
    d2c8:	0a00000d 	beq	d304 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x224>
    d2cc:	e5942010 	ldr	r2, [r4, #16]
    d2d0:	e3a03000 	mov	r3, #0
    d2d4:	e5c43018 	strb	r3, [r4, #24]
    d2d8:	e78b3102 	str	r3, [fp, r2, lsl #2]
    d2dc:	eaffff85 	b	d0f8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x18>
    d2e0:	e3855006 	orr	r5, r5, #6
    d2e4:	eaffffd3 	b	d238 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x158>
    d2e8:	e3855002 	orr	r5, r5, #2
    d2ec:	eaffffd1 	b	d238 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x158>
    d2f0:	e3a01039 	mov	r1, #57	@ 0x39
    d2f4:	e30d2bc4 	movw	r2, #56260	@ 0xdbc4
    d2f8:	e3402000 	movt	r2, #0
    d2fc:	eb00146c 	bl	124b4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    d300:	eaffffad 	b	d1bc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xdc>
    d304:	e5d4200c 	ldrb	r2, [r4, #12]
    d308:	e5db300c 	ldrb	r3, [fp, #12]
    d30c:	e1520003 	cmp	r2, r3
    d310:	1affffed 	bne	d2cc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1ec>
    d314:	e3051870 	movw	r1, #22640	@ 0x5870
    d318:	e3401001 	movt	r1, #1
    d31c:	e28100ec 	add	r0, r1, #236	@ 0xec
    d320:	e300212a 	movw	r2, #298	@ 0x12a
    d324:	eb001589 	bl	12950 <assertion_failed>
    d328:	e3051870 	movw	r1, #22640	@ 0x5870
    d32c:	e3401001 	movt	r1, #1
    d330:	e2810f46 	add	r0, r1, #280	@ 0x118
    d334:	e3002143 	movw	r2, #323	@ 0x143
    d338:	eb001584 	bl	12950 <assertion_failed>
    d33c:	e3051870 	movw	r1, #22640	@ 0x5870
    d340:	e3401001 	movt	r1, #1
    d344:	e3a02c01 	mov	r2, #256	@ 0x100
    d348:	e2810078 	add	r0, r1, #120	@ 0x78
    d34c:	eb00157f 	bl	12950 <assertion_failed>
    d350:	e3051870 	movw	r1, #22640	@ 0x5870
    d354:	e3401001 	movt	r1, #1
    d358:	e2810088 	add	r0, r1, #136	@ 0x88
    d35c:	e3002102 	movw	r2, #258	@ 0x102
    d360:	eb00157a 	bl	12950 <assertion_failed>
    d364:	e3051870 	movw	r1, #22640	@ 0x5870
    d368:	e3401001 	movt	r1, #1
    d36c:	e28100b4 	add	r0, r1, #180	@ 0xb4
    d370:	e3002105 	movw	r2, #261	@ 0x105
    d374:	eb001575 	bl	12950 <assertion_failed>
    d378:	e3051870 	movw	r1, #22640	@ 0x5870
    d37c:	e3401001 	movt	r1, #1
    d380:	e3a02f42 	mov	r2, #264	@ 0x108
    d384:	e28100d8 	add	r0, r1, #216	@ 0xd8
    d388:	eb001570 	bl	12950 <assertion_failed>
    d38c:	e3051870 	movw	r1, #22640	@ 0x5870
    d390:	e3401001 	movt	r1, #1
    d394:	e2810f45 	add	r0, r1, #276	@ 0x114
    d398:	e3002157 	movw	r2, #343	@ 0x157
    d39c:	eb00156b 	bl	12950 <assertion_failed>
    d3a0:	e3051870 	movw	r1, #22640	@ 0x5870
    d3a4:	e3401001 	movt	r1, #1
    d3a8:	e2810f45 	add	r0, r1, #276	@ 0x114
    d3ac:	e300213f 	movw	r2, #319	@ 0x13f
    d3b0:	eb001566 	bl	12950 <assertion_failed>
    d3b4:	000159ac 	.word	0x000159ac

0000d3b8 <CSerialDevice::GetOptions() const>:
    d3b8:	e2800a01 	add	r0, r0, #4096	@ 0x1000
    d3bc:	e59000d0 	ldr	r0, [r0, #208]	@ 0xd0
    d3c0:	e12fff1e 	bx	lr

0000d3c4 <CSerialDevice::SetOptions(unsigned int)>:
    d3c4:	e2800a01 	add	r0, r0, #4096	@ 0x1000
    d3c8:	e58010d0 	str	r1, [r0, #208]	@ 0xd0
    d3cc:	e12fff1e 	bx	lr

0000d3d0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    d3d0:	e5903008 	ldr	r3, [r0, #8]
    d3d4:	e92d4010 	push	{r4, lr}
    d3d8:	e3530000 	cmp	r3, #0
    d3dc:	0a00000e 	beq	d41c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
    d3e0:	e2800a01 	add	r0, r0, #4096	@ 0x1000
    d3e4:	e59030d4 	ldr	r3, [r0, #212]	@ 0xd4
    d3e8:	e3530000 	cmp	r3, #0
    d3ec:	1a00000f 	bne	d430 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x60>
    d3f0:	e3510000 	cmp	r1, #0
    d3f4:	0a000012 	beq	d444 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x74>
    d3f8:	e1d130d0 	ldrsb	r3, [r1]
    d3fc:	e3530000 	cmp	r3, #0
    d400:	0a000014 	beq	d458 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x88>
    d404:	e3520000 	cmp	r2, #0
    d408:	0a000017 	beq	d46c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    d40c:	e58020dc 	str	r2, [r0, #220]	@ 0xdc
    d410:	e58010d8 	str	r1, [r0, #216]	@ 0xd8
    d414:	e58010d4 	str	r1, [r0, #212]	@ 0xd4
    d418:	e8bd8010 	pop	{r4, pc}
    d41c:	e3051870 	movw	r1, #22640	@ 0x5870
    d420:	e3401001 	movt	r1, #1
    d424:	e3a02e22 	mov	r2, #544	@ 0x220
    d428:	e2810f51 	add	r0, r1, #324	@ 0x144
    d42c:	eb001547 	bl	12950 <assertion_failed>
    d430:	e3051870 	movw	r1, #22640	@ 0x5870
    d434:	e3401001 	movt	r1, #1
    d438:	e2810f57 	add	r0, r1, #348	@ 0x15c
    d43c:	e3002221 	movw	r2, #545	@ 0x221
    d440:	eb001542 	bl	12950 <assertion_failed>
    d444:	e3051870 	movw	r1, #22640	@ 0x5870
    d448:	e3401001 	movt	r1, #1
    d44c:	e2810f5b 	add	r0, r1, #364	@ 0x16c
    d450:	e3002223 	movw	r2, #547	@ 0x223
    d454:	eb00153d 	bl	12950 <assertion_failed>
    d458:	e3051870 	movw	r1, #22640	@ 0x5870
    d45c:	e3401001 	movt	r1, #1
    d460:	e3a02f89 	mov	r2, #548	@ 0x224
    d464:	e2810f5e 	add	r0, r1, #376	@ 0x178
    d468:	eb001538 	bl	12950 <assertion_failed>
    d46c:	e3051870 	movw	r1, #22640	@ 0x5870
    d470:	e3401001 	movt	r1, #1
    d474:	e2810f62 	add	r0, r1, #392	@ 0x188
    d478:	e3002225 	movw	r2, #549	@ 0x225
    d47c:	eb001533 	bl	12950 <assertion_failed>

0000d480 <CSerialDevice::AvailableForWrite()>:
    d480:	e5d03018 	ldrb	r3, [r0, #24]
    d484:	e92d4010 	push	{r4, lr}
    d488:	e3530000 	cmp	r3, #0
    d48c:	0a000019 	beq	d4f8 <CSerialDevice::AvailableForWrite()+0x78>
    d490:	e5903008 	ldr	r3, [r0, #8]
    d494:	e3530000 	cmp	r3, #0
    d498:	0a00001b 	beq	d50c <CSerialDevice::AvailableForWrite()+0x8c>
    d49c:	e2804a01 	add	r4, r0, #4096	@ 0x1000
    d4a0:	e59400e0 	ldr	r0, [r4, #224]	@ 0xe0
    d4a4:	e3500000 	cmp	r0, #0
    d4a8:	1a00000c 	bne	d4e0 <CSerialDevice::AvailableForWrite()+0x60>
    d4ac:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
    d4b0:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
    d4b4:	e1520003 	cmp	r2, r3
    d4b8:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
    d4bc:	e59420c8 	ldr	r2, [r4, #200]	@ 0xc8
    d4c0:	92834e7f 	addls	r4, r3, #2032	@ 0x7f0
    d4c4:	82434001 	subhi	r4, r3, #1
    d4c8:	9284400f 	addls	r4, r4, #15
    d4cc:	e3500000 	cmp	r0, #0
    d4d0:	e0444002 	sub	r4, r4, r2
    d4d4:	1a000004 	bne	d4ec <CSerialDevice::AvailableForWrite()+0x6c>
    d4d8:	e1a00004 	mov	r0, r4
    d4dc:	e8bd8010 	pop	{r4, pc}
    d4e0:	eb001302 	bl	120f0 <EnterCritical>
    d4e4:	e59400e0 	ldr	r0, [r4, #224]	@ 0xe0
    d4e8:	eaffffef 	b	d4ac <CSerialDevice::AvailableForWrite()+0x2c>
    d4ec:	eb00132a 	bl	1219c <LeaveCritical>
    d4f0:	e1a00004 	mov	r0, r4
    d4f4:	e8bd8010 	pop	{r4, pc}
    d4f8:	e3051870 	movw	r1, #22640	@ 0x5870
    d4fc:	e3401001 	movt	r1, #1
    d500:	e281000c 	add	r0, r1, #12
    d504:	e300222f 	movw	r2, #559	@ 0x22f
    d508:	eb001510 	bl	12950 <assertion_failed>
    d50c:	e3051870 	movw	r1, #22640	@ 0x5870
    d510:	e3401001 	movt	r1, #1
    d514:	e3a02e23 	mov	r2, #560	@ 0x230
    d518:	e2810f51 	add	r0, r1, #324	@ 0x144
    d51c:	eb00150b 	bl	12950 <assertion_failed>

0000d520 <CSerialDevice::AvailableForRead()>:
    d520:	e5d03018 	ldrb	r3, [r0, #24]
    d524:	e92d4070 	push	{r4, r5, r6, lr}
    d528:	e3530000 	cmp	r3, #0
    d52c:	0a000019 	beq	d598 <CSerialDevice::AvailableForRead()+0x78>
    d530:	e5903008 	ldr	r3, [r0, #8]
    d534:	e1a04000 	mov	r4, r0
    d538:	e3530000 	cmp	r3, #0
    d53c:	0a00001a 	beq	d5ac <CSerialDevice::AvailableForRead()+0x8c>
    d540:	e2805a01 	add	r5, r0, #4096	@ 0x1000
    d544:	e59500e0 	ldr	r0, [r5, #224]	@ 0xe0
    d548:	e3500000 	cmp	r0, #0
    d54c:	1a00000b 	bne	d580 <CSerialDevice::AvailableForRead()+0x60>
    d550:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
    d554:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
    d558:	e1520003 	cmp	r2, r3
    d55c:	e59438bc 	ldr	r3, [r4, #2236]	@ 0x8bc
    d560:	e59428c0 	ldr	r2, [r4, #2240]	@ 0x8c0
    d564:	32834b02 	addcc	r4, r3, #2048	@ 0x800
    d568:	30444002 	subcc	r4, r4, r2
    d56c:	20434002 	subcs	r4, r3, r2
    d570:	e3500000 	cmp	r0, #0
    d574:	1a000004 	bne	d58c <CSerialDevice::AvailableForRead()+0x6c>
    d578:	e1a00004 	mov	r0, r4
    d57c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d580:	eb0012da 	bl	120f0 <EnterCritical>
    d584:	e59500e0 	ldr	r0, [r5, #224]	@ 0xe0
    d588:	eafffff0 	b	d550 <CSerialDevice::AvailableForRead()+0x30>
    d58c:	eb001302 	bl	1219c <LeaveCritical>
    d590:	e1a00004 	mov	r0, r4
    d594:	e8bd8070 	pop	{r4, r5, r6, pc}
    d598:	e3051870 	movw	r1, #22640	@ 0x5870
    d59c:	e3401001 	movt	r1, #1
    d5a0:	e281000c 	add	r0, r1, #12
    d5a4:	e3002245 	movw	r2, #581	@ 0x245
    d5a8:	eb0014e8 	bl	12950 <assertion_failed>
    d5ac:	e3051870 	movw	r1, #22640	@ 0x5870
    d5b0:	e3401001 	movt	r1, #1
    d5b4:	e2810f51 	add	r0, r1, #324	@ 0x144
    d5b8:	e3002246 	movw	r2, #582	@ 0x246
    d5bc:	eb0014e3 	bl	12950 <assertion_failed>

0000d5c0 <CSerialDevice::Peek()>:
    d5c0:	e5d03018 	ldrb	r3, [r0, #24]
    d5c4:	e92d4070 	push	{r4, r5, r6, lr}
    d5c8:	e3530000 	cmp	r3, #0
    d5cc:	0a00001f 	beq	d650 <CSerialDevice::Peek()+0x90>
    d5d0:	e5903008 	ldr	r3, [r0, #8]
    d5d4:	e1a04000 	mov	r4, r0
    d5d8:	e3530000 	cmp	r3, #0
    d5dc:	0a000020 	beq	d664 <CSerialDevice::Peek()+0xa4>
    d5e0:	e2805a01 	add	r5, r0, #4096	@ 0x1000
    d5e4:	e59500e0 	ldr	r0, [r5, #224]	@ 0xe0
    d5e8:	e3500000 	cmp	r0, #0
    d5ec:	1a000008 	bne	d614 <CSerialDevice::Peek()+0x54>
    d5f0:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
    d5f4:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
    d5f8:	e1520003 	cmp	r2, r3
    d5fc:	0a00001d 	beq	d678 <CSerialDevice::Peek()+0xb8>
    d600:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
    d604:	e0844003 	add	r4, r4, r3
    d608:	e5d440bc 	ldrb	r4, [r4, #188]	@ 0xbc
    d60c:	e1a00004 	mov	r0, r4
    d610:	e8bd8070 	pop	{r4, r5, r6, pc}
    d614:	eb0012b5 	bl	120f0 <EnterCritical>
    d618:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
    d61c:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
    d620:	e1520003 	cmp	r2, r3
    d624:	03e04000 	mvneq	r4, #0
    d628:	159438c0 	ldrne	r3, [r4, #2240]	@ 0x8c0
    d62c:	059520e0 	ldreq	r2, [r5, #224]	@ 0xe0
    d630:	10843003 	addne	r3, r4, r3
    d634:	159520e0 	ldrne	r2, [r5, #224]	@ 0xe0
    d638:	15d340bc 	ldrbne	r4, [r3, #188]	@ 0xbc
    d63c:	e3520000 	cmp	r2, #0
    d640:	0afffff1 	beq	d60c <CSerialDevice::Peek()+0x4c>
    d644:	eb0012d4 	bl	1219c <LeaveCritical>
    d648:	e1a00004 	mov	r0, r4
    d64c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d650:	e3051870 	movw	r1, #22640	@ 0x5870
    d654:	e3401001 	movt	r1, #1
    d658:	e281000c 	add	r0, r1, #12
    d65c:	e300225b 	movw	r2, #603	@ 0x25b
    d660:	eb0014ba 	bl	12950 <assertion_failed>
    d664:	e3051870 	movw	r1, #22640	@ 0x5870
    d668:	e3401001 	movt	r1, #1
    d66c:	e3a02f97 	mov	r2, #604	@ 0x25c
    d670:	e2810f51 	add	r0, r1, #324	@ 0x144
    d674:	eb0014b5 	bl	12950 <assertion_failed>
    d678:	e3e04000 	mvn	r4, #0
    d67c:	eaffffe2 	b	d60c <CSerialDevice::Peek()+0x4c>

0000d680 <CSerialDevice::Flush()>:
    d680:	e5902014 	ldr	r2, [r0, #20]
    d684:	e2822018 	add	r2, r2, #24
    d688:	e5923000 	ldr	r3, [r2]
    d68c:	e3130008 	tst	r3, #8
    d690:	1afffffc 	bne	d688 <CSerialDevice::Flush()+0x8>
    d694:	e12fff1e 	bx	lr

0000d698 <CSerialDevice::Write(unsigned char)>:
    d698:	e5903008 	ldr	r3, [r0, #8]
    d69c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d6a0:	e1a04000 	mov	r4, r0
    d6a4:	e1a05001 	mov	r5, r1
    d6a8:	e3530000 	cmp	r3, #0
    d6ac:	0a000021 	beq	d738 <CSerialDevice::Write(unsigned char)+0xa0>
    d6b0:	e2806a01 	add	r6, r0, #4096	@ 0x1000
    d6b4:	e59600e0 	ldr	r0, [r6, #224]	@ 0xe0
    d6b8:	e3500000 	cmp	r0, #0
    d6bc:	1a000013 	bne	d710 <CSerialDevice::Write(unsigned char)+0x78>
    d6c0:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
    d6c4:	e59610cc 	ldr	r1, [r6, #204]	@ 0xcc
    d6c8:	e2833001 	add	r3, r3, #1
    d6cc:	e7ea3053 	ubfx	r3, r3, #0, #11
    d6d0:	e1530001 	cmp	r3, r1
    d6d4:	0a000020 	beq	d75c <CSerialDevice::Write(unsigned char)+0xc4>
    d6d8:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
    d6dc:	e3a07001 	mov	r7, #1
    d6e0:	e0844003 	add	r4, r4, r3
    d6e4:	e2833001 	add	r3, r3, #1
    d6e8:	e58630c8 	str	r3, [r6, #200]	@ 0xc8
    d6ec:	e5c458c8 	strb	r5, [r4, #2248]	@ 0x8c8
    d6f0:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
    d6f4:	e7ea3053 	ubfx	r3, r3, #0, #11
    d6f8:	e58630c8 	str	r3, [r6, #200]	@ 0xc8
    d6fc:	e3500000 	cmp	r0, #0
    d700:	0a000000 	beq	d708 <CSerialDevice::Write(unsigned char)+0x70>
    d704:	eb0012a4 	bl	1219c <LeaveCritical>
    d708:	e1a00007 	mov	r0, r7
    d70c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d710:	eb001276 	bl	120f0 <EnterCritical>
    d714:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
    d718:	e59620cc 	ldr	r2, [r6, #204]	@ 0xcc
    d71c:	e2833001 	add	r3, r3, #1
    d720:	e59600e0 	ldr	r0, [r6, #224]	@ 0xe0
    d724:	e7ea3053 	ubfx	r3, r3, #0, #11
    d728:	e1530002 	cmp	r3, r2
    d72c:	03a07000 	moveq	r7, #0
    d730:	1affffe8 	bne	d6d8 <CSerialDevice::Write(unsigned char)+0x40>
    d734:	eafffff0 	b	d6fc <CSerialDevice::Write(unsigned char)+0x64>
    d738:	e5901014 	ldr	r1, [r0, #20]
    d73c:	e2812018 	add	r2, r1, #24
    d740:	e5923000 	ldr	r3, [r2]
    d744:	e3130020 	tst	r3, #32
    d748:	1afffffc 	bne	d740 <CSerialDevice::Write(unsigned char)+0xa8>
    d74c:	e3a07001 	mov	r7, #1
    d750:	e5815000 	str	r5, [r1]
    d754:	e1a00007 	mov	r0, r7
    d758:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d75c:	e1a07000 	mov	r7, r0
    d760:	e1a00007 	mov	r0, r7
    d764:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d768 <CSerialDevice::Write(void const*, unsigned int)>:
    d768:	e5d03018 	ldrb	r3, [r0, #24]
    d76c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d770:	e3530000 	cmp	r3, #0
    d774:	0a00008a 	beq	d9a4 <CSerialDevice::Write(void const*, unsigned int)+0x23c>
    d778:	e2804a01 	add	r4, r0, #4096	@ 0x1000
    d77c:	e1a06000 	mov	r6, r0
    d780:	e1a05001 	mov	r5, r1
    d784:	e1a08002 	mov	r8, r2
    d788:	e59400e4 	ldr	r0, [r4, #228]	@ 0xe4
    d78c:	e3500000 	cmp	r0, #0
    d790:	1a000078 	bne	d978 <CSerialDevice::Write(void const*, unsigned int)+0x210>
    d794:	e3550000 	cmp	r5, #0
    d798:	0a000086 	beq	d9b8 <CSerialDevice::Write(void const*, unsigned int)+0x250>
    d79c:	e3580000 	cmp	r8, #0
    d7a0:	01a07008 	moveq	r7, r8
    d7a4:	0a000025 	beq	d840 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
    d7a8:	e2455001 	sub	r5, r5, #1
    d7ac:	e3a07000 	mov	r7, #0
    d7b0:	ea000002 	b	d7c0 <CSerialDevice::Write(void const*, unsigned int)+0x58>
    d7b4:	e2877001 	add	r7, r7, #1
    d7b8:	e1570008 	cmp	r7, r8
    d7bc:	0a00001f 	beq	d840 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
    d7c0:	e5963008 	ldr	r3, [r6, #8]
    d7c4:	e5f59001 	ldrb	r9, [r5, #1]!
    d7c8:	e3530000 	cmp	r3, #0
    d7cc:	0a000046 	beq	d8ec <CSerialDevice::Write(void const*, unsigned int)+0x184>
    d7d0:	e59400e0 	ldr	r0, [r4, #224]	@ 0xe0
    d7d4:	e3500000 	cmp	r0, #0
    d7d8:	1a00004a 	bne	d908 <CSerialDevice::Write(void const*, unsigned int)+0x1a0>
    d7dc:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
    d7e0:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
    d7e4:	e2833001 	add	r3, r3, #1
    d7e8:	e7ea3053 	ubfx	r3, r3, #0, #11
    d7ec:	e1520003 	cmp	r2, r3
    d7f0:	0a000012 	beq	d840 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
    d7f4:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
    d7f8:	e0862003 	add	r2, r6, r3
    d7fc:	e2833001 	add	r3, r3, #1
    d800:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
    d804:	e5c298c8 	strb	r9, [r2, #2248]	@ 0x8c8
    d808:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
    d80c:	e7ea3053 	ubfx	r3, r3, #0, #11
    d810:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
    d814:	e5d53000 	ldrb	r3, [r5]
    d818:	e353000a 	cmp	r3, #10
    d81c:	1affffe4 	bne	d7b4 <CSerialDevice::Write(void const*, unsigned int)+0x4c>
    d820:	e59430d0 	ldr	r3, [r4, #208]	@ 0xd0
    d824:	e3130001 	tst	r3, #1
    d828:	0affffe1 	beq	d7b4 <CSerialDevice::Write(void const*, unsigned int)+0x4c>
    d82c:	e3a0100d 	mov	r1, #13
    d830:	e1a00006 	mov	r0, r6
    d834:	ebffff97 	bl	d698 <CSerialDevice::Write(unsigned char)>
    d838:	e3500000 	cmp	r0, #0
    d83c:	1affffdc 	bne	d7b4 <CSerialDevice::Write(void const*, unsigned int)+0x4c>
    d840:	e59430e4 	ldr	r3, [r4, #228]	@ 0xe4
    d844:	e3530000 	cmp	r3, #0
    d848:	1a000048 	bne	d970 <CSerialDevice::Write(void const*, unsigned int)+0x208>
    d84c:	e5963008 	ldr	r3, [r6, #8]
    d850:	e3530000 	cmp	r3, #0
    d854:	0a000022 	beq	d8e4 <CSerialDevice::Write(void const*, unsigned int)+0x17c>
    d858:	e59400e0 	ldr	r0, [r4, #224]	@ 0xe0
    d85c:	e3500000 	cmp	r0, #0
    d860:	1a000049 	bne	d98c <CSerialDevice::Write(void const*, unsigned int)+0x224>
    d864:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
    d868:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
    d86c:	e1520003 	cmp	r2, r3
    d870:	0a00001b 	beq	d8e4 <CSerialDevice::Write(void const*, unsigned int)+0x17c>
    d874:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
    d878:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
    d87c:	e1520003 	cmp	r2, r3
    d880:	1a00000d 	bne	d8bc <CSerialDevice::Write(void const*, unsigned int)+0x154>
    d884:	ea000013 	b	d8d8 <CSerialDevice::Write(void const*, unsigned int)+0x170>
    d888:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
    d88c:	e0861003 	add	r1, r6, r3
    d890:	e2833001 	add	r3, r3, #1
    d894:	e58430cc 	str	r3, [r4, #204]	@ 0xcc
    d898:	e5d138c8 	ldrb	r3, [r1, #2248]	@ 0x8c8
    d89c:	e5823000 	str	r3, [r2]
    d8a0:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
    d8a4:	e7ea3053 	ubfx	r3, r3, #0, #11
    d8a8:	e58430cc 	str	r3, [r4, #204]	@ 0xcc
    d8ac:	e59420c8 	ldr	r2, [r4, #200]	@ 0xc8
    d8b0:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
    d8b4:	e1520003 	cmp	r2, r3
    d8b8:	0a000006 	beq	d8d8 <CSerialDevice::Write(void const*, unsigned int)+0x170>
    d8bc:	e5962014 	ldr	r2, [r6, #20]
    d8c0:	e5923018 	ldr	r3, [r2, #24]
    d8c4:	e3130020 	tst	r3, #32
    d8c8:	0affffee 	beq	d888 <CSerialDevice::Write(void const*, unsigned int)+0x120>
    d8cc:	e5923038 	ldr	r3, [r2, #56]	@ 0x38
    d8d0:	e3833020 	orr	r3, r3, #32
    d8d4:	e5823038 	str	r3, [r2, #56]	@ 0x38
    d8d8:	e59430e0 	ldr	r3, [r4, #224]	@ 0xe0
    d8dc:	e3530000 	cmp	r3, #0
    d8e0:	1a000026 	bne	d980 <CSerialDevice::Write(void const*, unsigned int)+0x218>
    d8e4:	e1a00007 	mov	r0, r7
    d8e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d8ec:	e5962014 	ldr	r2, [r6, #20]
    d8f0:	e2821018 	add	r1, r2, #24
    d8f4:	e5913000 	ldr	r3, [r1]
    d8f8:	e3130020 	tst	r3, #32
    d8fc:	1afffffc 	bne	d8f4 <CSerialDevice::Write(void const*, unsigned int)+0x18c>
    d900:	e5829000 	str	r9, [r2]
    d904:	eaffffc2 	b	d814 <CSerialDevice::Write(void const*, unsigned int)+0xac>
    d908:	eb0011f8 	bl	120f0 <EnterCritical>
    d90c:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
    d910:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
    d914:	e2833001 	add	r3, r3, #1
    d918:	e59400e0 	ldr	r0, [r4, #224]	@ 0xe0
    d91c:	e7ea3053 	ubfx	r3, r3, #0, #11
    d920:	e1530002 	cmp	r3, r2
    d924:	0a00000b 	beq	d958 <CSerialDevice::Write(void const*, unsigned int)+0x1f0>
    d928:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
    d92c:	e3500000 	cmp	r0, #0
    d930:	e2832001 	add	r2, r3, #1
    d934:	e0863003 	add	r3, r6, r3
    d938:	e58420c8 	str	r2, [r4, #200]	@ 0xc8
    d93c:	e5c398c8 	strb	r9, [r3, #2248]	@ 0x8c8
    d940:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
    d944:	e7ea3053 	ubfx	r3, r3, #0, #11
    d948:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
    d94c:	0affffb0 	beq	d814 <CSerialDevice::Write(void const*, unsigned int)+0xac>
    d950:	eb001211 	bl	1219c <LeaveCritical>
    d954:	eaffffae 	b	d814 <CSerialDevice::Write(void const*, unsigned int)+0xac>
    d958:	e3500000 	cmp	r0, #0
    d95c:	0affffb7 	beq	d840 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
    d960:	eb00120d 	bl	1219c <LeaveCritical>
    d964:	e59430e4 	ldr	r3, [r4, #228]	@ 0xe4
    d968:	e3530000 	cmp	r3, #0
    d96c:	0affffb6 	beq	d84c <CSerialDevice::Write(void const*, unsigned int)+0xe4>
    d970:	eb001209 	bl	1219c <LeaveCritical>
    d974:	eaffffb4 	b	d84c <CSerialDevice::Write(void const*, unsigned int)+0xe4>
    d978:	eb0011dc 	bl	120f0 <EnterCritical>
    d97c:	eaffff84 	b	d794 <CSerialDevice::Write(void const*, unsigned int)+0x2c>
    d980:	eb001205 	bl	1219c <LeaveCritical>
    d984:	e1a00007 	mov	r0, r7
    d988:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d98c:	eb0011d7 	bl	120f0 <EnterCritical>
    d990:	e59420c8 	ldr	r2, [r4, #200]	@ 0xc8
    d994:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
    d998:	e1520003 	cmp	r2, r3
    d99c:	1affffb4 	bne	d874 <CSerialDevice::Write(void const*, unsigned int)+0x10c>
    d9a0:	eaffffcc 	b	d8d8 <CSerialDevice::Write(void const*, unsigned int)+0x170>
    d9a4:	e3051870 	movw	r1, #22640	@ 0x5870
    d9a8:	e3401001 	movt	r1, #1
    d9ac:	e281000c 	add	r0, r1, #12
    d9b0:	e3002176 	movw	r2, #374	@ 0x176
    d9b4:	eb0013e5 	bl	12950 <assertion_failed>
    d9b8:	e3051870 	movw	r1, #22640	@ 0x5870
    d9bc:	e3401001 	movt	r1, #1
    d9c0:	e2810018 	add	r0, r1, #24
    d9c4:	e3002183 	movw	r2, #387	@ 0x183
    d9c8:	eb0013e0 	bl	12950 <assertion_failed>

0000d9cc <CSerialDevice::InterruptHandler()>:
    d9cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d9d0:	e2805a01 	add	r5, r0, #4096	@ 0x1000
    d9d4:	e1a04000 	mov	r4, r0
    d9d8:	e59500e0 	ldr	r0, [r5, #224]	@ 0xe0
    d9dc:	e3500000 	cmp	r0, #0
    d9e0:	1a000069 	bne	db8c <CSerialDevice::InterruptHandler()+0x1c0>
    d9e4:	e5943014 	ldr	r3, [r4, #20]
    d9e8:	e5932040 	ldr	r2, [r3, #64]	@ 0x40
    d9ec:	e5832044 	str	r2, [r3, #68]	@ 0x44
    d9f0:	e5942014 	ldr	r2, [r4, #20]
    d9f4:	e282c018 	add	ip, r2, #24
    d9f8:	e5926018 	ldr	r6, [r2, #24]
    d9fc:	e2166010 	ands	r6, r6, #16
    da00:	1a000067 	bne	dba4 <CSerialDevice::InterruptHandler()+0x1d8>
    da04:	e59500d4 	ldr	r0, [r5, #212]	@ 0xd4
    da08:	e3e0e001 	mvn	lr, #1
    da0c:	e3e07000 	mvn	r7, #0
    da10:	ea000020 	b	da98 <CSerialDevice::InterruptHandler()+0xcc>
    da14:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
    da18:	e3530000 	cmp	r3, #0
    da1c:	058478c4 	streq	r7, [r4, #2244]	@ 0x8c4
    da20:	e3500000 	cmp	r0, #0
    da24:	0a00000a 	beq	da54 <CSerialDevice::InterruptHandler()+0x88>
    da28:	e59580d8 	ldr	r8, [r5, #216]	@ 0xd8
    da2c:	e6af3071 	sxtb	r3, r1
    da30:	e1d890d0 	ldrsb	r9, [r8]
    da34:	e1590003 	cmp	r9, r3
    da38:	158500d8 	strne	r0, [r5, #216]	@ 0xd8
    da3c:	1a000004 	bne	da54 <CSerialDevice::InterruptHandler()+0x88>
    da40:	e2883001 	add	r3, r8, #1
    da44:	e58530d8 	str	r3, [r5, #216]	@ 0xd8
    da48:	e1d830d1 	ldrsb	r3, [r8, #1]
    da4c:	e3530000 	cmp	r3, #0
    da50:	03a06001 	moveq	r6, #1
    da54:	e59438bc 	ldr	r3, [r4, #2236]	@ 0x8bc
    da58:	e59488c0 	ldr	r8, [r4, #2240]	@ 0x8c0
    da5c:	e2833001 	add	r3, r3, #1
    da60:	e7ea3053 	ubfx	r3, r3, #0, #11
    da64:	e1530008 	cmp	r3, r8
    da68:	0a000013 	beq	dabc <CSerialDevice::InterruptHandler()+0xf0>
    da6c:	e59438bc 	ldr	r3, [r4, #2236]	@ 0x8bc
    da70:	e0848003 	add	r8, r4, r3
    da74:	e2833001 	add	r3, r3, #1
    da78:	e58438bc 	str	r3, [r4, #2236]	@ 0x8bc
    da7c:	e5c810bc 	strb	r1, [r8, #188]	@ 0xbc
    da80:	e59438bc 	ldr	r3, [r4, #2236]	@ 0x8bc
    da84:	e7ea3053 	ubfx	r3, r3, #0, #11
    da88:	e58438bc 	str	r3, [r4, #2236]	@ 0x8bc
    da8c:	e59c3000 	ldr	r3, [ip]
    da90:	e3130010 	tst	r3, #16
    da94:	1a00000e 	bne	dad4 <CSerialDevice::InterruptHandler()+0x108>
    da98:	e5921000 	ldr	r1, [r2]
    da9c:	e3110b01 	tst	r1, #1024	@ 0x400
    daa0:	1affffdb 	bne	da14 <CSerialDevice::InterruptHandler()+0x48>
    daa4:	e3110b02 	tst	r1, #2048	@ 0x800
    daa8:	0a000029 	beq	db54 <CSerialDevice::InterruptHandler()+0x188>
    daac:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
    dab0:	e3530000 	cmp	r3, #0
    dab4:	0584e8c4 	streq	lr, [r4, #2244]	@ 0x8c4
    dab8:	eaffffd8 	b	da20 <CSerialDevice::InterruptHandler()+0x54>
    dabc:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
    dac0:	e3530000 	cmp	r3, #0
    dac4:	0584e8c4 	streq	lr, [r4, #2244]	@ 0x8c4
    dac8:	e59c3000 	ldr	r3, [ip]
    dacc:	e3130010 	tst	r3, #16
    dad0:	0afffff0 	beq	da98 <CSerialDevice::InterruptHandler()+0xcc>
    dad4:	e59c3000 	ldr	r3, [ip]
    dad8:	e3130020 	tst	r3, #32
    dadc:	0a00000d 	beq	db18 <CSerialDevice::InterruptHandler()+0x14c>
    dae0:	ea000013 	b	db34 <CSerialDevice::InterruptHandler()+0x168>
    dae4:	e59530cc 	ldr	r3, [r5, #204]	@ 0xcc
    dae8:	e0841003 	add	r1, r4, r3
    daec:	e2833001 	add	r3, r3, #1
    daf0:	e58530cc 	str	r3, [r5, #204]	@ 0xcc
    daf4:	e5d138c8 	ldrb	r3, [r1, #2248]	@ 0x8c8
    daf8:	e5823000 	str	r3, [r2]
    dafc:	e59530cc 	ldr	r3, [r5, #204]	@ 0xcc
    db00:	e7ea3053 	ubfx	r3, r3, #0, #11
    db04:	e58530cc 	str	r3, [r5, #204]	@ 0xcc
    db08:	e5942014 	ldr	r2, [r4, #20]
    db0c:	e5923018 	ldr	r3, [r2, #24]
    db10:	e3130020 	tst	r3, #32
    db14:	1a000006 	bne	db34 <CSerialDevice::InterruptHandler()+0x168>
    db18:	e59510c8 	ldr	r1, [r5, #200]	@ 0xc8
    db1c:	e59530cc 	ldr	r3, [r5, #204]	@ 0xcc
    db20:	e1510003 	cmp	r1, r3
    db24:	1affffee 	bne	dae4 <CSerialDevice::InterruptHandler()+0x118>
    db28:	e5923038 	ldr	r3, [r2, #56]	@ 0x38
    db2c:	e3c33020 	bic	r3, r3, #32
    db30:	e5823038 	str	r3, [r2, #56]	@ 0x38
    db34:	e59530e0 	ldr	r3, [r5, #224]	@ 0xe0
    db38:	e3530000 	cmp	r3, #0
    db3c:	1a000014 	bne	db94 <CSerialDevice::InterruptHandler()+0x1c8>
    db40:	e3560000 	cmp	r6, #0
    db44:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    db48:	e59530dc 	ldr	r3, [r5, #220]	@ 0xdc
    db4c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    db50:	e12fff13 	bx	r3
    db54:	e3110c01 	tst	r1, #256	@ 0x100
    db58:	0a000004 	beq	db70 <CSerialDevice::InterruptHandler()+0x1a4>
    db5c:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
    db60:	e3530000 	cmp	r3, #0
    db64:	03e03002 	mvneq	r3, #2
    db68:	058438c4 	streq	r3, [r4, #2244]	@ 0x8c4
    db6c:	eaffffab 	b	da20 <CSerialDevice::InterruptHandler()+0x54>
    db70:	e3110c02 	tst	r1, #512	@ 0x200
    db74:	0affffa9 	beq	da20 <CSerialDevice::InterruptHandler()+0x54>
    db78:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
    db7c:	e3530000 	cmp	r3, #0
    db80:	03e03003 	mvneq	r3, #3
    db84:	058438c4 	streq	r3, [r4, #2244]	@ 0x8c4
    db88:	eaffffa4 	b	da20 <CSerialDevice::InterruptHandler()+0x54>
    db8c:	eb001157 	bl	120f0 <EnterCritical>
    db90:	eaffff93 	b	d9e4 <CSerialDevice::InterruptHandler()+0x18>
    db94:	eb001180 	bl	1219c <LeaveCritical>
    db98:	e3560000 	cmp	r6, #0
    db9c:	1affffe9 	bne	db48 <CSerialDevice::InterruptHandler()+0x17c>
    dba0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    dba4:	e5923018 	ldr	r3, [r2, #24]
    dba8:	e2136020 	ands	r6, r3, #32
    dbac:	0affffd9 	beq	db18 <CSerialDevice::InterruptHandler()+0x14c>
    dbb0:	e59530e0 	ldr	r3, [r5, #224]	@ 0xe0
    dbb4:	e3530000 	cmp	r3, #0
    dbb8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    dbbc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    dbc0:	ea001175 	b	1219c <LeaveCritical>

0000dbc4 <CSerialDevice::InterruptStub(void*)>:
    dbc4:	f57ff05f 	dmb	sy
    dbc8:	e3073700 	movw	r3, #30464	@ 0x7700
    dbcc:	e3403001 	movt	r3, #1
    dbd0:	e5932010 	ldr	r2, [r3, #16]
    dbd4:	e3120001 	tst	r2, #1
    dbd8:	012fff1e 	bxeq	lr
    dbdc:	e5930000 	ldr	r0, [r3]
    dbe0:	e3500000 	cmp	r0, #0
    dbe4:	0a000000 	beq	dbec <CSerialDevice::InterruptStub(void*)+0x28>
    dbe8:	eaffff77 	b	d9cc <CSerialDevice::InterruptHandler()>
    dbec:	e3051870 	movw	r1, #22640	@ 0x5870
    dbf0:	e3401001 	movt	r1, #1
    dbf4:	e2810f66 	add	r0, r1, #408	@ 0x198
    dbf8:	e92d4010 	push	{r4, lr}
    dbfc:	e300230f 	movw	r2, #783	@ 0x30f
    dc00:	eb001352 	bl	12950 <assertion_failed>

0000dc04 <CSerialDevice::~CSerialDevice()>:
    dc04:	e5d03018 	ldrb	r3, [r0, #24]
    dc08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dc0c:	e1a04000 	mov	r4, r0
    dc10:	e59f6130 	ldr	r6, [pc, #304]	@ dd48 <CSerialDevice::~CSerialDevice()+0x144>
    dc14:	e3530000 	cmp	r3, #0
    dc18:	e5806000 	str	r6, [r0]
    dc1c:	0a00003e 	beq	dd1c <CSerialDevice::~CSerialDevice()+0x118>
    dc20:	ebffeb99 	bl	8a8c <CDeviceNameService::Get()>
    dc24:	e3075700 	movw	r5, #30464	@ 0x7700
    dc28:	e3405001 	movt	r5, #1
    dc2c:	e5942010 	ldr	r2, [r4, #16]
    dc30:	e2861e11 	add	r1, r6, #272	@ 0x110
    dc34:	e3a03000 	mov	r3, #0
    dc38:	e2822001 	add	r2, r2, #1
    dc3c:	ebffebb8 	bl	8b24 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    dc40:	e5953010 	ldr	r3, [r5, #16]
    dc44:	e5942010 	ldr	r2, [r4, #16]
    dc48:	e3a01001 	mov	r1, #1
    dc4c:	e1c33211 	bic	r3, r3, r1, lsl r2
    dc50:	e5853010 	str	r3, [r5, #16]
    dc54:	f57ff04f 	dsb	sy
    dc58:	e5942014 	ldr	r2, [r4, #20]
    dc5c:	e3a03000 	mov	r3, #0
    dc60:	e5823038 	str	r3, [r2, #56]	@ 0x38
    dc64:	e5942014 	ldr	r2, [r4, #20]
    dc68:	e5823030 	str	r3, [r2, #48]	@ 0x30
    dc6c:	e5943008 	ldr	r3, [r4, #8]
    dc70:	e3530000 	cmp	r3, #0
    dc74:	0a00000e 	beq	dcb4 <CSerialDevice::~CSerialDevice()+0xb0>
    dc78:	e5953004 	ldr	r3, [r5, #4]
    dc7c:	e2433001 	sub	r3, r3, #1
    dc80:	e5853004 	str	r3, [r5, #4]
    dc84:	e3530000 	cmp	r3, #0
    dc88:	1a000009 	bne	dcb4 <CSerialDevice::~CSerialDevice()+0xb0>
    dc8c:	e5950008 	ldr	r0, [r5, #8]
    dc90:	e3500000 	cmp	r0, #0
    dc94:	0a000027 	beq	dd38 <CSerialDevice::~CSerialDevice()+0x134>
    dc98:	e5d5300c 	ldrb	r3, [r5, #12]
    dc9c:	e3530000 	cmp	r3, #0
    dca0:	0a000021 	beq	dd2c <CSerialDevice::~CSerialDevice()+0x128>
    dca4:	eb001236 	bl	12584 <CInterruptSystem::DisconnectFIQ()>
    dca8:	e3a03000 	mov	r3, #0
    dcac:	e5853008 	str	r3, [r5, #8]
    dcb0:	e5c5300c 	strb	r3, [r5, #12]
    dcb4:	e284606c 	add	r6, r4, #108	@ 0x6c
    dcb8:	e3a02001 	mov	r2, #1
    dcbc:	e3a01000 	mov	r1, #0
    dcc0:	e1a00006 	mov	r0, r6
    dcc4:	e2847094 	add	r7, r4, #148	@ 0x94
    dcc8:	ebffee4a 	bl	95f8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    dccc:	e3a02001 	mov	r2, #1
    dcd0:	e3a01000 	mov	r1, #0
    dcd4:	e1a00007 	mov	r0, r7
    dcd8:	ebffee46 	bl	95f8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    dcdc:	e5942010 	ldr	r2, [r4, #16]
    dce0:	e3a03000 	mov	r3, #0
    dce4:	e1a00007 	mov	r0, r7
    dce8:	e5c43018 	strb	r3, [r4, #24]
    dcec:	e7853102 	str	r3, [r5, r2, lsl #2]
    dcf0:	ebffec00 	bl	8cf8 <CGPIOPin::~CGPIOPin()>
    dcf4:	e1a00006 	mov	r0, r6
    dcf8:	ebffebfe 	bl	8cf8 <CGPIOPin::~CGPIOPin()>
    dcfc:	e2840044 	add	r0, r4, #68	@ 0x44
    dd00:	ebffebfc 	bl	8cf8 <CGPIOPin::~CGPIOPin()>
    dd04:	e284001c 	add	r0, r4, #28
    dd08:	ebffebfa 	bl	8cf8 <CGPIOPin::~CGPIOPin()>
    dd0c:	e1a00004 	mov	r0, r4
    dd10:	eb00159d 	bl	1338c <CDevice::~CDevice()>
    dd14:	e1a00004 	mov	r0, r4
    dd18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dd1c:	e2800094 	add	r0, r0, #148	@ 0x94
    dd20:	ebffebf4 	bl	8cf8 <CGPIOPin::~CGPIOPin()>
    dd24:	e284006c 	add	r0, r4, #108	@ 0x6c
    dd28:	eafffff2 	b	dcf8 <CSerialDevice::~CSerialDevice()+0xf4>
    dd2c:	e3a01039 	mov	r1, #57	@ 0x39
    dd30:	eb0011ab 	bl	123e4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    dd34:	eaffffdb 	b	dca8 <CSerialDevice::~CSerialDevice()+0xa4>
    dd38:	e3a020e2 	mov	r2, #226	@ 0xe2
    dd3c:	e246102c 	sub	r1, r6, #44	@ 0x2c
    dd40:	e2860f5f 	add	r0, r6, #380	@ 0x17c
    dd44:	eb001301 	bl	12950 <assertion_failed>
    dd48:	0001589c 	.word	0x0001589c

0000dd4c <CSerialDevice::~CSerialDevice()>:
    dd4c:	e92d4010 	push	{r4, lr}
    dd50:	e1a04000 	mov	r4, r0
    dd54:	ebffffaa 	bl	dc04 <CSerialDevice::~CSerialDevice()>
    dd58:	e1a00004 	mov	r0, r4
    dd5c:	e30110e8 	movw	r1, #4328	@ 0x10e8
    dd60:	eb000d05 	bl	1117c <operator delete(void*, unsigned int)>
    dd64:	e1a00004 	mov	r0, r4
    dd68:	e8bd8010 	pop	{r4, pc}
    dd6c:	00000000 	andeq	r0, r0, r0

0000dd70 <CString::~CString()>:
    dd70:	e92d4010 	push	{r4, lr}
    dd74:	e1a04000 	mov	r4, r0
    dd78:	e5900004 	ldr	r0, [r0, #4]
    dd7c:	e59f3014 	ldr	r3, [pc, #20]	@ dd98 <CString::~CString()+0x28>
    dd80:	e3500000 	cmp	r0, #0
    dd84:	e5843000 	str	r3, [r4]
    dd88:	0a000000 	beq	dd90 <CString::~CString()+0x20>
    dd8c:	eb000cf4 	bl	11164 <operator delete[](void*)>
    dd90:	e1a00004 	mov	r0, r4
    dd94:	e8bd8010 	pop	{r4, pc}
    dd98:	00015a4c 	.word	0x00015a4c

0000dd9c <CString::~CString()>:
    dd9c:	e92d4010 	push	{r4, lr}
    dda0:	e1a04000 	mov	r4, r0
    dda4:	e5900004 	ldr	r0, [r0, #4]
    dda8:	e59f3020 	ldr	r3, [pc, #32]	@ ddd0 <CString::~CString()+0x34>
    ddac:	e3500000 	cmp	r0, #0
    ddb0:	e5843000 	str	r3, [r4]
    ddb4:	0a000000 	beq	ddbc <CString::~CString()+0x20>
    ddb8:	eb000ce9 	bl	11164 <operator delete[](void*)>
    ddbc:	e1a00004 	mov	r0, r4
    ddc0:	e3a01010 	mov	r1, #16
    ddc4:	eb000cec 	bl	1117c <operator delete(void*, unsigned int)>
    ddc8:	e1a00004 	mov	r0, r4
    ddcc:	e8bd8010 	pop	{r4, pc}
    ddd0:	00015a4c 	.word	0x00015a4c

0000ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    ddd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ddd8:	e990004c 	ldmib	r0, {r2, r3, r6}
    dddc:	e0466002 	sub	r6, r6, r2
    dde0:	e0861001 	add	r1, r6, r1
    dde4:	e2812001 	add	r2, r1, #1
    dde8:	e1520003 	cmp	r2, r3
    ddec:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    ddf0:	e1a04000 	mov	r4, r0
    ddf4:	e2815041 	add	r5, r1, #65	@ 0x41
    ddf8:	e1a00005 	mov	r0, r5
    ddfc:	eb000ccc 	bl	11134 <operator new[](unsigned int)>
    de00:	e3a02000 	mov	r2, #0
    de04:	e594300c 	ldr	r3, [r4, #12]
    de08:	e1a07000 	mov	r7, r0
    de0c:	e5c32000 	strb	r2, [r3]
    de10:	e5941004 	ldr	r1, [r4, #4]
    de14:	eb000a54 	bl	1076c <strcpy>
    de18:	e5940004 	ldr	r0, [r4, #4]
    de1c:	e3500000 	cmp	r0, #0
    de20:	0a000000 	beq	de28 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    de24:	eb000cce 	bl	11164 <operator delete[](void*)>
    de28:	e0876006 	add	r6, r7, r6
    de2c:	e5847004 	str	r7, [r4, #4]
    de30:	e5845008 	str	r5, [r4, #8]
    de34:	e584600c 	str	r6, [r4, #12]
    de38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000de3c <CString::CString()>:
    de3c:	e59f100c 	ldr	r1, [pc, #12]	@ de50 <CString::CString()+0x14>
    de40:	e3a02000 	mov	r2, #0
    de44:	e8800006 	stm	r0, {r1, r2}
    de48:	e5802008 	str	r2, [r0, #8]
    de4c:	e12fff1e 	bx	lr
    de50:	00015a4c 	.word	0x00015a4c

0000de54 <CString::CString(char const*)>:
    de54:	e92d4070 	push	{r4, r5, r6, lr}
    de58:	e1a04000 	mov	r4, r0
    de5c:	e59f302c 	ldr	r3, [pc, #44]	@ de90 <CString::CString(char const*)+0x3c>
    de60:	e1a00001 	mov	r0, r1
    de64:	e1a05001 	mov	r5, r1
    de68:	e5843000 	str	r3, [r4]
    de6c:	eb00099e 	bl	104ec <strlen>
    de70:	e2800001 	add	r0, r0, #1
    de74:	e5840008 	str	r0, [r4, #8]
    de78:	eb000cad 	bl	11134 <operator new[](unsigned int)>
    de7c:	e1a01005 	mov	r1, r5
    de80:	e5840004 	str	r0, [r4, #4]
    de84:	eb000a38 	bl	1076c <strcpy>
    de88:	e1a00004 	mov	r0, r4
    de8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    de90:	00015a4c 	.word	0x00015a4c

0000de94 <CString::CString(CString const&)>:
    de94:	e92d4070 	push	{r4, r5, r6, lr}
    de98:	e1a04000 	mov	r4, r0
    de9c:	e5910004 	ldr	r0, [r1, #4]
    dea0:	e59f3040 	ldr	r3, [pc, #64]	@ dee8 <CString::CString(CString const&)+0x54>
    dea4:	e1a06001 	mov	r6, r1
    dea8:	e3500000 	cmp	r0, #0
    deac:	e3045e88 	movw	r5, #20104	@ 0x4e88
    deb0:	e3405001 	movt	r5, #1
    deb4:	e5843000 	str	r3, [r4]
    deb8:	01a00005 	moveq	r0, r5
    debc:	eb00098a 	bl	104ec <strlen>
    dec0:	e2800001 	add	r0, r0, #1
    dec4:	e5840008 	str	r0, [r4, #8]
    dec8:	eb000c99 	bl	11134 <operator new[](unsigned int)>
    decc:	e5961004 	ldr	r1, [r6, #4]
    ded0:	e5840004 	str	r0, [r4, #4]
    ded4:	e3510000 	cmp	r1, #0
    ded8:	01a01005 	moveq	r1, r5
    dedc:	eb000a22 	bl	1076c <strcpy>
    dee0:	e1a00004 	mov	r0, r4
    dee4:	e8bd8070 	pop	{r4, r5, r6, pc}
    dee8:	00015a4c 	.word	0x00015a4c

0000deec <CString::CString(CString&&)>:
    deec:	e59fc024 	ldr	ip, [pc, #36]	@ df18 <CString::CString(CString&&)+0x2c>
    def0:	e3a02000 	mov	r2, #0
    def4:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    def8:	e591e008 	ldr	lr, [r1, #8]
    defc:	e580c000 	str	ip, [r0]
    df00:	e591c004 	ldr	ip, [r1, #4]
    df04:	e580e008 	str	lr, [r0, #8]
    df08:	e5812008 	str	r2, [r1, #8]
    df0c:	e580c004 	str	ip, [r0, #4]
    df10:	e5812004 	str	r2, [r1, #4]
    df14:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    df18:	00015a4c 	.word	0x00015a4c

0000df1c <CString::operator char const*() const>:
    df1c:	e5900004 	ldr	r0, [r0, #4]
    df20:	e3043e88 	movw	r3, #20104	@ 0x4e88
    df24:	e3403001 	movt	r3, #1
    df28:	e3500000 	cmp	r0, #0
    df2c:	01a00003 	moveq	r0, r3
    df30:	e12fff1e 	bx	lr

0000df34 <CString::operator=(char const*)>:
    df34:	e92d4070 	push	{r4, r5, r6, lr}
    df38:	e1a04000 	mov	r4, r0
    df3c:	e5900004 	ldr	r0, [r0, #4]
    df40:	e1a05001 	mov	r5, r1
    df44:	e3500000 	cmp	r0, #0
    df48:	0a000000 	beq	df50 <CString::operator=(char const*)+0x1c>
    df4c:	eb000c84 	bl	11164 <operator delete[](void*)>
    df50:	e1a00005 	mov	r0, r5
    df54:	eb000964 	bl	104ec <strlen>
    df58:	e2800001 	add	r0, r0, #1
    df5c:	e5840008 	str	r0, [r4, #8]
    df60:	eb000c73 	bl	11134 <operator new[](unsigned int)>
    df64:	e1a01005 	mov	r1, r5
    df68:	e5840004 	str	r0, [r4, #4]
    df6c:	eb0009fe 	bl	1076c <strcpy>
    df70:	e5940004 	ldr	r0, [r4, #4]
    df74:	e8bd8070 	pop	{r4, r5, r6, pc}

0000df78 <CString::operator=(CString const&)>:
    df78:	e92d4070 	push	{r4, r5, r6, lr}
    df7c:	e1a04000 	mov	r4, r0
    df80:	e5900004 	ldr	r0, [r0, #4]
    df84:	e1a06001 	mov	r6, r1
    df88:	e3500000 	cmp	r0, #0
    df8c:	0a000000 	beq	df94 <CString::operator=(CString const&)+0x1c>
    df90:	eb000c73 	bl	11164 <operator delete[](void*)>
    df94:	e5960004 	ldr	r0, [r6, #4]
    df98:	e3045e88 	movw	r5, #20104	@ 0x4e88
    df9c:	e3405001 	movt	r5, #1
    dfa0:	e3500000 	cmp	r0, #0
    dfa4:	01a00005 	moveq	r0, r5
    dfa8:	eb00094f 	bl	104ec <strlen>
    dfac:	e2800001 	add	r0, r0, #1
    dfb0:	e5840008 	str	r0, [r4, #8]
    dfb4:	eb000c5e 	bl	11134 <operator new[](unsigned int)>
    dfb8:	e5840004 	str	r0, [r4, #4]
    dfbc:	e5961004 	ldr	r1, [r6, #4]
    dfc0:	e3510000 	cmp	r1, #0
    dfc4:	01a01005 	moveq	r1, r5
    dfc8:	eb0009e7 	bl	1076c <strcpy>
    dfcc:	e1a00004 	mov	r0, r4
    dfd0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dfd4 <CString::operator=(CString&&)>:
    dfd4:	e92d4070 	push	{r4, r5, r6, lr}
    dfd8:	e1a05000 	mov	r5, r0
    dfdc:	e5900004 	ldr	r0, [r0, #4]
    dfe0:	e1a04001 	mov	r4, r1
    dfe4:	e3500000 	cmp	r0, #0
    dfe8:	0a000000 	beq	dff0 <CString::operator=(CString&&)+0x1c>
    dfec:	eb000c5c 	bl	11164 <operator delete[](void*)>
    dff0:	e5941008 	ldr	r1, [r4, #8]
    dff4:	e3a03000 	mov	r3, #0
    dff8:	e5942004 	ldr	r2, [r4, #4]
    dffc:	e1a00005 	mov	r0, r5
    e000:	e5851008 	str	r1, [r5, #8]
    e004:	e5852004 	str	r2, [r5, #4]
    e008:	e5843008 	str	r3, [r4, #8]
    e00c:	e5843004 	str	r3, [r4, #4]
    e010:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e014 <CString::GetLength() const>:
    e014:	e5900004 	ldr	r0, [r0, #4]
    e018:	e3500000 	cmp	r0, #0
    e01c:	012fff1e 	bxeq	lr
    e020:	ea000931 	b	104ec <strlen>

0000e024 <CString::Append(char const*)>:
    e024:	e92d4070 	push	{r4, r5, r6, lr}
    e028:	e1a04000 	mov	r4, r0
    e02c:	e5900004 	ldr	r0, [r0, #4]
    e030:	e3a03001 	mov	r3, #1
    e034:	e1a06001 	mov	r6, r1
    e038:	e3500000 	cmp	r0, #0
    e03c:	e5843008 	str	r3, [r4, #8]
    e040:	0a000003 	beq	e054 <CString::Append(char const*)+0x30>
    e044:	eb000928 	bl	104ec <strlen>
    e048:	e5943008 	ldr	r3, [r4, #8]
    e04c:	e0833000 	add	r3, r3, r0
    e050:	e5843008 	str	r3, [r4, #8]
    e054:	e1a00006 	mov	r0, r6
    e058:	eb000923 	bl	104ec <strlen>
    e05c:	e5943008 	ldr	r3, [r4, #8]
    e060:	e0800003 	add	r0, r0, r3
    e064:	e5840008 	str	r0, [r4, #8]
    e068:	eb000c31 	bl	11134 <operator new[](unsigned int)>
    e06c:	e5941004 	ldr	r1, [r4, #4]
    e070:	e1a05000 	mov	r5, r0
    e074:	e3510000 	cmp	r1, #0
    e078:	05c01000 	strbeq	r1, [r0]
    e07c:	0a000004 	beq	e094 <CString::Append(char const*)+0x70>
    e080:	eb0009b9 	bl	1076c <strcpy>
    e084:	e5940004 	ldr	r0, [r4, #4]
    e088:	e3500000 	cmp	r0, #0
    e08c:	0a000000 	beq	e094 <CString::Append(char const*)+0x70>
    e090:	eb000c33 	bl	11164 <operator delete[](void*)>
    e094:	e1a01006 	mov	r1, r6
    e098:	e1a00005 	mov	r0, r5
    e09c:	eb0009ca 	bl	107cc <strcat>
    e0a0:	e5845004 	str	r5, [r4, #4]
    e0a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e0a8 <CString::Compare(char const*) const>:
    e0a8:	e5900004 	ldr	r0, [r0, #4]
    e0ac:	ea000918 	b	10514 <strcmp>

0000e0b0 <CString::Find(char) const>:
    e0b0:	e5902004 	ldr	r2, [r0, #4]
    e0b4:	e1d230d0 	ldrsb	r3, [r2]
    e0b8:	e3530000 	cmp	r3, #0
    e0bc:	0a000006 	beq	e0dc <CString::Find(char) const+0x2c>
    e0c0:	e3a00000 	mov	r0, #0
    e0c4:	e1510003 	cmp	r1, r3
    e0c8:	012fff1e 	bxeq	lr
    e0cc:	e1f230d1 	ldrsb	r3, [r2, #1]!
    e0d0:	e2800001 	add	r0, r0, #1
    e0d4:	e3530000 	cmp	r3, #0
    e0d8:	1afffff9 	bne	e0c4 <CString::Find(char) const+0x14>
    e0dc:	e3e00000 	mvn	r0, #0
    e0e0:	e12fff1e 	bx	lr

0000e0e4 <CString::Replace(char const*, char const*)>:
    e0e4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0e8:	e1d160d0 	ldrsb	r6, [r1]
    e0ec:	e3560000 	cmp	r6, #0
    e0f0:	1a000001 	bne	e0fc <CString::Replace(char const*, char const*)+0x18>
    e0f4:	e1a00006 	mov	r0, r6
    e0f8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0fc:	e5904004 	ldr	r4, [r0, #4]
    e100:	e1a0a000 	mov	sl, r0
    e104:	e1a05001 	mov	r5, r1
    e108:	e1a07002 	mov	r7, r2
    e10c:	e1a00004 	mov	r0, r4
    e110:	eb0008f5 	bl	104ec <strlen>
    e114:	e2800001 	add	r0, r0, #1
    e118:	eb000c05 	bl	11134 <operator new[](unsigned int)>
    e11c:	e1a01004 	mov	r1, r4
    e120:	e1a08000 	mov	r8, r0
    e124:	eb000990 	bl	1076c <strcpy>
    e128:	e59a0004 	ldr	r0, [sl, #4]
    e12c:	e3500000 	cmp	r0, #0
    e130:	0a000000 	beq	e138 <CString::Replace(char const*, char const*)+0x54>
    e134:	eb000c0a 	bl	11164 <operator delete[](void*)>
    e138:	e3a00040 	mov	r0, #64	@ 0x40
    e13c:	e1a04008 	mov	r4, r8
    e140:	e58a0008 	str	r0, [sl, #8]
    e144:	e3a06000 	mov	r6, #0
    e148:	eb000bf9 	bl	11134 <operator new[](unsigned int)>
    e14c:	e58a0004 	str	r0, [sl, #4]
    e150:	e58a000c 	str	r0, [sl, #12]
    e154:	e1d510d0 	ldrsb	r1, [r5]
    e158:	e1a00004 	mov	r0, r4
    e15c:	eb0009ab 	bl	10810 <strchr>
    e160:	e2509000 	subs	r9, r0, #0
    e164:	0a000032 	beq	e234 <CString::Replace(char const*, char const*)+0x150>
    e168:	e1540009 	cmp	r4, r9
    e16c:	21a00004 	movcs	r0, r4
    e170:	2a00000a 	bcs	e1a0 <CString::Replace(char const*, char const*)+0xbc>
    e174:	e3a01001 	mov	r1, #1
    e178:	e1a0000a 	mov	r0, sl
    e17c:	e0d4b0d1 	ldrsb	fp, [r4], #1
    e180:	ebffff13 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e184:	e59a300c 	ldr	r3, [sl, #12]
    e188:	e1590004 	cmp	r9, r4
    e18c:	e2832001 	add	r2, r3, #1
    e190:	e58a200c 	str	r2, [sl, #12]
    e194:	e5c3b000 	strb	fp, [r3]
    e198:	1afffff5 	bne	e174 <CString::Replace(char const*, char const*)+0x90>
    e19c:	e1a00009 	mov	r0, r9
    e1a0:	e1d530d1 	ldrsb	r3, [r5, #1]
    e1a4:	e2851001 	add	r1, r5, #1
    e1a8:	e2894001 	add	r4, r9, #1
    e1ac:	e3530000 	cmp	r3, #0
    e1b0:	1a000003 	bne	e1c4 <CString::Replace(char const*, char const*)+0xe0>
    e1b4:	ea00000f 	b	e1f8 <CString::Replace(char const*, char const*)+0x114>
    e1b8:	e1f130d1 	ldrsb	r3, [r1, #1]!
    e1bc:	e3530000 	cmp	r3, #0
    e1c0:	0a00000c 	beq	e1f8 <CString::Replace(char const*, char const*)+0x114>
    e1c4:	e0d420d1 	ldrsb	r2, [r4], #1
    e1c8:	e1520003 	cmp	r2, r3
    e1cc:	0afffff9 	beq	e1b8 <CString::Replace(char const*, char const*)+0xd4>
    e1d0:	e1a04000 	mov	r4, r0
    e1d4:	e3a01001 	mov	r1, #1
    e1d8:	e1a0000a 	mov	r0, sl
    e1dc:	e0d490d1 	ldrsb	r9, [r4], #1
    e1e0:	ebfffefb 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e1e4:	e59a300c 	ldr	r3, [sl, #12]
    e1e8:	e2832001 	add	r2, r3, #1
    e1ec:	e58a200c 	str	r2, [sl, #12]
    e1f0:	e5c39000 	strb	r9, [r3]
    e1f4:	eaffffd6 	b	e154 <CString::Replace(char const*, char const*)+0x70>
    e1f8:	e1a00007 	mov	r0, r7
    e1fc:	eb0008ba 	bl	104ec <strlen>
    e200:	e2509000 	subs	r9, r0, #0
    e204:	0a000002 	beq	e214 <CString::Replace(char const*, char const*)+0x130>
    e208:	e1a01009 	mov	r1, r9
    e20c:	e1a0000a 	mov	r0, sl
    e210:	ebfffeef 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e214:	e59a000c 	ldr	r0, [sl, #12]
    e218:	e1a01007 	mov	r1, r7
    e21c:	eb000952 	bl	1076c <strcpy>
    e220:	e59a300c 	ldr	r3, [sl, #12]
    e224:	e2866001 	add	r6, r6, #1
    e228:	e0833009 	add	r3, r3, r9
    e22c:	e58a300c 	str	r3, [sl, #12]
    e230:	eaffffc7 	b	e154 <CString::Replace(char const*, char const*)+0x70>
    e234:	e1a00004 	mov	r0, r4
    e238:	eb0008ab 	bl	104ec <strlen>
    e23c:	e2505000 	subs	r5, r0, #0
    e240:	0a000002 	beq	e250 <CString::Replace(char const*, char const*)+0x16c>
    e244:	e1a01005 	mov	r1, r5
    e248:	e1a0000a 	mov	r0, sl
    e24c:	ebfffee0 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e250:	e1a01004 	mov	r1, r4
    e254:	e59a000c 	ldr	r0, [sl, #12]
    e258:	eb000943 	bl	1076c <strcpy>
    e25c:	e59a300c 	ldr	r3, [sl, #12]
    e260:	e1a00008 	mov	r0, r8
    e264:	e3a02000 	mov	r2, #0
    e268:	e0831005 	add	r1, r3, r5
    e26c:	e58a100c 	str	r1, [sl, #12]
    e270:	e7c32005 	strb	r2, [r3, r5]
    e274:	eb000bba 	bl	11164 <operator delete[](void*)>
    e278:	e1a00006 	mov	r0, r6
    e27c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e280 <CString::PutChar(char, unsigned int)>:
    e280:	e92d4070 	push	{r4, r5, r6, lr}
    e284:	e2524000 	subs	r4, r2, #0
    e288:	08bd8070 	popeq	{r4, r5, r6, pc}
    e28c:	e1a06001 	mov	r6, r1
    e290:	e1a01004 	mov	r1, r4
    e294:	e1a05000 	mov	r5, r0
    e298:	ebfffecd 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e29c:	e2442001 	sub	r2, r4, #1
    e2a0:	e595300c 	ldr	r3, [r5, #12]
    e2a4:	e2422001 	sub	r2, r2, #1
    e2a8:	e3720001 	cmn	r2, #1
    e2ac:	e2830001 	add	r0, r3, #1
    e2b0:	e585000c 	str	r0, [r5, #12]
    e2b4:	e5c36000 	strb	r6, [r3]
    e2b8:	1afffff8 	bne	e2a0 <CString::PutChar(char, unsigned int)+0x20>
    e2bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e2c0 <CString::PutString(char const*)>:
    e2c0:	e92d4070 	push	{r4, r5, r6, lr}
    e2c4:	e1a04000 	mov	r4, r0
    e2c8:	e1a00001 	mov	r0, r1
    e2cc:	e1a06001 	mov	r6, r1
    e2d0:	eb000885 	bl	104ec <strlen>
    e2d4:	e2505000 	subs	r5, r0, #0
    e2d8:	0a000002 	beq	e2e8 <CString::PutString(char const*)+0x28>
    e2dc:	e1a01005 	mov	r1, r5
    e2e0:	e1a00004 	mov	r0, r4
    e2e4:	ebfffeba 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e2e8:	e594000c 	ldr	r0, [r4, #12]
    e2ec:	e1a01006 	mov	r1, r6
    e2f0:	eb00091d 	bl	1076c <strcpy>
    e2f4:	e594300c 	ldr	r3, [r4, #12]
    e2f8:	e0833005 	add	r3, r3, r5
    e2fc:	e584300c 	str	r3, [r4, #12]
    e300:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e304 <CString::ReserveSpace(unsigned int)>:
    e304:	e3510000 	cmp	r1, #0
    e308:	012fff1e 	bxeq	lr
    e30c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e310:	e1a05000 	mov	r5, r0
    e314:	e990004c 	ldmib	r0, {r2, r3, r6}
    e318:	e0466002 	sub	r6, r6, r2
    e31c:	e0811006 	add	r1, r1, r6
    e320:	e2812001 	add	r2, r1, #1
    e324:	e1520003 	cmp	r2, r3
    e328:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    e32c:	e2814041 	add	r4, r1, #65	@ 0x41
    e330:	e1a00004 	mov	r0, r4
    e334:	eb000b7e 	bl	11134 <operator new[](unsigned int)>
    e338:	e595300c 	ldr	r3, [r5, #12]
    e33c:	e3a02000 	mov	r2, #0
    e340:	e1a07000 	mov	r7, r0
    e344:	e5c32000 	strb	r2, [r3]
    e348:	e5951004 	ldr	r1, [r5, #4]
    e34c:	eb000906 	bl	1076c <strcpy>
    e350:	e5950004 	ldr	r0, [r5, #4]
    e354:	e3500000 	cmp	r0, #0
    e358:	0a000000 	beq	e360 <CString::ReserveSpace(unsigned int)+0x5c>
    e35c:	eb000b80 	bl	11164 <operator delete[](void*)>
    e360:	e0876006 	add	r6, r7, r6
    e364:	e5857004 	str	r7, [r5, #4]
    e368:	e5854008 	str	r4, [r5, #8]
    e36c:	e585600c 	str	r6, [r5, #12]
    e370:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e374 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    e374:	e1510002 	cmp	r1, r2
    e378:	e92d4070 	push	{r4, r5, r6, lr}
    e37c:	23a0c001 	movcs	ip, #1
    e380:	3a00001b 	bcc	e3f4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x80>
    e384:	e00c0c92 	mul	ip, r2, ip
    e388:	e734fc11 	udiv	r4, r1, ip
    e38c:	e1a0e004 	mov	lr, r4
    e390:	e1540002 	cmp	r4, r2
    e394:	2afffffa 	bcs	e384 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
    e398:	e2233001 	eor	r3, r3, #1
    e39c:	e1a05000 	mov	r5, r0
    e3a0:	e1a06283 	lsl	r6, r3, #5
    e3a4:	e2866037 	add	r6, r6, #55	@ 0x37
    e3a8:	e6ef6076 	uxtb	r6, r6
    e3ac:	ea000002 	b	e3bc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>
    e3b0:	e73ef411 	udiv	lr, r1, r4
    e3b4:	e1a0c004 	mov	ip, r4
    e3b8:	e1a0400e 	mov	r4, lr
    e3bc:	e6ef307e 	uxtb	r3, lr
    e3c0:	e061149c 	mls	r1, ip, r4, r1
    e3c4:	e0864003 	add	r4, r6, r3
    e3c8:	e2833030 	add	r3, r3, #48	@ 0x30
    e3cc:	e35e0009 	cmp	lr, #9
    e3d0:	86af3074 	sxtbhi	r3, r4
    e3d4:	96af3073 	sxtbls	r3, r3
    e3d8:	e734f21c 	udiv	r4, ip, r2
    e3dc:	e15c0002 	cmp	ip, r2
    e3e0:	e4c53001 	strb	r3, [r5], #1
    e3e4:	2afffff1 	bcs	e3b0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>
    e3e8:	e3a03000 	mov	r3, #0
    e3ec:	e5c53000 	strb	r3, [r5]
    e3f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e3f4:	e1a0e001 	mov	lr, r1
    e3f8:	e3a0c001 	mov	ip, #1
    e3fc:	e1a04001 	mov	r4, r1
    e400:	eaffffe4 	b	e398 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

0000e404 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
    e404:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e408:	e1a0b002 	mov	fp, r2
    e40c:	e1a0a000 	mov	sl, r0
    e410:	e24dd014 	sub	sp, sp, #20
    e414:	e3a07000 	mov	r7, #0
    e418:	e59d8038 	ldr	r8, [sp, #56]	@ 0x38
    e41c:	e58d3004 	str	r3, [sp, #4]
    e420:	e1520008 	cmp	r2, r8
    e424:	e5dd903c 	ldrb	r9, [sp, #60]	@ 0x3c
    e428:	e2d33000 	sbcs	r3, r3, #0
    e42c:	23a05001 	movcs	r5, #1
    e430:	259d4004 	ldrcs	r4, [sp, #4]
    e434:	3a000040 	bcc	e53c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x138>
    e438:	e0030798 	mul	r3, r8, r7
    e43c:	e1a0000b 	mov	r0, fp
    e440:	e0875895 	umull	r5, r7, r5, r8
    e444:	e1a01004 	mov	r1, r4
    e448:	e0837007 	add	r7, r3, r7
    e44c:	e1a02005 	mov	r2, r5
    e450:	e1a03007 	mov	r3, r7
    e454:	fa001a37 	blx	14d38 <__aeabi_uldivmod>
    e458:	e1500008 	cmp	r0, r8
    e45c:	e2d13000 	sbcs	r3, r1, #0
    e460:	2afffff4 	bcs	e438 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x34>
    e464:	e1a04000 	mov	r4, r0
    e468:	e1a06001 	mov	r6, r1
    e46c:	e2299001 	eor	r9, r9, #1
    e470:	e58da00c 	str	sl, [sp, #12]
    e474:	e58d8038 	str	r8, [sp, #56]	@ 0x38
    e478:	e1a09289 	lsl	r9, r9, #5
    e47c:	e2899037 	add	r9, r9, #55	@ 0x37
    e480:	e6ef3079 	uxtb	r3, r9
    e484:	e58d3008 	str	r3, [sp, #8]
    e488:	ea000003 	b	e49c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x98>
    e48c:	fa001a29 	blx	14d38 <__aeabi_uldivmod>
    e490:	e1a07008 	mov	r7, r8
    e494:	e1a04000 	mov	r4, r0
    e498:	e1a06001 	mov	r6, r1
    e49c:	e59d1004 	ldr	r1, [sp, #4]
    e4a0:	e1a02005 	mov	r2, r5
    e4a4:	e1a03007 	mov	r3, r7
    e4a8:	e1a0000b 	mov	r0, fp
    e4ac:	fa001a21 	blx	14d38 <__aeabi_uldivmod>
    e4b0:	e1a08003 	mov	r8, r3
    e4b4:	e59d3008 	ldr	r3, [sp, #8]
    e4b8:	e354000a 	cmp	r4, #10
    e4bc:	e6ef4074 	uxtb	r4, r4
    e4c0:	e2d66000 	sbcs	r6, r6, #0
    e4c4:	e0831004 	add	r1, r3, r4
    e4c8:	e2844030 	add	r4, r4, #48	@ 0x30
    e4cc:	e1a09002 	mov	r9, r2
    e4d0:	e3a03000 	mov	r3, #0
    e4d4:	e6af1071 	sxtb	r1, r1
    e4d8:	e1a00005 	mov	r0, r5
    e4dc:	36af1074 	sxtbcc	r1, r4
    e4e0:	e1a0b002 	mov	fp, r2
    e4e4:	e4ca1001 	strb	r1, [sl], #1
    e4e8:	e1a01007 	mov	r1, r7
    e4ec:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
    e4f0:	e58d8004 	str	r8, [sp, #4]
    e4f4:	fa001a0f 	blx	14d38 <__aeabi_uldivmod>
    e4f8:	e59dc038 	ldr	ip, [sp, #56]	@ 0x38
    e4fc:	e1a02000 	mov	r2, r0
    e500:	e1a03001 	mov	r3, r1
    e504:	e1a00009 	mov	r0, r9
    e508:	e155000c 	cmp	r5, ip
    e50c:	e1a01008 	mov	r1, r8
    e510:	e1a05002 	mov	r5, r2
    e514:	e1a08003 	mov	r8, r3
    e518:	e2d77000 	sbcs	r7, r7, #0
    e51c:	2affffda 	bcs	e48c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x88>
    e520:	e1a0c00a 	mov	ip, sl
    e524:	e59da00c 	ldr	sl, [sp, #12]
    e528:	e3a03000 	mov	r3, #0
    e52c:	e1a0000a 	mov	r0, sl
    e530:	e5cc3000 	strb	r3, [ip]
    e534:	e28dd014 	add	sp, sp, #20
    e538:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e53c:	e59d6004 	ldr	r6, [sp, #4]
    e540:	e1a04002 	mov	r4, r2
    e544:	e3a05001 	mov	r5, #1
    e548:	eaffffc7 	b	e46c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x68>

0000e54c <CString::ftoa(char*, double, unsigned int)>:
    e54c:	eeb50bc0 	vcmpe.f64	d0, #0.0
    e550:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    e554:	eddf0b8d 	vldr	d16, [pc, #564]	@ e790 <CString::ftoa(char*, double, unsigned int)+0x244>
    e558:	ed2d8b02 	vpush	{d8}
    e55c:	eeb08b40 	vmov.f64	d8, d0
    e560:	e1a06000 	mov	r6, r0
    e564:	e24dd014 	sub	sp, sp, #20
    e568:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e56c:	e1a04000 	mov	r4, r0
    e570:	e1a07001 	mov	r7, r1
    e574:	4eb18b40 	vnegmi.f64	d8, d0
    e578:	43a0302d 	movmi	r3, #45	@ 0x2d
    e57c:	44c63001 	strbmi	r3, [r6], #1
    e580:	eeb48be0 	vcmpe.f64	d8, d16
    e584:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e588:	ca00006d 	bgt	e744 <CString::ftoa(char*, double, unsigned int)+0x1f8>
    e58c:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e590:	ee175a90 	vmov	r5, s15
    e594:	e3550009 	cmp	r5, #9
    e598:	83a02001 	movhi	r2, #1
    e59c:	83a0100a 	movhi	r1, #10
    e5a0:	9a00006f 	bls	e764 <CString::ftoa(char*, double, unsigned int)+0x218>
    e5a4:	e0020291 	mul	r2, r1, r2
    e5a8:	e733f215 	udiv	r3, r5, r2
    e5ac:	e3530009 	cmp	r3, #9
    e5b0:	8afffffb 	bhi	e5a4 <CString::ftoa(char*, double, unsigned int)+0x58>
    e5b4:	e30c8ccd 	movw	r8, #52429	@ 0xcccd
    e5b8:	e34c8ccc 	movt	r8, #52428	@ 0xcccc
    e5bc:	e1a0e006 	mov	lr, r6
    e5c0:	e1a01005 	mov	r1, r5
    e5c4:	ea000001 	b	e5d0 <CString::ftoa(char*, double, unsigned int)+0x84>
    e5c8:	e1a02003 	mov	r2, r3
    e5cc:	e733f311 	udiv	r3, r1, r3
    e5d0:	e6ef0073 	uxtb	r0, r3
    e5d4:	e3530009 	cmp	r3, #9
    e5d8:	e739f211 	udiv	r9, r1, r2
    e5dc:	e280c057 	add	ip, r0, #87	@ 0x57
    e5e0:	e2800030 	add	r0, r0, #48	@ 0x30
    e5e4:	e6afc07c 	sxtb	ip, ip
    e5e8:	96afc070 	sxtbls	ip, r0
    e5ec:	e0830298 	umull	r0, r3, r8, r2
    e5f0:	e0611992 	mls	r1, r2, r9, r1
    e5f4:	e3520009 	cmp	r2, #9
    e5f8:	e4cec001 	strb	ip, [lr], #1
    e5fc:	e1a031a3 	lsr	r3, r3, #3
    e600:	8afffff0 	bhi	e5c8 <CString::ftoa(char*, double, unsigned int)+0x7c>
    e604:	e3a03000 	mov	r3, #0
    e608:	e3570000 	cmp	r7, #0
    e60c:	e5ce3000 	strb	r3, [lr]
    e610:	1a000003 	bne	e624 <CString::ftoa(char*, double, unsigned int)+0xd8>
    e614:	e1a00004 	mov	r0, r4
    e618:	e28dd014 	add	sp, sp, #20
    e61c:	ecbd8b02 	vpop	{d8}
    e620:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e624:	e1a00006 	mov	r0, r6
    e628:	eb0007af 	bl	104ec <strlen>
    e62c:	e3570009 	cmp	r7, #9
    e630:	e0868000 	add	r8, r6, r0
    e634:	e3a0302e 	mov	r3, #46	@ 0x2e
    e638:	e7c63000 	strb	r3, [r6, r0]
    e63c:	31a06007 	movcc	r6, r7
    e640:	23a06009 	movcs	r6, #9
    e644:	e3570001 	cmp	r7, #1
    e648:	e2887001 	add	r7, r8, #1
    e64c:	0a000049 	beq	e778 <CString::ftoa(char*, double, unsigned int)+0x22c>
    e650:	e3a0200a 	mov	r2, #10
    e654:	e3a03002 	mov	r3, #2
    e658:	e1a01002 	mov	r1, r2
    e65c:	e2833001 	add	r3, r3, #1
    e660:	e0020291 	mul	r2, r1, r2
    e664:	e1560003 	cmp	r6, r3
    e668:	2afffffb 	bcs	e65c <CString::ftoa(char*, double, unsigned int)+0x110>
    e66c:	ee072a90 	vmov	s15, r2
    e670:	eef81b67 	vcvt.f64.u32	d17, s15
    e674:	ee075a90 	vmov	s15, r5
    e678:	eef80b67 	vcvt.f64.u32	d16, s15
    e67c:	ee388b60 	vsub.f64	d8, d8, d16
    e680:	ee288b21 	vmul.f64	d8, d8, d17
    e684:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e688:	ee172a90 	vmov	r2, s15
    e68c:	e3520009 	cmp	r2, #9
    e690:	83a01001 	movhi	r1, #1
    e694:	83a0c00a 	movhi	ip, #10
    e698:	9a000038 	bls	e780 <CString::ftoa(char*, double, unsigned int)+0x234>
    e69c:	e001019c 	mul	r1, ip, r1
    e6a0:	e730f112 	udiv	r0, r2, r1
    e6a4:	e1a03000 	mov	r3, r0
    e6a8:	e3500009 	cmp	r0, #9
    e6ac:	8afffffa 	bhi	e69c <CString::ftoa(char*, double, unsigned int)+0x150>
    e6b0:	e30ceccd 	movw	lr, #52429	@ 0xcccd
    e6b4:	e34ceccc 	movt	lr, #52428	@ 0xcccc
    e6b8:	e28dc004 	add	ip, sp, #4
    e6bc:	ea000002 	b	e6cc <CString::ftoa(char*, double, unsigned int)+0x180>
    e6c0:	e1a01003 	mov	r1, r3
    e6c4:	e733f312 	udiv	r3, r2, r3
    e6c8:	e1a00003 	mov	r0, r3
    e6cc:	e0622091 	mls	r2, r1, r0, r2
    e6d0:	e6ef0073 	uxtb	r0, r3
    e6d4:	e2805057 	add	r5, r0, #87	@ 0x57
    e6d8:	e3530009 	cmp	r3, #9
    e6dc:	e2800030 	add	r0, r0, #48	@ 0x30
    e6e0:	86af0075 	sxtbhi	r0, r5
    e6e4:	e083519e 	umull	r5, r3, lr, r1
    e6e8:	96af0070 	sxtbls	r0, r0
    e6ec:	e3510009 	cmp	r1, #9
    e6f0:	e4cc0001 	strb	r0, [ip], #1
    e6f4:	e1a031a3 	lsr	r3, r3, #3
    e6f8:	8afffff0 	bhi	e6c0 <CString::ftoa(char*, double, unsigned int)+0x174>
    e6fc:	e3a03000 	mov	r3, #0
    e700:	e28d0004 	add	r0, sp, #4
    e704:	e5cc3000 	strb	r3, [ip]
    e708:	eb000777 	bl	104ec <strlen>
    e70c:	e0566000 	subs	r6, r6, r0
    e710:	0a000016 	beq	e770 <CString::ftoa(char*, double, unsigned int)+0x224>
    e714:	e2866001 	add	r6, r6, #1
    e718:	e3a03030 	mov	r3, #48	@ 0x30
    e71c:	e0880006 	add	r0, r8, r6
    e720:	e4c73001 	strb	r3, [r7], #1
    e724:	e1500007 	cmp	r0, r7
    e728:	1afffffc 	bne	e720 <CString::ftoa(char*, double, unsigned int)+0x1d4>
    e72c:	e28d1004 	add	r1, sp, #4
    e730:	eb00080d 	bl	1076c <strcpy>
    e734:	e1a00004 	mov	r0, r4
    e738:	e28dd014 	add	sp, sp, #20
    e73c:	ecbd8b02 	vpop	{d8}
    e740:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e744:	e1a00006 	mov	r0, r6
    e748:	e3051a30 	movw	r1, #23088	@ 0x5a30
    e74c:	e3401001 	movt	r1, #1
    e750:	eb000805 	bl	1076c <strcpy>
    e754:	e1a00004 	mov	r0, r4
    e758:	e28dd014 	add	sp, sp, #20
    e75c:	ecbd8b02 	vpop	{d8}
    e760:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e764:	e1a03005 	mov	r3, r5
    e768:	e3a02001 	mov	r2, #1
    e76c:	eaffff90 	b	e5b4 <CString::ftoa(char*, double, unsigned int)+0x68>
    e770:	e1a00007 	mov	r0, r7
    e774:	eaffffec 	b	e72c <CString::ftoa(char*, double, unsigned int)+0x1e0>
    e778:	eef21b04 	vmov.f64	d17, #36	@ 0x41200000  10.0
    e77c:	eaffffbc 	b	e674 <CString::ftoa(char*, double, unsigned int)+0x128>
    e780:	e1a03002 	mov	r3, r2
    e784:	e3a01001 	mov	r1, #1
    e788:	e1a00002 	mov	r0, r2
    e78c:	eaffffc7 	b	e6b0 <CString::ftoa(char*, double, unsigned int)+0x164>
    e790:	ffe00000 	.word	0xffe00000
    e794:	41efffff 	.word	0x41efffff

0000e798 <CString::FormatV(char const*, std::__va_list)>:
    e798:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e79c:	e1a04001 	mov	r4, r1
    e7a0:	e24dd05c 	sub	sp, sp, #92	@ 0x5c
    e7a4:	e58d001c 	str	r0, [sp, #28]
    e7a8:	e5900004 	ldr	r0, [r0, #4]
    e7ac:	e58d2010 	str	r2, [sp, #16]
    e7b0:	e3500000 	cmp	r0, #0
    e7b4:	0a000000 	beq	e7bc <CString::FormatV(char const*, std::__va_list)+0x24>
    e7b8:	eb000a69 	bl	11164 <operator delete[](void*)>
    e7bc:	e59db01c 	ldr	fp, [sp, #28]
    e7c0:	e3a00040 	mov	r0, #64	@ 0x40
    e7c4:	e1a05004 	mov	r5, r4
    e7c8:	e58b0008 	str	r0, [fp, #8]
    e7cc:	eb000a58 	bl	11134 <operator new[](unsigned int)>
    e7d0:	e58b0004 	str	r0, [fp, #4]
    e7d4:	e58b000c 	str	r0, [fp, #12]
    e7d8:	e1d440d0 	ldrsb	r4, [r4]
    e7dc:	e3540000 	cmp	r4, #0
    e7e0:	0a000066 	beq	e980 <CString::FormatV(char const*, std::__va_list)+0x1e8>
    e7e4:	e3540025 	cmp	r4, #37	@ 0x25
    e7e8:	1a000057 	bne	e94c <CString::FormatV(char const*, std::__va_list)+0x1b4>
    e7ec:	e1d530d1 	ldrsb	r3, [r5, #1]
    e7f0:	e3530025 	cmp	r3, #37	@ 0x25
    e7f4:	0a000065 	beq	e990 <CString::FormatV(char const*, std::__va_list)+0x1f8>
    e7f8:	e3530023 	cmp	r3, #35	@ 0x23
    e7fc:	e3a04000 	mov	r4, #0
    e800:	12855001 	addne	r5, r5, #1
    e804:	13a00000 	movne	r0, #0
    e808:	03a00001 	moveq	r0, #1
    e80c:	01d530d2 	ldrsbeq	r3, [r5, #2]
    e810:	02855002 	addeq	r5, r5, #2
    e814:	e353002d 	cmp	r3, #45	@ 0x2d
    e818:	03a02001 	moveq	r2, #1
    e81c:	13a02000 	movne	r2, #0
    e820:	058d2014 	streq	r2, [sp, #20]
    e824:	01d530d1 	ldrsbeq	r3, [r5, #1]
    e828:	00855002 	addeq	r5, r5, r2
    e82c:	158d2014 	strne	r2, [sp, #20]
    e830:	e3530030 	cmp	r3, #48	@ 0x30
    e834:	03a02001 	moveq	r2, #1
    e838:	13a02000 	movne	r2, #0
    e83c:	e58d2018 	str	r2, [sp, #24]
    e840:	01d530d1 	ldrsbeq	r3, [r5, #1]
    e844:	02855001 	addeq	r5, r5, #1
    e848:	e2432030 	sub	r2, r3, #48	@ 0x30
    e84c:	e6ef2072 	uxtb	r2, r2
    e850:	e3520009 	cmp	r2, #9
    e854:	8a000007 	bhi	e878 <CString::FormatV(char const*, std::__va_list)+0xe0>
    e858:	e3a0100a 	mov	r1, #10
    e85c:	e0243491 	mla	r4, r1, r4, r3
    e860:	e1f530d1 	ldrsb	r3, [r5, #1]!
    e864:	e2432030 	sub	r2, r3, #48	@ 0x30
    e868:	e2444030 	sub	r4, r4, #48	@ 0x30
    e86c:	e6ef2072 	uxtb	r2, r2
    e870:	e3520009 	cmp	r2, #9
    e874:	9afffff8 	bls	e85c <CString::FormatV(char const*, std::__va_list)+0xc4>
    e878:	e353002e 	cmp	r3, #46	@ 0x2e
    e87c:	13a01006 	movne	r1, #6
    e880:	11d5a0d0 	ldrsbne	sl, [r5]
    e884:	0a0001c5 	beq	efa0 <CString::FormatV(char const*, std::__va_list)+0x808>
    e888:	e35a006c 	cmp	sl, #108	@ 0x6c
    e88c:	13a03000 	movne	r3, #0
    e890:	158d3004 	strne	r3, [sp, #4]
    e894:	1a000007 	bne	e8b8 <CString::FormatV(char const*, std::__va_list)+0x120>
    e898:	e1d5a0d1 	ldrsb	sl, [r5, #1]
    e89c:	e35a006c 	cmp	sl, #108	@ 0x6c
    e8a0:	03a03001 	moveq	r3, #1
    e8a4:	13a03000 	movne	r3, #0
    e8a8:	e58d3004 	str	r3, [sp, #4]
    e8ac:	01d5a0d2 	ldrsbeq	sl, [r5, #2]
    e8b0:	02855001 	addeq	r5, r5, #1
    e8b4:	e2855001 	add	r5, r5, #1
    e8b8:	e24a3058 	sub	r3, sl, #88	@ 0x58
    e8bc:	e3530020 	cmp	r3, #32
    e8c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e8c4:	ea00003a 	b	e9b4 <CString::FormatV(char const*, std::__va_list)+0x21c>
    e8c8:	0000e9e4 	.word	0x0000e9e4
    e8cc:	0000e9b4 	.word	0x0000e9b4
    e8d0:	0000e9b4 	.word	0x0000e9b4
    e8d4:	0000e9b4 	.word	0x0000e9b4
    e8d8:	0000e9b4 	.word	0x0000e9b4
    e8dc:	0000e9b4 	.word	0x0000e9b4
    e8e0:	0000e9b4 	.word	0x0000e9b4
    e8e4:	0000e9b4 	.word	0x0000e9b4
    e8e8:	0000e9b4 	.word	0x0000e9b4
    e8ec:	0000e9b4 	.word	0x0000e9b4
    e8f0:	0000e9b4 	.word	0x0000e9b4
    e8f4:	0000edb0 	.word	0x0000edb0
    e8f8:	0000ec04 	.word	0x0000ec04
    e8fc:	0000e9b4 	.word	0x0000e9b4
    e900:	0000edf8 	.word	0x0000edf8
    e904:	0000e9b4 	.word	0x0000e9b4
    e908:	0000e9b4 	.word	0x0000e9b4
    e90c:	0000ec04 	.word	0x0000ec04
    e910:	0000e9b4 	.word	0x0000e9b4
    e914:	0000e9b4 	.word	0x0000e9b4
    e918:	0000e9b4 	.word	0x0000e9b4
    e91c:	0000e9b4 	.word	0x0000e9b4
    e920:	0000e9b4 	.word	0x0000e9b4
    e924:	0000eed4 	.word	0x0000eed4
    e928:	0000e9e4 	.word	0x0000e9e4
    e92c:	0000e9b4 	.word	0x0000e9b4
    e930:	0000e9b4 	.word	0x0000e9b4
    e934:	0000ee74 	.word	0x0000ee74
    e938:	0000e9b4 	.word	0x0000e9b4
    e93c:	0000f1c0 	.word	0x0000f1c0
    e940:	0000e9b4 	.word	0x0000e9b4
    e944:	0000e9b4 	.word	0x0000e9b4
    e948:	0000e9e4 	.word	0x0000e9e4
    e94c:	e3a01001 	mov	r1, #1
    e950:	e1a0000b 	mov	r0, fp
    e954:	ebfffd1e 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e958:	e59b300c 	ldr	r3, [fp, #12]
    e95c:	e2832001 	add	r2, r3, #1
    e960:	e58b200c 	str	r2, [fp, #12]
    e964:	e5c34000 	strb	r4, [r3]
    e968:	e2855001 	add	r5, r5, #1
    e96c:	e1d540d0 	ldrsb	r4, [r5]
    e970:	e3540000 	cmp	r4, #0
    e974:	1affff9a 	bne	e7e4 <CString::FormatV(char const*, std::__va_list)+0x4c>
    e978:	e59d301c 	ldr	r3, [sp, #28]
    e97c:	e593000c 	ldr	r0, [r3, #12]
    e980:	e3a03000 	mov	r3, #0
    e984:	e5c03000 	strb	r3, [r0]
    e988:	e28dd05c 	add	sp, sp, #92	@ 0x5c
    e98c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e990:	e3a01001 	mov	r1, #1
    e994:	e1a0000b 	mov	r0, fp
    e998:	ebfffd0d 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e99c:	e59b300c 	ldr	r3, [fp, #12]
    e9a0:	e2855002 	add	r5, r5, #2
    e9a4:	e2832001 	add	r2, r3, #1
    e9a8:	e58b200c 	str	r2, [fp, #12]
    e9ac:	e5c34000 	strb	r4, [r3]
    e9b0:	eaffffed 	b	e96c <CString::FormatV(char const*, std::__va_list)+0x1d4>
    e9b4:	e3a01001 	mov	r1, #1
    e9b8:	e1a0000b 	mov	r0, fp
    e9bc:	ebfffd04 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e9c0:	e59b300c 	ldr	r3, [fp, #12]
    e9c4:	e3a01001 	mov	r1, #1
    e9c8:	e1a0000b 	mov	r0, fp
    e9cc:	e2832001 	add	r2, r3, #1
    e9d0:	e58b200c 	str	r2, [fp, #12]
    e9d4:	e3a02025 	mov	r2, #37	@ 0x25
    e9d8:	e5c32000 	strb	r2, [r3]
    e9dc:	e1d540d0 	ldrsb	r4, [r5]
    e9e0:	eaffffdb 	b	e954 <CString::FormatV(char const*, std::__va_list)+0x1bc>
    e9e4:	e3500000 	cmp	r0, #0
    e9e8:	03a0c010 	moveq	ip, #16
    e9ec:	1a0001dd 	bne	f168 <CString::FormatV(char const*, std::__va_list)+0x9d0>
    e9f0:	e59d3004 	ldr	r3, [sp, #4]
    e9f4:	e3530000 	cmp	r3, #0
    e9f8:	e59d3010 	ldr	r3, [sp, #16]
    e9fc:	0a000145 	beq	ef18 <CString::FormatV(char const*, std::__va_list)+0x780>
    ea00:	e2833007 	add	r3, r3, #7
    ea04:	e3a09000 	mov	r9, #0
    ea08:	e3c33007 	bic	r3, r3, #7
    ea0c:	e5932004 	ldr	r2, [r3, #4]
    ea10:	e4938008 	ldr	r8, [r3], #8
    ea14:	e58d3010 	str	r3, [sp, #16]
    ea18:	e158000c 	cmp	r8, ip
    ea1c:	e58d2008 	str	r2, [sp, #8]
    ea20:	e2d23000 	sbcs	r3, r2, #0
    ea24:	e58d8004 	str	r8, [sp, #4]
    ea28:	3a0002a6 	bcc	f4c8 <CString::FormatV(char const*, std::__va_list)+0xd30>
    ea2c:	e3a07001 	mov	r7, #1
    ea30:	e58d400c 	str	r4, [sp, #12]
    ea34:	e1a03007 	mov	r3, r7
    ea38:	e1a0600c 	mov	r6, ip
    ea3c:	e1a07005 	mov	r7, r5
    ea40:	e1a04002 	mov	r4, r2
    ea44:	e1a05003 	mov	r5, r3
    ea48:	e0030996 	mul	r3, r6, r9
    ea4c:	e1a00008 	mov	r0, r8
    ea50:	e0895695 	umull	r5, r9, r5, r6
    ea54:	e1a01004 	mov	r1, r4
    ea58:	e0839009 	add	r9, r3, r9
    ea5c:	e1a02005 	mov	r2, r5
    ea60:	e1a03009 	mov	r3, r9
    ea64:	fa0018b3 	blx	14d38 <__aeabi_uldivmod>
    ea68:	e1500006 	cmp	r0, r6
    ea6c:	e2d13000 	sbcs	r3, r1, #0
    ea70:	2afffff4 	bcs	ea48 <CString::FormatV(char const*, std::__va_list)+0x2b0>
    ea74:	e1a03005 	mov	r3, r5
    ea78:	e59d400c 	ldr	r4, [sp, #12]
    ea7c:	e1a0c006 	mov	ip, r6
    ea80:	e1a05007 	mov	r5, r7
    ea84:	e1a06000 	mov	r6, r0
    ea88:	e1a08001 	mov	r8, r1
    ea8c:	e1a07003 	mov	r7, r3
    ea90:	e25aa058 	subs	sl, sl, #88	@ 0x58
    ea94:	e58db024 	str	fp, [sp, #36]	@ 0x24
    ea98:	13a0a001 	movne	sl, #1
    ea9c:	e58d4020 	str	r4, [sp, #32]
    eaa0:	e58d5028 	str	r5, [sp, #40]	@ 0x28
    eaa4:	e1a0a28a 	lsl	sl, sl, #5
    eaa8:	e28a3037 	add	r3, sl, #55	@ 0x37
    eaac:	e28da034 	add	sl, sp, #52	@ 0x34
    eab0:	e1a0b00a 	mov	fp, sl
    eab4:	e58da02c 	str	sl, [sp, #44]	@ 0x2c
    eab8:	e58d300c 	str	r3, [sp, #12]
    eabc:	e1a0a00c 	mov	sl, ip
    eac0:	ea000003 	b	ead4 <CString::FormatV(char const*, std::__va_list)+0x33c>
    eac4:	fa00189b 	blx	14d38 <__aeabi_uldivmod>
    eac8:	e1a09004 	mov	r9, r4
    eacc:	e1a06000 	mov	r6, r0
    ead0:	e1a08001 	mov	r8, r1
    ead4:	e99d0003 	ldmib	sp, {r0, r1}
    ead8:	e1a02007 	mov	r2, r7
    eadc:	e1a03009 	mov	r3, r9
    eae0:	fa001894 	blx	14d38 <__aeabi_uldivmod>
    eae4:	e1a04003 	mov	r4, r3
    eae8:	e59d300c 	ldr	r3, [sp, #12]
    eaec:	e356000a 	cmp	r6, #10
    eaf0:	e6ef6076 	uxtb	r6, r6
    eaf4:	e2d88000 	sbcs	r8, r8, #0
    eaf8:	e0833006 	add	r3, r3, r6
    eafc:	e2866030 	add	r6, r6, #48	@ 0x30
    eb00:	e1a05002 	mov	r5, r2
    eb04:	e1a00007 	mov	r0, r7
    eb08:	e6af3073 	sxtb	r3, r3
    eb0c:	e1a01009 	mov	r1, r9
    eb10:	36af3076 	sxtbcc	r3, r6
    eb14:	e58d2004 	str	r2, [sp, #4]
    eb18:	e4cb3001 	strb	r3, [fp], #1
    eb1c:	e1a0200a 	mov	r2, sl
    eb20:	e3a03000 	mov	r3, #0
    eb24:	e58d4008 	str	r4, [sp, #8]
    eb28:	fa001882 	blx	14d38 <__aeabi_uldivmod>
    eb2c:	e157000a 	cmp	r7, sl
    eb30:	e1a02000 	mov	r2, r0
    eb34:	e1a03001 	mov	r3, r1
    eb38:	e1a00005 	mov	r0, r5
    eb3c:	e1a01004 	mov	r1, r4
    eb40:	e1a07002 	mov	r7, r2
    eb44:	e1a04003 	mov	r4, r3
    eb48:	e2d99000 	sbcs	r9, r9, #0
    eb4c:	2affffdc 	bcs	eac4 <CString::FormatV(char const*, std::__va_list)+0x32c>
    eb50:	e1a0e00b 	mov	lr, fp
    eb54:	e59d4020 	ldr	r4, [sp, #32]
    eb58:	e59db024 	ldr	fp, [sp, #36]	@ 0x24
    eb5c:	e3a03000 	mov	r3, #0
    eb60:	e59d5028 	ldr	r5, [sp, #40]	@ 0x28
    eb64:	e59da02c 	ldr	sl, [sp, #44]	@ 0x2c
    eb68:	e5ce3000 	strb	r3, [lr]
    eb6c:	e1a0000a 	mov	r0, sl
    eb70:	eb00065d 	bl	104ec <strlen>
    eb74:	e59d3014 	ldr	r3, [sp, #20]
    eb78:	e1a06000 	mov	r6, r0
    eb7c:	e3530000 	cmp	r3, #0
    eb80:	1a000116 	bne	efe0 <CString::FormatV(char const*, std::__va_list)+0x848>
    eb84:	e1540000 	cmp	r4, r0
    eb88:	9a00000f 	bls	ebcc <CString::FormatV(char const*, std::__va_list)+0x434>
    eb8c:	e59d3018 	ldr	r3, [sp, #24]
    eb90:	e0444000 	sub	r4, r4, r0
    eb94:	e1a01004 	mov	r1, r4
    eb98:	e1a0000b 	mov	r0, fp
    eb9c:	e3530000 	cmp	r3, #0
    eba0:	13a06030 	movne	r6, #48	@ 0x30
    eba4:	03a06020 	moveq	r6, #32
    eba8:	ebfffc89 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ebac:	e2443001 	sub	r3, r4, #1
    ebb0:	e59b200c 	ldr	r2, [fp, #12]
    ebb4:	e2433001 	sub	r3, r3, #1
    ebb8:	e3730001 	cmn	r3, #1
    ebbc:	e2821001 	add	r1, r2, #1
    ebc0:	e58b100c 	str	r1, [fp, #12]
    ebc4:	e5c26000 	strb	r6, [r2]
    ebc8:	1afffff8 	bne	ebb0 <CString::FormatV(char const*, std::__va_list)+0x418>
    ebcc:	e1a0000a 	mov	r0, sl
    ebd0:	eb000645 	bl	104ec <strlen>
    ebd4:	e2504000 	subs	r4, r0, #0
    ebd8:	0a000002 	beq	ebe8 <CString::FormatV(char const*, std::__va_list)+0x450>
    ebdc:	e1a01004 	mov	r1, r4
    ebe0:	e1a0000b 	mov	r0, fp
    ebe4:	ebfffc7a 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ebe8:	e59b000c 	ldr	r0, [fp, #12]
    ebec:	e1a0100a 	mov	r1, sl
    ebf0:	eb0006dd 	bl	1076c <strcpy>
    ebf4:	e59b300c 	ldr	r3, [fp, #12]
    ebf8:	e0833004 	add	r3, r3, r4
    ebfc:	e58b300c 	str	r3, [fp, #12]
    ec00:	eaffff58 	b	e968 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    ec04:	e59d3004 	ldr	r3, [sp, #4]
    ec08:	e3530000 	cmp	r3, #0
    ec0c:	0a000110 	beq	f054 <CString::FormatV(char const*, std::__va_list)+0x8bc>
    ec10:	e59d3010 	ldr	r3, [sp, #16]
    ec14:	e2833007 	add	r3, r3, #7
    ec18:	e3c33007 	bic	r3, r3, #7
    ec1c:	e593e004 	ldr	lr, [r3, #4]
    ec20:	e493a008 	ldr	sl, [r3], #8
    ec24:	e35e0000 	cmp	lr, #0
    ec28:	e58d3010 	str	r3, [sp, #16]
    ec2c:	a3a03000 	movge	r3, #0
    ec30:	a58d3004 	strge	r3, [sp, #4]
    ec34:	aa000001 	bge	ec40 <CString::FormatV(char const*, std::__va_list)+0x4a8>
    ec38:	e27aa000 	rsbs	sl, sl, #0
    ec3c:	e2eee000 	rsc	lr, lr, #0
    ec40:	e35a000a 	cmp	sl, #10
    ec44:	e1a0300e 	mov	r3, lr
    ec48:	e2d33000 	sbcs	r3, r3, #0
    ec4c:	e58da00c 	str	sl, [sp, #12]
    ec50:	a3a06001 	movge	r6, #1
    ec54:	a3a07000 	movge	r7, #0
    ec58:	a1a0800e 	movge	r8, lr
    ec5c:	e58de020 	str	lr, [sp, #32]
    ec60:	ba000226 	blt	f500 <CString::FormatV(char const*, std::__va_list)+0xd68>
    ec64:	e0961006 	adds	r1, r6, r6
    ec68:	e1a0000a 	mov	r0, sl
    ec6c:	e0a73007 	adc	r3, r7, r7
    ec70:	e0911001 	adds	r1, r1, r1
    ec74:	e0a33003 	adc	r3, r3, r3
    ec78:	e0911006 	adds	r1, r1, r6
    ec7c:	e0a73003 	adc	r3, r7, r3
    ec80:	e0911001 	adds	r1, r1, r1
    ec84:	e0a33003 	adc	r3, r3, r3
    ec88:	e1a02001 	mov	r2, r1
    ec8c:	e1a06001 	mov	r6, r1
    ec90:	e1a01008 	mov	r1, r8
    ec94:	e1a07003 	mov	r7, r3
    ec98:	fa001826 	blx	14d38 <__aeabi_uldivmod>
    ec9c:	e350000a 	cmp	r0, #10
    eca0:	e2d13000 	sbcs	r3, r1, #0
    eca4:	2affffee 	bcs	ec64 <CString::FormatV(char const*, std::__va_list)+0x4cc>
    eca8:	e1a08000 	mov	r8, r0
    ecac:	e1a09001 	mov	r9, r1
    ecb0:	e28da034 	add	sl, sp, #52	@ 0x34
    ecb4:	e30c3ccd 	movw	r3, #52429	@ 0xcccd
    ecb8:	e34c3ccc 	movt	r3, #52428	@ 0xcccc
    ecbc:	e30c2ccc 	movw	r2, #52428	@ 0xcccc
    ecc0:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
    ecc4:	e58d4024 	str	r4, [sp, #36]	@ 0x24
    ecc8:	e58db028 	str	fp, [sp, #40]	@ 0x28
    eccc:	e1a04003 	mov	r4, r3
    ecd0:	e59db020 	ldr	fp, [sp, #32]
    ecd4:	e58d502c 	str	r5, [sp, #44]	@ 0x2c
    ecd8:	e1a0500a 	mov	r5, sl
    ecdc:	e58da020 	str	sl, [sp, #32]
    ece0:	e58d2008 	str	r2, [sp, #8]
    ece4:	e59da00c 	ldr	sl, [sp, #12]
    ece8:	ea000003 	b	ecfc <CString::FormatV(char const*, std::__va_list)+0x564>
    ecec:	e1a03007 	mov	r3, r7
    ecf0:	fa001810 	blx	14d38 <__aeabi_uldivmod>
    ecf4:	e1a08000 	mov	r8, r0
    ecf8:	e1a09001 	mov	r9, r1
    ecfc:	e1a03007 	mov	r3, r7
    ed00:	e1a02006 	mov	r2, r6
    ed04:	e1a0000a 	mov	r0, sl
    ed08:	e1a0100b 	mov	r1, fp
    ed0c:	fa001809 	blx	14d38 <__aeabi_uldivmod>
    ed10:	e358000a 	cmp	r8, #10
    ed14:	e6ef8078 	uxtb	r8, r8
    ed18:	e2d99000 	sbcs	r9, r9, #0
    ed1c:	e288c057 	add	ip, r8, #87	@ 0x57
    ed20:	e2888030 	add	r8, r8, #48	@ 0x30
    ed24:	e1a01003 	mov	r1, r3
    ed28:	e1a0b003 	mov	fp, r3
    ed2c:	e6afc07c 	sxtb	ip, ip
    ed30:	36afc078 	sxtbcc	ip, r8
    ed34:	e0963007 	adds	r3, r6, r7
    ed38:	e1a00002 	mov	r0, r2
    ed3c:	e2a33000 	adc	r3, r3, #0
    ed40:	e1a0a002 	mov	sl, r2
    ed44:	e4c5c001 	strb	ip, [r5], #1
    ed48:	e08c2394 	umull	r2, ip, r4, r3
    ed4c:	e3cc2003 	bic	r2, ip, #3
    ed50:	e082212c 	add	r2, r2, ip, lsr #2
    ed54:	e59dc008 	ldr	ip, [sp, #8]
    ed58:	e0433002 	sub	r3, r3, r2
    ed5c:	e0563003 	subs	r3, r6, r3
    ed60:	e2c72000 	sbc	r2, r7, #0
    ed64:	e356000a 	cmp	r6, #10
    ed68:	e2d77000 	sbcs	r7, r7, #0
    ed6c:	e007039c 	mul	r7, ip, r3
    ed70:	e0277294 	mla	r7, r4, r2, r7
    ed74:	e0836493 	umull	r6, r3, r3, r4
    ed78:	e0877003 	add	r7, r7, r3
    ed7c:	e1a060a6 	lsr	r6, r6, #1
    ed80:	e1866f87 	orr	r6, r6, r7, lsl #31
    ed84:	e1a070a7 	lsr	r7, r7, #1
    ed88:	e1a02006 	mov	r2, r6
    ed8c:	2affffd6 	bcs	ecec <CString::FormatV(char const*, std::__va_list)+0x554>
    ed90:	e1a03005 	mov	r3, r5
    ed94:	e3a02000 	mov	r2, #0
    ed98:	e59d4024 	ldr	r4, [sp, #36]	@ 0x24
    ed9c:	e59db028 	ldr	fp, [sp, #40]	@ 0x28
    eda0:	e59d502c 	ldr	r5, [sp, #44]	@ 0x2c
    eda4:	e59da020 	ldr	sl, [sp, #32]
    eda8:	e5c32000 	strb	r2, [r3]
    edac:	ea0000ce 	b	f0ec <CString::FormatV(char const*, std::__va_list)+0x954>
    edb0:	e59d3014 	ldr	r3, [sp, #20]
    edb4:	e3530000 	cmp	r3, #0
    edb8:	e59d3010 	ldr	r3, [sp, #16]
    edbc:	e1d360d0 	ldrsb	r6, [r3]
    edc0:	1a000189 	bne	f3ec <CString::FormatV(char const*, std::__va_list)+0xc54>
    edc4:	e3540001 	cmp	r4, #1
    edc8:	8a0000fe 	bhi	f1c8 <CString::FormatV(char const*, std::__va_list)+0xa30>
    edcc:	e3a01001 	mov	r1, #1
    edd0:	e1a0000b 	mov	r0, fp
    edd4:	ebfffbfe 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    edd8:	e59b300c 	ldr	r3, [fp, #12]
    eddc:	e2832001 	add	r2, r3, #1
    ede0:	e58b200c 	str	r2, [fp, #12]
    ede4:	e5c36000 	strb	r6, [r3]
    ede8:	e59d3010 	ldr	r3, [sp, #16]
    edec:	e2833004 	add	r3, r3, #4
    edf0:	e58d3010 	str	r3, [sp, #16]
    edf4:	eafffedb 	b	e968 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    edf8:	e59d3010 	ldr	r3, [sp, #16]
    edfc:	e28da034 	add	sl, sp, #52	@ 0x34
    ee00:	e1a0000a 	mov	r0, sl
    ee04:	e2836007 	add	r6, r3, #7
    ee08:	e3c66007 	bic	r6, r6, #7
    ee0c:	ed960b00 	vldr	d0, [r6]
    ee10:	ebfffdcd 	bl	e54c <CString::ftoa(char*, double, unsigned int)>
    ee14:	e1a0000a 	mov	r0, sl
    ee18:	eb0005b3 	bl	104ec <strlen>
    ee1c:	e59d3014 	ldr	r3, [sp, #20]
    ee20:	e1a07000 	mov	r7, r0
    ee24:	e3530000 	cmp	r3, #0
    ee28:	1a000185 	bne	f444 <CString::FormatV(char const*, std::__va_list)+0xcac>
    ee2c:	e1540000 	cmp	r4, r0
    ee30:	8a0000ff 	bhi	f234 <CString::FormatV(char const*, std::__va_list)+0xa9c>
    ee34:	e1a0000a 	mov	r0, sl
    ee38:	eb0005ab 	bl	104ec <strlen>
    ee3c:	e2504000 	subs	r4, r0, #0
    ee40:	0a000002 	beq	ee50 <CString::FormatV(char const*, std::__va_list)+0x6b8>
    ee44:	e1a01004 	mov	r1, r4
    ee48:	e1a0000b 	mov	r0, fp
    ee4c:	ebfffbe0 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee50:	e59b000c 	ldr	r0, [fp, #12]
    ee54:	e1a0100a 	mov	r1, sl
    ee58:	eb000643 	bl	1076c <strcpy>
    ee5c:	e59b300c 	ldr	r3, [fp, #12]
    ee60:	e0833004 	add	r3, r3, r4
    ee64:	e58b300c 	str	r3, [fp, #12]
    ee68:	e2863008 	add	r3, r6, #8
    ee6c:	e58d3010 	str	r3, [sp, #16]
    ee70:	eafffebc 	b	e968 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    ee74:	e59d3010 	ldr	r3, [sp, #16]
    ee78:	e5937000 	ldr	r7, [r3]
    ee7c:	e1a00007 	mov	r0, r7
    ee80:	eb000599 	bl	104ec <strlen>
    ee84:	e59d3014 	ldr	r3, [sp, #20]
    ee88:	e1a06000 	mov	r6, r0
    ee8c:	e3530000 	cmp	r3, #0
    ee90:	1a000138 	bne	f378 <CString::FormatV(char const*, std::__va_list)+0xbe0>
    ee94:	e1540000 	cmp	r4, r0
    ee98:	8a0000d7 	bhi	f1fc <CString::FormatV(char const*, std::__va_list)+0xa64>
    ee9c:	e1a00007 	mov	r0, r7
    eea0:	eb000591 	bl	104ec <strlen>
    eea4:	e2504000 	subs	r4, r0, #0
    eea8:	0a000002 	beq	eeb8 <CString::FormatV(char const*, std::__va_list)+0x720>
    eeac:	e1a01004 	mov	r1, r4
    eeb0:	e1a0000b 	mov	r0, fp
    eeb4:	ebfffbc6 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eeb8:	e59b000c 	ldr	r0, [fp, #12]
    eebc:	e1a01007 	mov	r1, r7
    eec0:	eb000629 	bl	1076c <strcpy>
    eec4:	e59b300c 	ldr	r3, [fp, #12]
    eec8:	e0833004 	add	r3, r3, r4
    eecc:	e58b300c 	str	r3, [fp, #12]
    eed0:	eaffffc4 	b	ede8 <CString::FormatV(char const*, std::__va_list)+0x650>
    eed4:	e3500000 	cmp	r0, #0
    eed8:	03a0c008 	moveq	ip, #8
    eedc:	0afffec3 	beq	e9f0 <CString::FormatV(char const*, std::__va_list)+0x258>
    eee0:	e3a01001 	mov	r1, #1
    eee4:	e1a0000b 	mov	r0, fp
    eee8:	ebfffbb9 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eeec:	e59b300c 	ldr	r3, [fp, #12]
    eef0:	e3a02030 	mov	r2, #48	@ 0x30
    eef4:	e3a0c008 	mov	ip, #8
    eef8:	e2831001 	add	r1, r3, #1
    eefc:	e58b100c 	str	r1, [fp, #12]
    ef00:	e5c32000 	strb	r2, [r3]
    ef04:	e59d3004 	ldr	r3, [sp, #4]
    ef08:	e1d5a0d0 	ldrsb	sl, [r5]
    ef0c:	e3530000 	cmp	r3, #0
    ef10:	e59d3010 	ldr	r3, [sp, #16]
    ef14:	1afffeb9 	bne	ea00 <CString::FormatV(char const*, std::__va_list)+0x268>
    ef18:	e4930004 	ldr	r0, [r3], #4
    ef1c:	e58d3010 	str	r3, [sp, #16]
    ef20:	e15c0000 	cmp	ip, r0
    ef24:	8a000163 	bhi	f4b8 <CString::FormatV(char const*, std::__va_list)+0xd20>
    ef28:	e3a03001 	mov	r3, #1
    ef2c:	e003039c 	mul	r3, ip, r3
    ef30:	e731f310 	udiv	r1, r0, r3
    ef34:	e1a02001 	mov	r2, r1
    ef38:	e15c0001 	cmp	ip, r1
    ef3c:	9afffffa 	bls	ef2c <CString::FormatV(char const*, std::__va_list)+0x794>
    ef40:	e25a6058 	subs	r6, sl, #88	@ 0x58
    ef44:	e28da034 	add	sl, sp, #52	@ 0x34
    ef48:	13a06001 	movne	r6, #1
    ef4c:	e1a0e00a 	mov	lr, sl
    ef50:	e1a06286 	lsl	r6, r6, #5
    ef54:	e2866037 	add	r6, r6, #55	@ 0x37
    ef58:	ea000002 	b	ef68 <CString::FormatV(char const*, std::__va_list)+0x7d0>
    ef5c:	e732f110 	udiv	r2, r0, r1
    ef60:	e1a03001 	mov	r3, r1
    ef64:	e1a01002 	mov	r1, r2
    ef68:	e0600193 	mls	r0, r3, r1, r0
    ef6c:	e6ef1072 	uxtb	r1, r2
    ef70:	e0867001 	add	r7, r6, r1
    ef74:	e2811030 	add	r1, r1, #48	@ 0x30
    ef78:	e3520009 	cmp	r2, #9
    ef7c:	96af2071 	sxtbls	r2, r1
    ef80:	86af2077 	sxtbhi	r2, r7
    ef84:	e731fc13 	udiv	r1, r3, ip
    ef88:	e15c0003 	cmp	ip, r3
    ef8c:	e4ce2001 	strb	r2, [lr], #1
    ef90:	9afffff1 	bls	ef5c <CString::FormatV(char const*, std::__va_list)+0x7c4>
    ef94:	e3a03000 	mov	r3, #0
    ef98:	e5ce3000 	strb	r3, [lr]
    ef9c:	eafffef2 	b	eb6c <CString::FormatV(char const*, std::__va_list)+0x3d4>
    efa0:	e1d5a0d1 	ldrsb	sl, [r5, #1]
    efa4:	e3a01000 	mov	r1, #0
    efa8:	e2855001 	add	r5, r5, #1
    efac:	e24a3030 	sub	r3, sl, #48	@ 0x30
    efb0:	e6ef3073 	uxtb	r3, r3
    efb4:	e3530009 	cmp	r3, #9
    efb8:	8afffe32 	bhi	e888 <CString::FormatV(char const*, std::__va_list)+0xf0>
    efbc:	e3a0200a 	mov	r2, #10
    efc0:	e021a192 	mla	r1, r2, r1, sl
    efc4:	e1f5a0d1 	ldrsb	sl, [r5, #1]!
    efc8:	e24a3030 	sub	r3, sl, #48	@ 0x30
    efcc:	e2411030 	sub	r1, r1, #48	@ 0x30
    efd0:	e6ef3073 	uxtb	r3, r3
    efd4:	e3530009 	cmp	r3, #9
    efd8:	9afffff8 	bls	efc0 <CString::FormatV(char const*, std::__va_list)+0x828>
    efdc:	eafffe29 	b	e888 <CString::FormatV(char const*, std::__va_list)+0xf0>
    efe0:	e1a0000a 	mov	r0, sl
    efe4:	eb000540 	bl	104ec <strlen>
    efe8:	e2507000 	subs	r7, r0, #0
    efec:	0a000002 	beq	effc <CString::FormatV(char const*, std::__va_list)+0x864>
    eff0:	e1a01007 	mov	r1, r7
    eff4:	e1a0000b 	mov	r0, fp
    eff8:	ebfffb75 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    effc:	e59b000c 	ldr	r0, [fp, #12]
    f000:	e1a0100a 	mov	r1, sl
    f004:	eb0005d8 	bl	1076c <strcpy>
    f008:	e59b300c 	ldr	r3, [fp, #12]
    f00c:	e1540006 	cmp	r4, r6
    f010:	e0833007 	add	r3, r3, r7
    f014:	e58b300c 	str	r3, [fp, #12]
    f018:	9afffe52 	bls	e968 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    f01c:	e0446006 	sub	r6, r4, r6
    f020:	e1a0000b 	mov	r0, fp
    f024:	e1a01006 	mov	r1, r6
    f028:	ebfffb69 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f02c:	e3a00020 	mov	r0, #32
    f030:	e2463001 	sub	r3, r6, #1
    f034:	e59b200c 	ldr	r2, [fp, #12]
    f038:	e2433001 	sub	r3, r3, #1
    f03c:	e3730001 	cmn	r3, #1
    f040:	e2821001 	add	r1, r2, #1
    f044:	e58b100c 	str	r1, [fp, #12]
    f048:	e5c20000 	strb	r0, [r2]
    f04c:	1afffff8 	bne	f034 <CString::FormatV(char const*, std::__va_list)+0x89c>
    f050:	eafffe44 	b	e968 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    f054:	e59d9010 	ldr	r9, [sp, #16]
    f058:	e4991004 	ldr	r1, [r9], #4
    f05c:	e3510000 	cmp	r1, #0
    f060:	b2611000 	rsblt	r1, r1, #0
    f064:	b3a03001 	movlt	r3, #1
    f068:	b58d3004 	strlt	r3, [sp, #4]
    f06c:	e3510009 	cmp	r1, #9
    f070:	e1a0c001 	mov	ip, r1
    f074:	c3a02001 	movgt	r2, #1
    f078:	c3a0000a 	movgt	r0, #10
    f07c:	da000124 	ble	f514 <CString::FormatV(char const*, std::__va_list)+0xd7c>
    f080:	e0020290 	mul	r2, r0, r2
    f084:	e733f211 	udiv	r3, r1, r2
    f088:	e3530009 	cmp	r3, #9
    f08c:	8afffffb 	bhi	f080 <CString::FormatV(char const*, std::__va_list)+0x8e8>
    f090:	e28da034 	add	sl, sp, #52	@ 0x34
    f094:	e30c8ccd 	movw	r8, #52429	@ 0xcccd
    f098:	e34c8ccc 	movt	r8, #52428	@ 0xcccc
    f09c:	e1a0e00a 	mov	lr, sl
    f0a0:	ea000001 	b	f0ac <CString::FormatV(char const*, std::__va_list)+0x914>
    f0a4:	e1a02003 	mov	r2, r3
    f0a8:	e733f31c 	udiv	r3, ip, r3
    f0ac:	e6ef0073 	uxtb	r0, r3
    f0b0:	e3530009 	cmp	r3, #9
    f0b4:	e736f21c 	udiv	r6, ip, r2
    f0b8:	e2801057 	add	r1, r0, #87	@ 0x57
    f0bc:	e2800030 	add	r0, r0, #48	@ 0x30
    f0c0:	e6af1071 	sxtb	r1, r1
    f0c4:	96af1070 	sxtbls	r1, r0
    f0c8:	e0830298 	umull	r0, r3, r8, r2
    f0cc:	e06cc692 	mls	ip, r2, r6, ip
    f0d0:	e3520009 	cmp	r2, #9
    f0d4:	e4ce1001 	strb	r1, [lr], #1
    f0d8:	e1a031a3 	lsr	r3, r3, #3
    f0dc:	8afffff0 	bhi	f0a4 <CString::FormatV(char const*, std::__va_list)+0x90c>
    f0e0:	e3a03000 	mov	r3, #0
    f0e4:	e58d9010 	str	r9, [sp, #16]
    f0e8:	e5ce3000 	strb	r3, [lr]
    f0ec:	e1a0000a 	mov	r0, sl
    f0f0:	eb0004fd 	bl	104ec <strlen>
    f0f4:	e59d3004 	ldr	r3, [sp, #4]
    f0f8:	e1a07000 	mov	r7, r0
    f0fc:	e3530000 	cmp	r3, #0
    f100:	e59d3014 	ldr	r3, [sp, #20]
    f104:	1a000073 	bne	f2d8 <CString::FormatV(char const*, std::__va_list)+0xb40>
    f108:	e3530000 	cmp	r3, #0
    f10c:	1a00007c 	bne	f304 <CString::FormatV(char const*, std::__va_list)+0xb6c>
    f110:	e59d3018 	ldr	r3, [sp, #24]
    f114:	e3530000 	cmp	r3, #0
    f118:	1a00005e 	bne	f298 <CString::FormatV(char const*, std::__va_list)+0xb00>
    f11c:	e1500004 	cmp	r0, r4
    f120:	2afffea9 	bcs	ebcc <CString::FormatV(char const*, std::__va_list)+0x434>
    f124:	e0444007 	sub	r4, r4, r7
    f128:	e1a0000b 	mov	r0, fp
    f12c:	e1a01004 	mov	r1, r4
    f130:	ebfffb27 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f134:	e2443001 	sub	r3, r4, #1
    f138:	e3a00020 	mov	r0, #32
    f13c:	e59b200c 	ldr	r2, [fp, #12]
    f140:	e2433001 	sub	r3, r3, #1
    f144:	e3730001 	cmn	r3, #1
    f148:	e2821001 	add	r1, r2, #1
    f14c:	e58b100c 	str	r1, [fp, #12]
    f150:	e5c20000 	strb	r0, [r2]
    f154:	1afffff8 	bne	f13c <CString::FormatV(char const*, std::__va_list)+0x9a4>
    f158:	e59d3004 	ldr	r3, [sp, #4]
    f15c:	e3530000 	cmp	r3, #0
    f160:	0afffe99 	beq	ebcc <CString::FormatV(char const*, std::__va_list)+0x434>
    f164:	ea0000dc 	b	f4dc <CString::FormatV(char const*, std::__va_list)+0xd44>
    f168:	e35a0058 	cmp	sl, #88	@ 0x58
    f16c:	e3053a3c 	movw	r3, #23100	@ 0x5a3c
    f170:	e3403001 	movt	r3, #1
    f174:	e3057a40 	movw	r7, #23104	@ 0x5a40
    f178:	e3407001 	movt	r7, #1
    f17c:	01a07003 	moveq	r7, r3
    f180:	e1a00007 	mov	r0, r7
    f184:	eb0004d8 	bl	104ec <strlen>
    f188:	e2508000 	subs	r8, r0, #0
    f18c:	0a000002 	beq	f19c <CString::FormatV(char const*, std::__va_list)+0xa04>
    f190:	e1a01008 	mov	r1, r8
    f194:	e1a0000b 	mov	r0, fp
    f198:	ebfffb0d 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f19c:	e59b000c 	ldr	r0, [fp, #12]
    f1a0:	e1a01007 	mov	r1, r7
    f1a4:	eb000570 	bl	1076c <strcpy>
    f1a8:	e59b300c 	ldr	r3, [fp, #12]
    f1ac:	e3a0c010 	mov	ip, #16
    f1b0:	e0833008 	add	r3, r3, r8
    f1b4:	e58b300c 	str	r3, [fp, #12]
    f1b8:	e1d5a0d0 	ldrsb	sl, [r5]
    f1bc:	eafffe0b 	b	e9f0 <CString::FormatV(char const*, std::__va_list)+0x258>
    f1c0:	e3a0c00a 	mov	ip, #10
    f1c4:	eafffe09 	b	e9f0 <CString::FormatV(char const*, std::__va_list)+0x258>
    f1c8:	e2441001 	sub	r1, r4, #1
    f1cc:	e1a0000b 	mov	r0, fp
    f1d0:	ebfffaff 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f1d4:	e2444002 	sub	r4, r4, #2
    f1d8:	e3a01020 	mov	r1, #32
    f1dc:	e59b300c 	ldr	r3, [fp, #12]
    f1e0:	e2444001 	sub	r4, r4, #1
    f1e4:	e3740001 	cmn	r4, #1
    f1e8:	e2832001 	add	r2, r3, #1
    f1ec:	e58b200c 	str	r2, [fp, #12]
    f1f0:	e5c31000 	strb	r1, [r3]
    f1f4:	1afffff8 	bne	f1dc <CString::FormatV(char const*, std::__va_list)+0xa44>
    f1f8:	eafffef3 	b	edcc <CString::FormatV(char const*, std::__va_list)+0x634>
    f1fc:	e0446000 	sub	r6, r4, r0
    f200:	e1a0000b 	mov	r0, fp
    f204:	e1a01006 	mov	r1, r6
    f208:	ebfffaf1 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f20c:	e2463001 	sub	r3, r6, #1
    f210:	e3a00020 	mov	r0, #32
    f214:	e59b200c 	ldr	r2, [fp, #12]
    f218:	e2433001 	sub	r3, r3, #1
    f21c:	e3730001 	cmn	r3, #1
    f220:	e2821001 	add	r1, r2, #1
    f224:	e58b100c 	str	r1, [fp, #12]
    f228:	e5c20000 	strb	r0, [r2]
    f22c:	1afffff8 	bne	f214 <CString::FormatV(char const*, std::__va_list)+0xa7c>
    f230:	eaffff19 	b	ee9c <CString::FormatV(char const*, std::__va_list)+0x704>
    f234:	e0447000 	sub	r7, r4, r0
    f238:	e1a0000b 	mov	r0, fp
    f23c:	e1a01007 	mov	r1, r7
    f240:	ebfffae3 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f244:	e2473001 	sub	r3, r7, #1
    f248:	e3a00020 	mov	r0, #32
    f24c:	e59b200c 	ldr	r2, [fp, #12]
    f250:	e2433001 	sub	r3, r3, #1
    f254:	e3730001 	cmn	r3, #1
    f258:	e2821001 	add	r1, r2, #1
    f25c:	e58b100c 	str	r1, [fp, #12]
    f260:	e5c20000 	strb	r0, [r2]
    f264:	1afffff8 	bne	f24c <CString::FormatV(char const*, std::__va_list)+0xab4>
    f268:	eafffef1 	b	ee34 <CString::FormatV(char const*, std::__va_list)+0x69c>
    f26c:	e59d3018 	ldr	r3, [sp, #24]
    f270:	e3530000 	cmp	r3, #0
    f274:	0a000096 	beq	f4d4 <CString::FormatV(char const*, std::__va_list)+0xd3c>
    f278:	e3a01001 	mov	r1, #1
    f27c:	e1a0000b 	mov	r0, fp
    f280:	ebfffad3 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f284:	e59b300c 	ldr	r3, [fp, #12]
    f288:	e3a0202d 	mov	r2, #45	@ 0x2d
    f28c:	e2831001 	add	r1, r3, #1
    f290:	e58b100c 	str	r1, [fp, #12]
    f294:	e5c32000 	strb	r2, [r3]
    f298:	e1540007 	cmp	r4, r7
    f29c:	9afffe4a 	bls	ebcc <CString::FormatV(char const*, std::__va_list)+0x434>
    f2a0:	e0444007 	sub	r4, r4, r7
    f2a4:	e1a0000b 	mov	r0, fp
    f2a8:	e1a01004 	mov	r1, r4
    f2ac:	ebfffac8 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f2b0:	e2443001 	sub	r3, r4, #1
    f2b4:	e3a00030 	mov	r0, #48	@ 0x30
    f2b8:	e59b200c 	ldr	r2, [fp, #12]
    f2bc:	e2433001 	sub	r3, r3, #1
    f2c0:	e3730001 	cmn	r3, #1
    f2c4:	e2821001 	add	r1, r2, #1
    f2c8:	e58b100c 	str	r1, [fp, #12]
    f2cc:	e5c20000 	strb	r0, [r2]
    f2d0:	1afffff8 	bne	f2b8 <CString::FormatV(char const*, std::__va_list)+0xb20>
    f2d4:	eafffe3c 	b	ebcc <CString::FormatV(char const*, std::__va_list)+0x434>
    f2d8:	e3530000 	cmp	r3, #0
    f2dc:	e2807001 	add	r7, r0, #1
    f2e0:	0affffe1 	beq	f26c <CString::FormatV(char const*, std::__va_list)+0xad4>
    f2e4:	e3a01001 	mov	r1, #1
    f2e8:	e1a0000b 	mov	r0, fp
    f2ec:	ebfffab8 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f2f0:	e59b300c 	ldr	r3, [fp, #12]
    f2f4:	e3a0202d 	mov	r2, #45	@ 0x2d
    f2f8:	e2831001 	add	r1, r3, #1
    f2fc:	e58b100c 	str	r1, [fp, #12]
    f300:	e5c32000 	strb	r2, [r3]
    f304:	e1a0000a 	mov	r0, sl
    f308:	eb000477 	bl	104ec <strlen>
    f30c:	e2506000 	subs	r6, r0, #0
    f310:	0a000002 	beq	f320 <CString::FormatV(char const*, std::__va_list)+0xb88>
    f314:	e1a01006 	mov	r1, r6
    f318:	e1a0000b 	mov	r0, fp
    f31c:	ebfffaac 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f320:	e59b000c 	ldr	r0, [fp, #12]
    f324:	e1a0100a 	mov	r1, sl
    f328:	eb00050f 	bl	1076c <strcpy>
    f32c:	e59b300c 	ldr	r3, [fp, #12]
    f330:	e1540007 	cmp	r4, r7
    f334:	e0833006 	add	r3, r3, r6
    f338:	e58b300c 	str	r3, [fp, #12]
    f33c:	9afffd89 	bls	e968 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    f340:	e0444007 	sub	r4, r4, r7
    f344:	e1a0000b 	mov	r0, fp
    f348:	e1a01004 	mov	r1, r4
    f34c:	ebfffaa0 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f350:	e3a00020 	mov	r0, #32
    f354:	e2443001 	sub	r3, r4, #1
    f358:	e59b200c 	ldr	r2, [fp, #12]
    f35c:	e2433001 	sub	r3, r3, #1
    f360:	e3730001 	cmn	r3, #1
    f364:	e2821001 	add	r1, r2, #1
    f368:	e58b100c 	str	r1, [fp, #12]
    f36c:	e5c20000 	strb	r0, [r2]
    f370:	1afffff8 	bne	f358 <CString::FormatV(char const*, std::__va_list)+0xbc0>
    f374:	eafffd7b 	b	e968 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    f378:	e1a00007 	mov	r0, r7
    f37c:	eb00045a 	bl	104ec <strlen>
    f380:	e2508000 	subs	r8, r0, #0
    f384:	0a000002 	beq	f394 <CString::FormatV(char const*, std::__va_list)+0xbfc>
    f388:	e1a01008 	mov	r1, r8
    f38c:	e1a0000b 	mov	r0, fp
    f390:	ebfffa8f 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f394:	e59b000c 	ldr	r0, [fp, #12]
    f398:	e1a01007 	mov	r1, r7
    f39c:	eb0004f2 	bl	1076c <strcpy>
    f3a0:	e59b300c 	ldr	r3, [fp, #12]
    f3a4:	e1540006 	cmp	r4, r6
    f3a8:	e0833008 	add	r3, r3, r8
    f3ac:	e58b300c 	str	r3, [fp, #12]
    f3b0:	9afffe8c 	bls	ede8 <CString::FormatV(char const*, std::__va_list)+0x650>
    f3b4:	e0446006 	sub	r6, r4, r6
    f3b8:	e1a0000b 	mov	r0, fp
    f3bc:	e1a01006 	mov	r1, r6
    f3c0:	ebfffa83 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f3c4:	e3a00020 	mov	r0, #32
    f3c8:	e2463001 	sub	r3, r6, #1
    f3cc:	e59b200c 	ldr	r2, [fp, #12]
    f3d0:	e2433001 	sub	r3, r3, #1
    f3d4:	e3730001 	cmn	r3, #1
    f3d8:	e2821001 	add	r1, r2, #1
    f3dc:	e58b100c 	str	r1, [fp, #12]
    f3e0:	e5c20000 	strb	r0, [r2]
    f3e4:	1afffff8 	bne	f3cc <CString::FormatV(char const*, std::__va_list)+0xc34>
    f3e8:	eafffe7e 	b	ede8 <CString::FormatV(char const*, std::__va_list)+0x650>
    f3ec:	e3a01001 	mov	r1, #1
    f3f0:	e1a0000b 	mov	r0, fp
    f3f4:	ebfffa76 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f3f8:	e59b300c 	ldr	r3, [fp, #12]
    f3fc:	e3540001 	cmp	r4, #1
    f400:	e2832001 	add	r2, r3, #1
    f404:	e58b200c 	str	r2, [fp, #12]
    f408:	e5c36000 	strb	r6, [r3]
    f40c:	9afffe75 	bls	ede8 <CString::FormatV(char const*, std::__va_list)+0x650>
    f410:	e2441001 	sub	r1, r4, #1
    f414:	e1a0000b 	mov	r0, fp
    f418:	ebfffa6d 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f41c:	e2444002 	sub	r4, r4, #2
    f420:	e3a01020 	mov	r1, #32
    f424:	e59b300c 	ldr	r3, [fp, #12]
    f428:	e2444001 	sub	r4, r4, #1
    f42c:	e3740001 	cmn	r4, #1
    f430:	e2832001 	add	r2, r3, #1
    f434:	e58b200c 	str	r2, [fp, #12]
    f438:	e5c31000 	strb	r1, [r3]
    f43c:	1afffff8 	bne	f424 <CString::FormatV(char const*, std::__va_list)+0xc8c>
    f440:	eafffe68 	b	ede8 <CString::FormatV(char const*, std::__va_list)+0x650>
    f444:	e1a0000a 	mov	r0, sl
    f448:	eb000427 	bl	104ec <strlen>
    f44c:	e2508000 	subs	r8, r0, #0
    f450:	0a000002 	beq	f460 <CString::FormatV(char const*, std::__va_list)+0xcc8>
    f454:	e1a01008 	mov	r1, r8
    f458:	e1a0000b 	mov	r0, fp
    f45c:	ebfffa5c 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f460:	e59b000c 	ldr	r0, [fp, #12]
    f464:	e1a0100a 	mov	r1, sl
    f468:	eb0004bf 	bl	1076c <strcpy>
    f46c:	e59b300c 	ldr	r3, [fp, #12]
    f470:	e1540007 	cmp	r4, r7
    f474:	e0833008 	add	r3, r3, r8
    f478:	e58b300c 	str	r3, [fp, #12]
    f47c:	9afffe79 	bls	ee68 <CString::FormatV(char const*, std::__va_list)+0x6d0>
    f480:	e0447007 	sub	r7, r4, r7
    f484:	e1a0000b 	mov	r0, fp
    f488:	e1a01007 	mov	r1, r7
    f48c:	ebfffa50 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f490:	e3a00020 	mov	r0, #32
    f494:	e2473001 	sub	r3, r7, #1
    f498:	e59b200c 	ldr	r2, [fp, #12]
    f49c:	e2433001 	sub	r3, r3, #1
    f4a0:	e3730001 	cmn	r3, #1
    f4a4:	e2821001 	add	r1, r2, #1
    f4a8:	e58b100c 	str	r1, [fp, #12]
    f4ac:	e5c20000 	strb	r0, [r2]
    f4b0:	1afffff8 	bne	f498 <CString::FormatV(char const*, std::__va_list)+0xd00>
    f4b4:	eafffe6b 	b	ee68 <CString::FormatV(char const*, std::__va_list)+0x6d0>
    f4b8:	e1a02000 	mov	r2, r0
    f4bc:	e3a03001 	mov	r3, #1
    f4c0:	e1a01000 	mov	r1, r0
    f4c4:	eafffe9d 	b	ef40 <CString::FormatV(char const*, std::__va_list)+0x7a8>
    f4c8:	e99d0140 	ldmib	sp, {r6, r8}
    f4cc:	e3a07001 	mov	r7, #1
    f4d0:	eafffd6e 	b	ea90 <CString::FormatV(char const*, std::__va_list)+0x2f8>
    f4d4:	e1540007 	cmp	r4, r7
    f4d8:	8affff11 	bhi	f124 <CString::FormatV(char const*, std::__va_list)+0x98c>
    f4dc:	e3a01001 	mov	r1, #1
    f4e0:	e1a0000b 	mov	r0, fp
    f4e4:	ebfffa3a 	bl	ddd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f4e8:	e59b300c 	ldr	r3, [fp, #12]
    f4ec:	e3a0202d 	mov	r2, #45	@ 0x2d
    f4f0:	e2831001 	add	r1, r3, #1
    f4f4:	e58b100c 	str	r1, [fp, #12]
    f4f8:	e5c32000 	strb	r2, [r3]
    f4fc:	eafffdb2 	b	ebcc <CString::FormatV(char const*, std::__va_list)+0x434>
    f500:	e1a0800a 	mov	r8, sl
    f504:	e1a0900e 	mov	r9, lr
    f508:	e3a06001 	mov	r6, #1
    f50c:	e3a07000 	mov	r7, #0
    f510:	eafffde6 	b	ecb0 <CString::FormatV(char const*, std::__va_list)+0x518>
    f514:	e1a03001 	mov	r3, r1
    f518:	e3a02001 	mov	r2, #1
    f51c:	eafffedb 	b	f090 <CString::FormatV(char const*, std::__va_list)+0x8f8>

0000f520 <CString::Format(char const*, ...)>:
    f520:	e92d000e 	push	{r1, r2, r3}
    f524:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    f528:	e24dd008 	sub	sp, sp, #8
    f52c:	e28d2010 	add	r2, sp, #16
    f530:	e59d100c 	ldr	r1, [sp, #12]
    f534:	e58d2004 	str	r2, [sp, #4]
    f538:	ebfffc96 	bl	e798 <CString::FormatV(char const*, std::__va_list)>
    f53c:	e28dd008 	add	sp, sp, #8
    f540:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
    f544:	e28dd00c 	add	sp, sp, #12
    f548:	e12fff1e 	bx	lr

0000f54c <__aeabi_atexit>:
    f54c:	e12fff1e 	bx	lr

0000f550 <__errno>:
    f550:	e3070714 	movw	r0, #30484	@ 0x7714
    f554:	e3400001 	movt	r0, #1
    f558:	e12fff1e 	bx	lr

0000f55c <set_qemu_exit_status>:
    f55c:	e12fff1e 	bx	lr

0000f560 <halt>:
    f560:	f10c0080 	cpsid	i
    f564:	f10c0040 	cpsid	f
    f568:	f57ff04f 	dsb	sy
    f56c:	e320f003 	wfi
    f570:	eafffffc 	b	f568 <halt+0x8>

0000f574 <reboot>:
    f574:	e3a03000 	mov	r3, #0
    f578:	e3433f10 	movt	r3, #16144	@ 0x3f10
    f57c:	e3a01001 	mov	r1, #1
    f580:	e3451a00 	movt	r1, #23040	@ 0x5a00
    f584:	e3a02020 	mov	r2, #32
    f588:	e3452a00 	movt	r2, #23040	@ 0x5a00
    f58c:	e5831024 	str	r1, [r3, #36]	@ 0x24
    f590:	e583201c 	str	r2, [r3, #28]
    f594:	eafffffe 	b	f594 <reboot+0x20>

0000f598 <sysinit>:
    f598:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    f59c:	e24ddf4d 	sub	sp, sp, #308	@ 0x134
    f5a0:	f1080040 	cpsie	f
    f5a4:	f1080080 	cpsie	i
    f5a8:	eb000814 	bl	11600 <InvalidateDataCacheL1Only>
    f5ac:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    f5b0:	e383360f 	orr	r3, r3, #15728640	@ 0xf00000
    f5b4:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    f5b8:	f57ff06f 	isb	sy
    f5bc:	e3a03101 	mov	r3, #1073741824	@ 0x40000000
    f5c0:	eee83a10 	vmsr	fpexc, r3
    f5c4:	e3a03403 	mov	r3, #50331648	@ 0x3000000
    f5c8:	eee13a10 	vmsr	fpscr, r3
    f5cc:	e30747a8 	movw	r4, #30632	@ 0x77a8
    f5d0:	e3404001 	movt	r4, #1
    f5d4:	e30706e8 	movw	r0, #30440	@ 0x76e8
    f5d8:	e3400001 	movt	r0, #1
    f5dc:	e0442000 	sub	r2, r4, r0
    f5e0:	e3a01000 	mov	r1, #0
    f5e4:	eb0005ad 	bl	10ca0 <memset>
    f5e8:	e3540982 	cmp	r4, #2129920	@ 0x208000
    f5ec:	8a000020 	bhi	f674 <sysinit+0xdc>
    f5f0:	e28d0018 	add	r0, sp, #24
    f5f4:	e307465c 	movw	r4, #30300	@ 0x765c
    f5f8:	e3404001 	movt	r4, #1
    f5fc:	ebffed20 	bl	aa84 <CMachineInfo::CMachineInfo()>
    f600:	e3a01001 	mov	r1, #1
    f604:	e28d0054 	add	r0, sp, #84	@ 0x54
    f608:	eb000a38 	bl	11ef0 <CMemorySystem::CMemorySystem(bool)>
    f60c:	e28d0008 	add	r0, sp, #8
    f610:	ebfffa09 	bl	de3c <CString::CString()>
    f614:	e3a03003 	mov	r3, #3
    f618:	e3a0202d 	mov	r2, #45	@ 0x2d
    f61c:	e3a01001 	mov	r1, #1
    f620:	e28d0008 	add	r0, sp, #8
    f624:	e58d1000 	str	r1, [sp]
    f628:	e3051a54 	movw	r1, #23124	@ 0x5a54
    f62c:	e3401001 	movt	r1, #1
    f630:	ebffffba 	bl	f520 <CString::Format(char const*, ...)>
    f634:	e28d0008 	add	r0, sp, #8
    f638:	ebfffa37 	bl	df1c <CString::operator char const*() const>
    f63c:	e3075668 	movw	r5, #30312	@ 0x7668
    f640:	e3405001 	movt	r5, #1
    f644:	e1a01000 	mov	r1, r0
    f648:	e59f004c 	ldr	r0, [pc, #76]	@ f69c <sysinit+0x104>
    f64c:	eb000446 	bl	1076c <strcpy>
    f650:	e1540005 	cmp	r4, r5
    f654:	2a000003 	bcs	f668 <sysinit+0xd0>
    f658:	e4943004 	ldr	r3, [r4], #4
    f65c:	e12fff33 	blx	r3
    f660:	e1540005 	cmp	r4, r5
    f664:	3afffffb 	bcc	f658 <sysinit+0xc0>
    f668:	ebffe280 	bl	8070 <main>
    f66c:	e3500001 	cmp	r0, #1
    f670:	0a000000 	beq	f678 <sysinit+0xe0>
    f674:	ebffffb9 	bl	f560 <halt>
    f678:	eb000684 	bl	11090 <IsChainBootEnabled>
    f67c:	e3500000 	cmp	r0, #0
    f680:	1a000000 	bne	f688 <sysinit+0xf0>
    f684:	ebffffba 	bl	f574 <reboot>
    f688:	e28d0054 	add	r0, sp, #84	@ 0x54
    f68c:	eb0009bd 	bl	11d88 <CMemorySystem::Destructor()>
    f690:	f10c0040 	cpsid	f
    f694:	eb000683 	bl	110a8 <DoChainBoot>
    f698:	eafffff9 	b	f684 <sysinit+0xec>
    f69c:	00017718 	.word	0x00017718

0000f6a0 <CTimer::CTimer(CInterruptSystem*)>:
    f6a0:	e92d4070 	push	{r4, r5, r6, lr}
    f6a4:	e1a04000 	mov	r4, r0
    f6a8:	e3a05000 	mov	r5, #0
    f6ac:	e3a06001 	mov	r6, #1
    f6b0:	e2800018 	add	r0, r0, #24
    f6b4:	e5845004 	str	r5, [r4, #4]
    f6b8:	e5841000 	str	r1, [r4]
    f6bc:	e5845008 	str	r5, [r4, #8]
    f6c0:	e5846010 	str	r6, [r4, #16]
    f6c4:	e584500c 	str	r5, [r4, #12]
    f6c8:	e5845014 	str	r5, [r4, #20]
    f6cc:	eb00139d 	bl	14548 <CPtrList::CPtrList()>
    f6d0:	e3073728 	movw	r3, #30504	@ 0x7728
    f6d4:	e3403001 	movt	r3, #1
    f6d8:	e3a02d35 	mov	r2, #3392	@ 0xd40
    f6dc:	e3402003 	movt	r2, #3
    f6e0:	e5842020 	str	r2, [r4, #32]
    f6e4:	e3a010c8 	mov	r1, #200	@ 0xc8
    f6e8:	e584601c 	str	r6, [r4, #28]
    f6ec:	e5932000 	ldr	r2, [r3]
    f6f0:	e5841024 	str	r1, [r4, #36]	@ 0x24
    f6f4:	e1520005 	cmp	r2, r5
    f6f8:	e5845028 	str	r5, [r4, #40]	@ 0x28
    f6fc:	e584503c 	str	r5, [r4, #60]	@ 0x3c
    f700:	1a000002 	bne	f710 <CTimer::CTimer(CInterruptSystem*)+0x70>
    f704:	e1a00004 	mov	r0, r4
    f708:	e5834000 	str	r4, [r3]
    f70c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f710:	e3051a60 	movw	r1, #23136	@ 0x5a60
    f714:	e3401001 	movt	r1, #1
    f718:	e3050a6c 	movw	r0, #23148	@ 0x5a6c
    f71c:	e3400001 	movt	r0, #1
    f720:	e3a02040 	mov	r2, #64	@ 0x40
    f724:	eb000c89 	bl	12950 <assertion_failed>

0000f728 <CTimer::~CTimer()>:
    f728:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f72c:	e1a08000 	mov	r8, r0
    f730:	e5900000 	ldr	r0, [r0]
    f734:	e3500000 	cmp	r0, #0
    f738:	0a00002f 	beq	f7fc <CTimer::~CTimer()+0xd4>
    f73c:	e3a03000 	mov	r3, #0
    f740:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    f744:	e3a01049 	mov	r1, #73	@ 0x49
    f748:	e2886018 	add	r6, r8, #24
    f74c:	eb000b24 	bl	123e4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    f750:	e1a00006 	mov	r0, r6
    f754:	e3047d43 	movw	r7, #19779	@ 0x4d43
    f758:	e3447b54 	movt	r7, #19284	@ 0x4b54
    f75c:	eb001386 	bl	1457c <CPtrList::GetFirst()>
    f760:	e2504000 	subs	r4, r0, #0
    f764:	0a000011 	beq	f7b0 <CTimer::~CTimer()+0x88>
    f768:	e1a01004 	mov	r1, r4
    f76c:	e1a00006 	mov	r0, r6
    f770:	eb001399 	bl	145dc <CPtrList::GetPtr(TPtrListElement*)>
    f774:	e2505000 	subs	r5, r0, #0
    f778:	0a000013 	beq	f7cc <CTimer::~CTimer()+0xa4>
    f77c:	e5953000 	ldr	r3, [r5]
    f780:	e1530007 	cmp	r3, r7
    f784:	1a000016 	bne	f7e4 <CTimer::~CTimer()+0xbc>
    f788:	e1a01004 	mov	r1, r4
    f78c:	e1a00006 	mov	r0, r6
    f790:	eb00141f 	bl	14814 <CPtrList::Remove(TPtrListElement*)>
    f794:	e3a01014 	mov	r1, #20
    f798:	e1a00005 	mov	r0, r5
    f79c:	eb000676 	bl	1117c <operator delete(void*, unsigned int)>
    f7a0:	e1a00006 	mov	r0, r6
    f7a4:	eb001374 	bl	1457c <CPtrList::GetFirst()>
    f7a8:	e2504000 	subs	r4, r0, #0
    f7ac:	1affffed 	bne	f768 <CTimer::~CTimer()+0x40>
    f7b0:	e3073728 	movw	r3, #30504	@ 0x7728
    f7b4:	e3403001 	movt	r3, #1
    f7b8:	e1a00006 	mov	r0, r6
    f7bc:	e5834000 	str	r4, [r3]
    f7c0:	eb001363 	bl	14554 <CPtrList::~CPtrList()>
    f7c4:	e1a00008 	mov	r0, r8
    f7c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f7cc:	e3051a60 	movw	r1, #23136	@ 0x5a60
    f7d0:	e3401001 	movt	r1, #1
    f7d4:	e3050a94 	movw	r0, #23188	@ 0x5a94
    f7d8:	e3400001 	movt	r0, #1
    f7dc:	e3a02057 	mov	r2, #87	@ 0x57
    f7e0:	eb000c5a 	bl	12950 <assertion_failed>
    f7e4:	e3051a60 	movw	r1, #23136	@ 0x5a60
    f7e8:	e3401001 	movt	r1, #1
    f7ec:	e3050aa0 	movw	r0, #23200	@ 0x5aa0
    f7f0:	e3400001 	movt	r0, #1
    f7f4:	e3a02058 	mov	r2, #88	@ 0x58
    f7f8:	eb000c54 	bl	12950 <assertion_failed>
    f7fc:	e3051a60 	movw	r1, #23136	@ 0x5a60
    f800:	e3401001 	movt	r1, #1
    f804:	e3050a7c 	movw	r0, #23164	@ 0x5a7c
    f808:	e3400001 	movt	r0, #1
    f80c:	e3a02046 	mov	r2, #70	@ 0x46
    f810:	eb000c4e 	bl	12950 <assertion_failed>

0000f814 <CTimer::SetTimeZone(int)>:
    f814:	e1a02000 	mov	r2, r0
    f818:	e2813e59 	add	r3, r1, #1424	@ 0x590
    f81c:	e283300f 	add	r3, r3, #15
    f820:	e300cb3e 	movw	ip, #2878	@ 0xb3e
    f824:	e153000c 	cmp	r3, ip
    f828:	93a00001 	movls	r0, #1
    f82c:	95821014 	strls	r1, [r2, #20]
    f830:	83a00000 	movhi	r0, #0
    f834:	e12fff1e 	bx	lr

0000f838 <CTimer::GetTimeZone() const>:
    f838:	e5900014 	ldr	r0, [r0, #20]
    f83c:	e12fff1e 	bx	lr

0000f840 <CTimer::SetTime(unsigned int, bool)>:
    f840:	e5903014 	ldr	r3, [r0, #20]
    f844:	e3a0c03c 	mov	ip, #60	@ 0x3c
    f848:	e92d4070 	push	{r4, r5, r6, lr}
    f84c:	e3520000 	cmp	r2, #0
    f850:	e1a04000 	mov	r4, r0
    f854:	e1a05001 	mov	r5, r1
    f858:	e003039c 	mul	r3, ip, r3
    f85c:	1a000002 	bne	f86c <CTimer::SetTime(unsigned int, bool)+0x2c>
    f860:	e3530000 	cmp	r3, #0
    f864:	ba000017 	blt	f8c8 <CTimer::SetTime(unsigned int, bool)+0x88>
    f868:	e0855003 	add	r5, r5, r3
    f86c:	e5942028 	ldr	r2, [r4, #40]	@ 0x28
    f870:	e3520000 	cmp	r2, #0
    f874:	0a000007 	beq	f898 <CTimer::SetTime(unsigned int, bool)+0x58>
    f878:	e594100c 	ldr	r1, [r4, #12]
    f87c:	e0450003 	sub	r0, r5, r3
    f880:	e1530001 	cmp	r3, r1
    f884:	d0411003 	suble	r1, r1, r3
    f888:	c3a01000 	movgt	r1, #0
    f88c:	e12fff32 	blx	r2
    f890:	e3500000 	cmp	r0, #0
    f894:	0a00000e 	beq	f8d4 <CTimer::SetTime(unsigned int, bool)+0x94>
    f898:	e5940010 	ldr	r0, [r4, #16]
    f89c:	e3500000 	cmp	r0, #0
    f8a0:	0584500c 	streq	r5, [r4, #12]
    f8a4:	0a000005 	beq	f8c0 <CTimer::SetTime(unsigned int, bool)+0x80>
    f8a8:	eb000a10 	bl	120f0 <EnterCritical>
    f8ac:	e5943010 	ldr	r3, [r4, #16]
    f8b0:	e584500c 	str	r5, [r4, #12]
    f8b4:	e3530000 	cmp	r3, #0
    f8b8:	0a000000 	beq	f8c0 <CTimer::SetTime(unsigned int, bool)+0x80>
    f8bc:	eb000a36 	bl	1219c <LeaveCritical>
    f8c0:	e3a00001 	mov	r0, #1
    f8c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f8c8:	e2632000 	rsb	r2, r3, #0
    f8cc:	e1520001 	cmp	r2, r1
    f8d0:	daffffe4 	ble	f868 <CTimer::SetTime(unsigned int, bool)+0x28>
    f8d4:	e3a00000 	mov	r0, #0
    f8d8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f8dc <CTimer::GetClockTicks()>:
    f8dc:	f57ff06f 	isb	sy
    f8e0:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
    f8e4:	e12fff1e 	bx	lr

0000f8e8 <CTimer::GetTicks() const>:
    f8e8:	e5900004 	ldr	r0, [r0, #4]
    f8ec:	e12fff1e 	bx	lr

0000f8f0 <CTimer::GetUptime() const>:
    f8f0:	e5900008 	ldr	r0, [r0, #8]
    f8f4:	e12fff1e 	bx	lr

0000f8f8 <CTimer::GetTime() const>:
    f8f8:	e590000c 	ldr	r0, [r0, #12]
    f8fc:	e12fff1e 	bx	lr

0000f900 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    f900:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f904:	e1a04000 	mov	r4, r0
    f908:	e5900010 	ldr	r0, [r0, #16]
    f90c:	e1a06001 	mov	r6, r1
    f910:	e1a07002 	mov	r7, r2
    f914:	e3500000 	cmp	r0, #0
    f918:	1a000011 	bne	f964 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
    f91c:	e594800c 	ldr	r8, [r4, #12]
    f920:	e5945004 	ldr	r5, [r4, #4]
    f924:	e3560000 	cmp	r6, #0
    f928:	0a000016 	beq	f988 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
    f92c:	e3570000 	cmp	r7, #0
    f930:	e5868000 	str	r8, [r6]
    f934:	0a000019 	beq	f9a0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
    f938:	e308351f 	movw	r3, #34079	@ 0x851f
    f93c:	e34531eb 	movt	r3, #20971	@ 0x51eb
    f940:	e3a01064 	mov	r1, #100	@ 0x64
    f944:	e3022710 	movw	r2, #10000	@ 0x2710
    f948:	e0830593 	umull	r0, r3, r3, r5
    f94c:	e3a00001 	mov	r0, #1
    f950:	e1a032a3 	lsr	r3, r3, #5
    f954:	e0655391 	mls	r5, r1, r3, r5
    f958:	e0050592 	mul	r5, r2, r5
    f95c:	e5875000 	str	r5, [r7]
    f960:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f964:	eb0009e1 	bl	120f0 <EnterCritical>
    f968:	e5943010 	ldr	r3, [r4, #16]
    f96c:	e594800c 	ldr	r8, [r4, #12]
    f970:	e3530000 	cmp	r3, #0
    f974:	e5945004 	ldr	r5, [r4, #4]
    f978:	0affffe9 	beq	f924 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    f97c:	eb000a06 	bl	1219c <LeaveCritical>
    f980:	e3560000 	cmp	r6, #0
    f984:	1affffe8 	bne	f92c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
    f988:	e3051a60 	movw	r1, #23136	@ 0x5a60
    f98c:	e3401001 	movt	r1, #1
    f990:	e3050ac8 	movw	r0, #23240	@ 0x5ac8
    f994:	e3400001 	movt	r0, #1
    f998:	e300210a 	movw	r2, #266	@ 0x10a
    f99c:	eb000beb 	bl	12950 <assertion_failed>
    f9a0:	e3051a60 	movw	r1, #23136	@ 0x5a60
    f9a4:	e3401001 	movt	r1, #1
    f9a8:	e3050ad8 	movw	r0, #23256	@ 0x5ad8
    f9ac:	e3400001 	movt	r0, #1
    f9b0:	e300210d 	movw	r2, #269	@ 0x10d
    f9b4:	eb000be5 	bl	12950 <assertion_failed>

0000f9b8 <CTimer::GetUniversalTime() const>:
    f9b8:	e5903014 	ldr	r3, [r0, #20]
    f9bc:	e3a0203c 	mov	r2, #60	@ 0x3c
    f9c0:	e590000c 	ldr	r0, [r0, #12]
    f9c4:	e0030392 	mul	r3, r2, r3
    f9c8:	e1500003 	cmp	r0, r3
    f9cc:	a0400003 	subge	r0, r0, r3
    f9d0:	b3a00000 	movlt	r0, #0
    f9d4:	e12fff1e 	bx	lr

0000f9d8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    f9d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f9dc:	e1a04000 	mov	r4, r0
    f9e0:	e5900010 	ldr	r0, [r0, #16]
    f9e4:	e1a05001 	mov	r5, r1
    f9e8:	e1a06002 	mov	r6, r2
    f9ec:	e3500000 	cmp	r0, #0
    f9f0:	1a000019 	bne	fa5c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    f9f4:	e594700c 	ldr	r7, [r4, #12]
    f9f8:	e5948004 	ldr	r8, [r4, #4]
    f9fc:	e5943014 	ldr	r3, [r4, #20]
    fa00:	e3a0203c 	mov	r2, #60	@ 0x3c
    fa04:	e0030392 	mul	r3, r2, r3
    fa08:	e1570003 	cmp	r7, r3
    fa0c:	ba000010 	blt	fa54 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
    fa10:	e3550000 	cmp	r5, #0
    fa14:	0a000018 	beq	fa7c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
    fa18:	e0477003 	sub	r7, r7, r3
    fa1c:	e3560000 	cmp	r6, #0
    fa20:	e5857000 	str	r7, [r5]
    fa24:	0a00001a 	beq	fa94 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
    fa28:	e308351f 	movw	r3, #34079	@ 0x851f
    fa2c:	e34531eb 	movt	r3, #20971	@ 0x51eb
    fa30:	e3a01064 	mov	r1, #100	@ 0x64
    fa34:	e3022710 	movw	r2, #10000	@ 0x2710
    fa38:	e0830893 	umull	r0, r3, r3, r8
    fa3c:	e3a00001 	mov	r0, #1
    fa40:	e1a032a3 	lsr	r3, r3, #5
    fa44:	e0638391 	mls	r3, r1, r3, r8
    fa48:	e0030392 	mul	r3, r2, r3
    fa4c:	e5863000 	str	r3, [r6]
    fa50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fa54:	e3a00000 	mov	r0, #0
    fa58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fa5c:	eb0009a3 	bl	120f0 <EnterCritical>
    fa60:	e5943010 	ldr	r3, [r4, #16]
    fa64:	e594700c 	ldr	r7, [r4, #12]
    fa68:	e3530000 	cmp	r3, #0
    fa6c:	e5948004 	ldr	r8, [r4, #4]
    fa70:	0affffe1 	beq	f9fc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    fa74:	eb0009c8 	bl	1219c <LeaveCritical>
    fa78:	eaffffdf 	b	f9fc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    fa7c:	e3051a60 	movw	r1, #23136	@ 0x5a60
    fa80:	e3401001 	movt	r1, #1
    fa84:	e3050ac8 	movw	r0, #23240	@ 0x5ac8
    fa88:	e3400001 	movt	r0, #1
    fa8c:	e300212f 	movw	r2, #303	@ 0x12f
    fa90:	eb000bae 	bl	12950 <assertion_failed>
    fa94:	e3051a60 	movw	r1, #23136	@ 0x5a60
    fa98:	e3401001 	movt	r1, #1
    fa9c:	e3050ad8 	movw	r0, #23256	@ 0x5ad8
    faa0:	e3400001 	movt	r0, #1
    faa4:	e3002132 	movw	r2, #306	@ 0x132
    faa8:	eb000ba8 	bl	12950 <assertion_failed>

0000faac <CTimer::GetTimeString()>:
    faac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fab0:	e1a04000 	mov	r4, r0
    fab4:	e5900010 	ldr	r0, [r0, #16]
    fab8:	e24dd014 	sub	sp, sp, #20
    fabc:	e3500000 	cmp	r0, #0
    fac0:	1a000067 	bne	fc64 <CTimer::GetTimeString()+0x1b8>
    fac4:	e594500c 	ldr	r5, [r4, #12]
    fac8:	e594a004 	ldr	sl, [r4, #4]
    facc:	e195300a 	orrs	r3, r5, sl
    fad0:	01a0a003 	moveq	sl, r3
    fad4:	0a000054 	beq	fc2c <CTimer::GetTimeString()+0x180>
    fad8:	e3088889 	movw	r8, #34953	@ 0x8889
    fadc:	e3488888 	movt	r8, #34952	@ 0x8888
    fae0:	e30a4aab 	movw	r4, #43691	@ 0xaaab
    fae4:	e34a4aaa 	movt	r4, #43690	@ 0xaaaa
    fae8:	e3050c29 	movw	r0, #23593	@ 0x5c29
    faec:	e34c028f 	movt	r0, #49807	@ 0xc28f
    faf0:	e0832598 	umull	r2, r3, r8, r5
    faf4:	e30de70a 	movw	lr, #55050	@ 0xd70a
    faf8:	e340e0a3 	movt	lr, #163	@ 0xa3
    fafc:	e30067b2 	movw	r6, #1970	@ 0x7b2
    fb00:	e300c16d 	movw	ip, #365	@ 0x16d
    fb04:	e1a072a3 	lsr	r7, r3, #5
    fb08:	e1a03007 	mov	r3, r7
    fb0c:	e0882798 	umull	r2, r8, r8, r7
    fb10:	e3a0203c 	mov	r2, #60	@ 0x3c
    fb14:	e1a092a8 	lsr	r9, r8, #5
    fb18:	e0675792 	mls	r7, r2, r7, r5
    fb1c:	e0683992 	mls	r8, r2, r9, r3
    fb20:	e3052c28 	movw	r2, #23592	@ 0x5c28
    fb24:	e340228f 	movt	r2, #655	@ 0x28f
    fb28:	e0843994 	umull	r3, r4, r4, r9
    fb2c:	e1a04224 	lsr	r4, r4, #4
    fb30:	ea000007 	b	fb54 <CTimer::GetTimeString()+0xa8>
    fb34:	e3160003 	tst	r6, #3
    fb38:	03a03001 	moveq	r3, #1
    fb3c:	13a03000 	movne	r3, #0
    fb40:	e083100c 	add	r1, r3, ip
    fb44:	e1540001 	cmp	r4, r1
    fb48:	3a00000a 	bcc	fb78 <CTimer::GetTimeString()+0xcc>
    fb4c:	e0444001 	sub	r4, r4, r1
    fb50:	e2866001 	add	r6, r6, #1
    fb54:	e0030690 	mul	r3, r0, r6
    fb58:	e1520163 	cmp	r2, r3, ror #2
    fb5c:	3afffff4 	bcc	fb34 <CTimer::GetTimeString()+0x88>
    fb60:	e15e0263 	cmp	lr, r3, ror #4
    fb64:	23a03001 	movcs	r3, #1
    fb68:	33a03000 	movcc	r3, #0
    fb6c:	e083100c 	add	r1, r3, ip
    fb70:	e1540001 	cmp	r4, r1
    fb74:	2afffff4 	bcs	fb4c <CTimer::GetTimeString()+0xa0>
    fb78:	e3050c60 	movw	r0, #23648	@ 0x5c60
    fb7c:	e3400001 	movt	r0, #1
    fb80:	e3a05000 	mov	r5, #0
    fb84:	ea000001 	b	fb90 <CTimer::GetTimeString()+0xe4>
    fb88:	e0444001 	sub	r4, r4, r1
    fb8c:	e2855001 	add	r5, r5, #1
    fb90:	e3550001 	cmp	r5, #1
    fb94:	13a02000 	movne	r2, #0
    fb98:	02032001 	andeq	r2, r3, #1
    fb9c:	e3520000 	cmp	r2, #0
    fba0:	13a0101d 	movne	r1, #29
    fba4:	07901105 	ldreq	r1, [r0, r5, lsl #2]
    fba8:	e1540001 	cmp	r4, r1
    fbac:	2afffff5 	bcs	fb88 <CTimer::GetTimeString()+0xdc>
    fbb0:	e308b51f 	movw	fp, #34079	@ 0x851f
    fbb4:	e345b1eb 	movt	fp, #20971	@ 0x51eb
    fbb8:	e3a00010 	mov	r0, #16
    fbbc:	e08b3a9b 	umull	r3, fp, fp, sl
    fbc0:	e3a03064 	mov	r3, #100	@ 0x64
    fbc4:	e1a0b2ab 	lsr	fp, fp, #5
    fbc8:	e06bab93 	mls	fp, r3, fp, sl
    fbcc:	eb000552 	bl	1111c <operator new(unsigned int)>
    fbd0:	e1a0a000 	mov	sl, r0
    fbd4:	ebfff898 	bl	de3c <CString::CString()>
    fbd8:	e30037b7 	movw	r3, #1975	@ 0x7b7
    fbdc:	e1560003 	cmp	r6, r3
    fbe0:	9a000014 	bls	fc38 <CTimer::GetTimeString()+0x18c>
    fbe4:	e30a2aab 	movw	r2, #43691	@ 0xaaab
    fbe8:	e34a2aaa 	movt	r2, #43690	@ 0xaaaa
    fbec:	e58db00c 	str	fp, [sp, #12]
    fbf0:	e2843001 	add	r3, r4, #1
    fbf4:	e58d7008 	str	r7, [sp, #8]
    fbf8:	e1a0000a 	mov	r0, sl
    fbfc:	e0821992 	umull	r1, r2, r2, r9
    fc00:	e3a01018 	mov	r1, #24
    fc04:	e58d8004 	str	r8, [sp, #4]
    fc08:	e1a02222 	lsr	r2, r2, #4
    fc0c:	e0629291 	mls	r2, r1, r2, r9
    fc10:	e3051aec 	movw	r1, #23276	@ 0x5aec
    fc14:	e3401001 	movt	r1, #1
    fc18:	e58d2000 	str	r2, [sp]
    fc1c:	e3072670 	movw	r2, #30320	@ 0x7670
    fc20:	e3402001 	movt	r2, #1
    fc24:	e7922105 	ldr	r2, [r2, r5, lsl #2]
    fc28:	ebfffe3c 	bl	f520 <CString::Format(char const*, ...)>
    fc2c:	e1a0000a 	mov	r0, sl
    fc30:	e28dd014 	add	sp, sp, #20
    fc34:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc38:	e1a0000a 	mov	r0, sl
    fc3c:	e1a03008 	mov	r3, r8
    fc40:	e1a02009 	mov	r2, r9
    fc44:	e58db004 	str	fp, [sp, #4]
    fc48:	e58d7000 	str	r7, [sp]
    fc4c:	e3051b08 	movw	r1, #23304	@ 0x5b08
    fc50:	e3401001 	movt	r1, #1
    fc54:	ebfffe31 	bl	f520 <CString::Format(char const*, ...)>
    fc58:	e1a0000a 	mov	r0, sl
    fc5c:	e28dd014 	add	sp, sp, #20
    fc60:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc64:	eb000921 	bl	120f0 <EnterCritical>
    fc68:	e5943010 	ldr	r3, [r4, #16]
    fc6c:	e594500c 	ldr	r5, [r4, #12]
    fc70:	e3530000 	cmp	r3, #0
    fc74:	e594a004 	ldr	sl, [r4, #4]
    fc78:	0affff93 	beq	facc <CTimer::GetTimeString()+0x20>
    fc7c:	eb000946 	bl	1219c <LeaveCritical>
    fc80:	eaffff91 	b	facc <CTimer::GetTimeString()+0x20>

0000fc84 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    fc84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fc88:	e1a08000 	mov	r8, r0
    fc8c:	e3a00014 	mov	r0, #20
    fc90:	e1a05001 	mov	r5, r1
    fc94:	e1a04002 	mov	r4, r2
    fc98:	e1a09003 	mov	r9, r3
    fc9c:	eb00051e 	bl	1111c <operator new(unsigned int)>
    fca0:	e5987004 	ldr	r7, [r8, #4]
    fca4:	e3540000 	cmp	r4, #0
    fca8:	e0877005 	add	r7, r7, r5
    fcac:	0a00003c 	beq	fda4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
    fcb0:	e1a06000 	mov	r6, r0
    fcb4:	e5804004 	str	r4, [r0, #4]
    fcb8:	e598001c 	ldr	r0, [r8, #28]
    fcbc:	e59d3020 	ldr	r3, [sp, #32]
    fcc0:	e5863010 	str	r3, [r6, #16]
    fcc4:	e3500000 	cmp	r0, #0
    fcc8:	e3043d43 	movw	r3, #19779	@ 0x4d43
    fccc:	e3443b54 	movt	r3, #19284	@ 0x4b54
    fcd0:	e5867008 	str	r7, [r6, #8]
    fcd4:	e586900c 	str	r9, [r6, #12]
    fcd8:	e5863000 	str	r3, [r6]
    fcdc:	1a000025 	bne	fd78 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
    fce0:	e2885018 	add	r5, r8, #24
    fce4:	e1a00005 	mov	r0, r5
    fce8:	eb001223 	bl	1457c <CPtrList::GetFirst()>
    fcec:	e2504000 	subs	r4, r0, #0
    fcf0:	0a000033 	beq	fdc4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    fcf4:	e3049d43 	movw	r9, #19779	@ 0x4d43
    fcf8:	e3449b54 	movt	r9, #19284	@ 0x4b54
    fcfc:	e1a01004 	mov	r1, r4
    fd00:	e1a00005 	mov	r0, r5
    fd04:	eb001234 	bl	145dc <CPtrList::GetPtr(TPtrListElement*)>
    fd08:	e3500000 	cmp	r0, #0
    fd0c:	0a00000d 	beq	fd48 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
    fd10:	e5903000 	ldr	r3, [r0]
    fd14:	e1530009 	cmp	r3, r9
    fd18:	1a000010 	bne	fd60 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    fd1c:	e5903008 	ldr	r3, [r0, #8]
    fd20:	e0433007 	sub	r3, r3, r7
    fd24:	e3530000 	cmp	r3, #0
    fd28:	ca000014 	bgt	fd80 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    fd2c:	e1a01004 	mov	r1, r4
    fd30:	e1a00005 	mov	r0, r5
    fd34:	eb001212 	bl	14584 <CPtrList::GetNext(TPtrListElement*)>
    fd38:	e3500000 	cmp	r0, #0
    fd3c:	0a000020 	beq	fdc4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    fd40:	e1a04000 	mov	r4, r0
    fd44:	eaffffec 	b	fcfc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
    fd48:	e3051a60 	movw	r1, #23136	@ 0x5a60
    fd4c:	e3401001 	movt	r1, #1
    fd50:	e3050b1c 	movw	r0, #23324	@ 0x5b1c
    fd54:	e3400001 	movt	r0, #1
    fd58:	e3002199 	movw	r2, #409	@ 0x199
    fd5c:	eb000afb 	bl	12950 <assertion_failed>
    fd60:	e3051a60 	movw	r1, #23136	@ 0x5a60
    fd64:	e3401001 	movt	r1, #1
    fd68:	e3050b2c 	movw	r0, #23340	@ 0x5b2c
    fd6c:	e3400001 	movt	r0, #1
    fd70:	e300219a 	movw	r2, #410	@ 0x19a
    fd74:	eb000af5 	bl	12950 <assertion_failed>
    fd78:	eb0008dc 	bl	120f0 <EnterCritical>
    fd7c:	eaffffd7 	b	fce0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
    fd80:	e1a02006 	mov	r2, r6
    fd84:	e1a01004 	mov	r1, r4
    fd88:	e1a00005 	mov	r0, r5
    fd8c:	eb001228 	bl	14634 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    fd90:	e598301c 	ldr	r3, [r8, #28]
    fd94:	e3530000 	cmp	r3, #0
    fd98:	1a000007 	bne	fdbc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    fd9c:	e1a00006 	mov	r0, r6
    fda0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fda4:	e3051a60 	movw	r1, #23136	@ 0x5a60
    fda8:	e3401001 	movt	r1, #1
    fdac:	e3060020 	movw	r0, #24608	@ 0x6020
    fdb0:	e3400001 	movt	r0, #1
    fdb4:	e3002189 	movw	r2, #393	@ 0x189
    fdb8:	eb000ae4 	bl	12950 <assertion_failed>
    fdbc:	eb0008f6 	bl	1219c <LeaveCritical>
    fdc0:	eafffff5 	b	fd9c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
    fdc4:	e1a02006 	mov	r2, r6
    fdc8:	e1a01004 	mov	r1, r4
    fdcc:	e1a00005 	mov	r0, r5
    fdd0:	eb001253 	bl	14724 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    fdd4:	eaffffed 	b	fd90 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>

0000fdd8 <CTimer::CancelKernelTimer(unsigned int)>:
    fdd8:	e92d4070 	push	{r4, r5, r6, lr}
    fddc:	e2514000 	subs	r4, r1, #0
    fde0:	0a00001a 	beq	fe50 <CTimer::CancelKernelTimer(unsigned int)+0x78>
    fde4:	e1a05000 	mov	r5, r0
    fde8:	e590001c 	ldr	r0, [r0, #28]
    fdec:	e3500000 	cmp	r0, #0
    fdf0:	1a000014 	bne	fe48 <CTimer::CancelKernelTimer(unsigned int)+0x70>
    fdf4:	e2856018 	add	r6, r5, #24
    fdf8:	e1a01004 	mov	r1, r4
    fdfc:	e1a00006 	mov	r0, r6
    fe00:	eb0012cd 	bl	1493c <CPtrList::Find(void*)>
    fe04:	e2501000 	subs	r1, r0, #0
    fe08:	0a000009 	beq	fe34 <CTimer::CancelKernelTimer(unsigned int)+0x5c>
    fe0c:	e5942000 	ldr	r2, [r4]
    fe10:	e3043d43 	movw	r3, #19779	@ 0x4d43
    fe14:	e3443b54 	movt	r3, #19284	@ 0x4b54
    fe18:	e1520003 	cmp	r2, r3
    fe1c:	1a000011 	bne	fe68 <CTimer::CancelKernelTimer(unsigned int)+0x90>
    fe20:	e1a00006 	mov	r0, r6
    fe24:	eb00127a 	bl	14814 <CPtrList::Remove(TPtrListElement*)>
    fe28:	e3a01014 	mov	r1, #20
    fe2c:	e1a00004 	mov	r0, r4
    fe30:	eb0004d1 	bl	1117c <operator delete(void*, unsigned int)>
    fe34:	e595301c 	ldr	r3, [r5, #28]
    fe38:	e3530000 	cmp	r3, #0
    fe3c:	08bd8070 	popeq	{r4, r5, r6, pc}
    fe40:	e8bd4070 	pop	{r4, r5, r6, lr}
    fe44:	ea0008d4 	b	1219c <LeaveCritical>
    fe48:	eb0008a8 	bl	120f0 <EnterCritical>
    fe4c:	eaffffe8 	b	fdf4 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    fe50:	e3051a60 	movw	r1, #23136	@ 0x5a60
    fe54:	e3401001 	movt	r1, #1
    fe58:	e3050a94 	movw	r0, #23188	@ 0x5a94
    fe5c:	e3400001 	movt	r0, #1
    fe60:	e30021b6 	movw	r2, #438	@ 0x1b6
    fe64:	eb000ab9 	bl	12950 <assertion_failed>
    fe68:	e3051a60 	movw	r1, #23136	@ 0x5a60
    fe6c:	e3401001 	movt	r1, #1
    fe70:	e3050aa0 	movw	r0, #23200	@ 0x5aa0
    fe74:	e3400001 	movt	r0, #1
    fe78:	e30021bd 	movw	r2, #445	@ 0x1bd
    fe7c:	eb000ab3 	bl	12950 <assertion_failed>

0000fe80 <CTimer::PollKernelTimers()>:
    fe80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fe84:	e1a06000 	mov	r6, r0
    fe88:	e590001c 	ldr	r0, [r0, #28]
    fe8c:	e3500000 	cmp	r0, #0
    fe90:	1a00003e 	bne	ff90 <CTimer::PollKernelTimers()+0x110>
    fe94:	e2867018 	add	r7, r6, #24
    fe98:	e1a00007 	mov	r0, r7
    fe9c:	eb0011b6 	bl	1457c <CPtrList::GetFirst()>
    fea0:	e2505000 	subs	r5, r0, #0
    fea4:	0a000028 	beq	ff4c <CTimer::PollKernelTimers()+0xcc>
    fea8:	e3048d43 	movw	r8, #19779	@ 0x4d43
    feac:	e3448b54 	movt	r8, #19284	@ 0x4b54
    feb0:	e1a01005 	mov	r1, r5
    feb4:	e1a00007 	mov	r0, r7
    feb8:	eb0011c7 	bl	145dc <CPtrList::GetPtr(TPtrListElement*)>
    febc:	e2504000 	subs	r4, r0, #0
    fec0:	0a000034 	beq	ff98 <CTimer::PollKernelTimers()+0x118>
    fec4:	e5943000 	ldr	r3, [r4]
    fec8:	e1530008 	cmp	r3, r8
    fecc:	1a000037 	bne	ffb0 <CTimer::PollKernelTimers()+0x130>
    fed0:	e5962004 	ldr	r2, [r6, #4]
    fed4:	e5943008 	ldr	r3, [r4, #8]
    fed8:	e0433002 	sub	r3, r3, r2
    fedc:	e3530000 	cmp	r3, #0
    fee0:	ca000019 	bgt	ff4c <CTimer::PollKernelTimers()+0xcc>
    fee4:	e1a01005 	mov	r1, r5
    fee8:	e1a00007 	mov	r0, r7
    feec:	eb0011a4 	bl	14584 <CPtrList::GetNext(TPtrListElement*)>
    fef0:	e1a01005 	mov	r1, r5
    fef4:	e1a03000 	mov	r3, r0
    fef8:	e1a00007 	mov	r0, r7
    fefc:	e1a05003 	mov	r5, r3
    ff00:	eb001243 	bl	14814 <CPtrList::Remove(TPtrListElement*)>
    ff04:	e596301c 	ldr	r3, [r6, #28]
    ff08:	e3530000 	cmp	r3, #0
    ff0c:	1a000013 	bne	ff60 <CTimer::PollKernelTimers()+0xe0>
    ff10:	e5943004 	ldr	r3, [r4, #4]
    ff14:	e3530000 	cmp	r3, #0
    ff18:	0a000014 	beq	ff70 <CTimer::PollKernelTimers()+0xf0>
    ff1c:	e5942010 	ldr	r2, [r4, #16]
    ff20:	e1a00004 	mov	r0, r4
    ff24:	e594100c 	ldr	r1, [r4, #12]
    ff28:	e12fff33 	blx	r3
    ff2c:	e1a00004 	mov	r0, r4
    ff30:	e3a01014 	mov	r1, #20
    ff34:	eb000490 	bl	1117c <operator delete(void*, unsigned int)>
    ff38:	e596001c 	ldr	r0, [r6, #28]
    ff3c:	e3500000 	cmp	r0, #0
    ff40:	1a000010 	bne	ff88 <CTimer::PollKernelTimers()+0x108>
    ff44:	e3550000 	cmp	r5, #0
    ff48:	1affffd8 	bne	feb0 <CTimer::PollKernelTimers()+0x30>
    ff4c:	e596301c 	ldr	r3, [r6, #28]
    ff50:	e3530000 	cmp	r3, #0
    ff54:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    ff58:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ff5c:	ea00088e 	b	1219c <LeaveCritical>
    ff60:	eb00088d 	bl	1219c <LeaveCritical>
    ff64:	e5943004 	ldr	r3, [r4, #4]
    ff68:	e3530000 	cmp	r3, #0
    ff6c:	1affffea 	bne	ff1c <CTimer::PollKernelTimers()+0x9c>
    ff70:	e3051a60 	movw	r1, #23136	@ 0x5a60
    ff74:	e3401001 	movt	r1, #1
    ff78:	e3060020 	movw	r0, #24608	@ 0x6020
    ff7c:	e3400001 	movt	r0, #1
    ff80:	e30021e1 	movw	r2, #481	@ 0x1e1
    ff84:	eb000a71 	bl	12950 <assertion_failed>
    ff88:	eb000858 	bl	120f0 <EnterCritical>
    ff8c:	eaffffec 	b	ff44 <CTimer::PollKernelTimers()+0xc4>
    ff90:	eb000856 	bl	120f0 <EnterCritical>
    ff94:	eaffffbe 	b	fe94 <CTimer::PollKernelTimers()+0x14>
    ff98:	e3051a60 	movw	r1, #23136	@ 0x5a60
    ff9c:	e3401001 	movt	r1, #1
    ffa0:	e3050a94 	movw	r0, #23188	@ 0x5a94
    ffa4:	e3400001 	movt	r0, #1
    ffa8:	e30021d2 	movw	r2, #466	@ 0x1d2
    ffac:	eb000a67 	bl	12950 <assertion_failed>
    ffb0:	e3051a60 	movw	r1, #23136	@ 0x5a60
    ffb4:	e3401001 	movt	r1, #1
    ffb8:	e3050aa0 	movw	r0, #23200	@ 0x5aa0
    ffbc:	e3400001 	movt	r0, #1
    ffc0:	e30021d3 	movw	r2, #467	@ 0x1d3
    ffc4:	eb000a61 	bl	12950 <assertion_failed>

0000ffc8 <CTimer::InterruptHandler()>:
    ffc8:	e92d4070 	push	{r4, r5, r6, lr}
    ffcc:	e1a04000 	mov	r4, r0
    ffd0:	ec5e3f2e 	mrrc	15, 2, r3, lr, cr14
    ffd4:	e3a0c000 	mov	ip, #0
    ffd8:	e3022710 	movw	r2, #10000	@ 0x2710
    ffdc:	e0933002 	adds	r3, r3, r2
    ffe0:	e1a0100c 	mov	r1, ip
    ffe4:	e1a00003 	mov	r0, r3
    ffe8:	e2ae2000 	adc	r2, lr, #0
    ffec:	e1a0300c 	mov	r3, ip
    fff0:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
    fff4:	e5940010 	ldr	r0, [r4, #16]
    fff8:	e150000c 	cmp	r0, ip
    fffc:	1a00001e 	bne	1007c <CTimer::InterruptHandler()+0xb4>
   10000:	e5943004 	ldr	r3, [r4, #4]
   10004:	e3051c29 	movw	r1, #23593	@ 0x5c29
   10008:	e34c128f 	movt	r1, #49807	@ 0xc28f
   1000c:	e3052c28 	movw	r2, #23592	@ 0x5c28
   10010:	e340228f 	movt	r2, #655	@ 0x28f
   10014:	e2833001 	add	r3, r3, #1
   10018:	e5843004 	str	r3, [r4, #4]
   1001c:	e0030391 	mul	r3, r1, r3
   10020:	e1520163 	cmp	r2, r3, ror #2
   10024:	2a00000d 	bcs	10060 <CTimer::InterruptHandler()+0x98>
   10028:	e1a00004 	mov	r0, r4
   1002c:	ebffff93 	bl	fe80 <CTimer::PollKernelTimers()>
   10030:	e594303c 	ldr	r3, [r4, #60]	@ 0x3c
   10034:	e3530000 	cmp	r3, #0
   10038:	08bd8070 	popeq	{r4, r5, r6, pc}
   1003c:	e2846028 	add	r6, r4, #40	@ 0x28
   10040:	e3a05000 	mov	r5, #0
   10044:	e5b63004 	ldr	r3, [r6, #4]!
   10048:	e2855001 	add	r5, r5, #1
   1004c:	e12fff33 	blx	r3
   10050:	e594303c 	ldr	r3, [r4, #60]	@ 0x3c
   10054:	e1530005 	cmp	r3, r5
   10058:	8afffff9 	bhi	10044 <CTimer::InterruptHandler()+0x7c>
   1005c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10060:	e5943008 	ldr	r3, [r4, #8]
   10064:	e2833001 	add	r3, r3, #1
   10068:	e5843008 	str	r3, [r4, #8]
   1006c:	e594300c 	ldr	r3, [r4, #12]
   10070:	e2833001 	add	r3, r3, #1
   10074:	e584300c 	str	r3, [r4, #12]
   10078:	eaffffea 	b	10028 <CTimer::InterruptHandler()+0x60>
   1007c:	eb00081b 	bl	120f0 <EnterCritical>
   10080:	e5943004 	ldr	r3, [r4, #4]
   10084:	e3051c29 	movw	r1, #23593	@ 0x5c29
   10088:	e34c128f 	movt	r1, #49807	@ 0xc28f
   1008c:	e2833001 	add	r3, r3, #1
   10090:	e5843004 	str	r3, [r4, #4]
   10094:	e3052c28 	movw	r2, #23592	@ 0x5c28
   10098:	e340228f 	movt	r2, #655	@ 0x28f
   1009c:	e5940010 	ldr	r0, [r4, #16]
   100a0:	e0030391 	mul	r3, r1, r3
   100a4:	e1520163 	cmp	r2, r3, ror #2
   100a8:	2a000003 	bcs	100bc <CTimer::InterruptHandler()+0xf4>
   100ac:	e3500000 	cmp	r0, #0
   100b0:	0affffdc 	beq	10028 <CTimer::InterruptHandler()+0x60>
   100b4:	eb000838 	bl	1219c <LeaveCritical>
   100b8:	eaffffda 	b	10028 <CTimer::InterruptHandler()+0x60>
   100bc:	e5943008 	ldr	r3, [r4, #8]
   100c0:	e2833001 	add	r3, r3, #1
   100c4:	e5843008 	str	r3, [r4, #8]
   100c8:	e594300c 	ldr	r3, [r4, #12]
   100cc:	e2833001 	add	r3, r3, #1
   100d0:	e584300c 	str	r3, [r4, #12]
   100d4:	eafffff4 	b	100ac <CTimer::InterruptHandler()+0xe4>

000100d8 <CTimer::InterruptHandler(void*)>:
   100d8:	e3500000 	cmp	r0, #0
   100dc:	0a000000 	beq	100e4 <CTimer::InterruptHandler(void*)+0xc>
   100e0:	eaffffb8 	b	ffc8 <CTimer::InterruptHandler()>
   100e4:	e3051a60 	movw	r1, #23136	@ 0x5a60
   100e8:	e3401001 	movt	r1, #1
   100ec:	e3050b54 	movw	r0, #23380	@ 0x5b54
   100f0:	e3400001 	movt	r0, #1
   100f4:	e3a02f8a 	mov	r2, #552	@ 0x228
   100f8:	e92d4010 	push	{r4, lr}
   100fc:	eb000a13 	bl	12950 <assertion_failed>

00010100 <CTimer::TuneMsDelay()>:
   10100:	e92d4070 	push	{r4, r5, r6, lr}
   10104:	e1a06000 	mov	r6, r0
   10108:	e5900020 	ldr	r0, [r0, #32]
   1010c:	e3a02ffa 	mov	r2, #1000	@ 0x3e8
   10110:	e24dd008 	sub	sp, sp, #8
   10114:	e5964004 	ldr	r4, [r6, #4]
   10118:	e3025710 	movw	r5, #10000	@ 0x2710
   1011c:	e0000092 	mul	r0, r2, r0
   10120:	eb000c88 	bl	13348 <DelayLoop>
   10124:	e5962004 	ldr	r2, [r6, #4]
   10128:	e5963020 	ldr	r3, [r6, #32]
   1012c:	e0422004 	sub	r2, r2, r4
   10130:	e308451f 	movw	r4, #34079	@ 0x851f
   10134:	e34541eb 	movt	r4, #20971	@ 0x51eb
   10138:	e735f215 	udiv	r5, r5, r2
   1013c:	e0030593 	mul	r3, r3, r5
   10140:	e0832394 	umull	r2, r3, r4, r3
   10144:	e3042dd3 	movw	r2, #19923	@ 0x4dd3
   10148:	e3412062 	movt	r2, #4194	@ 0x1062
   1014c:	e1a032a3 	lsr	r3, r3, #5
   10150:	e5863020 	str	r3, [r6, #32]
   10154:	e2833f7d 	add	r3, r3, #500	@ 0x1f4
   10158:	e0832392 	umull	r2, r3, r2, r3
   1015c:	e1a03323 	lsr	r3, r3, #6
   10160:	e5863024 	str	r3, [r6, #36]	@ 0x24
   10164:	e0843594 	umull	r3, r4, r4, r5
   10168:	ebffe85b 	bl	a2dc <CLogger::Get()>
   1016c:	e3a02064 	mov	r2, #100	@ 0x64
   10170:	e59f1024 	ldr	r1, [pc, #36]	@ 1019c <CTimer::TuneMsDelay()+0x9c>
   10174:	e3053b60 	movw	r3, #23392	@ 0x5b60
   10178:	e3403001 	movt	r3, #1
   1017c:	e1a042a4 	lsr	r4, r4, #5
   10180:	e58d4000 	str	r4, [sp]
   10184:	e0655492 	mls	r5, r2, r4, r5
   10188:	e3a02003 	mov	r2, #3
   1018c:	e58d5004 	str	r5, [sp, #4]
   10190:	ebffea1a 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10194:	e28dd008 	add	sp, sp, #8
   10198:	e8bd8070 	pop	{r4, r5, r6, pc}
   1019c:	00015c90 	.word	0x00015c90

000101a0 <CTimer::Initialize()>:
   101a0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   101a4:	e1a04000 	mov	r4, r0
   101a8:	e5900000 	ldr	r0, [r0]
   101ac:	e24dd00c 	sub	sp, sp, #12
   101b0:	e3500000 	cmp	r0, #0
   101b4:	0a000028 	beq	1025c <CTimer::Initialize()+0xbc>
   101b8:	e1a03004 	mov	r3, r4
   101bc:	e3a01049 	mov	r1, #73	@ 0x49
   101c0:	e30020d8 	movw	r2, #216	@ 0xd8
   101c4:	e3402001 	movt	r2, #1
   101c8:	eb000852 	bl	12318 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   101cc:	ec5c3f0e 	mrrc	15, 0, r3, ip, cr14
   101d0:	e3a05000 	mov	r5, #0
   101d4:	e3022710 	movw	r2, #10000	@ 0x2710
   101d8:	e0933002 	adds	r3, r3, r2
   101dc:	e1a01005 	mov	r1, r5
   101e0:	e1a00003 	mov	r0, r3
   101e4:	e2ac6000 	adc	r6, ip, #0
   101e8:	e1a07005 	mov	r7, r5
   101ec:	ec460f2e 	mcrr	15, 2, r0, r6, cr14
   101f0:	e3a03001 	mov	r3, #1
   101f4:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
   101f8:	e1a00004 	mov	r0, r4
   101fc:	ebffffbf 	bl	10100 <CTimer::TuneMsDelay()>
   10200:	ee1e4f10 	mrc	15, 0, r4, cr14, cr0, {0}
   10204:	e3a01101 	mov	r1, #1073741824	@ 0x40000000
   10208:	e3a02b3e 	mov	r2, #63488	@ 0xf800
   1020c:	e3402124 	movt	r2, #292	@ 0x124
   10210:	e30a3aab 	movw	r3, #43691	@ 0xaaab
   10214:	e34036aa 	movt	r3, #1706	@ 0x6aa
   10218:	e5916008 	ldr	r6, [r1, #8]
   1021c:	e1560003 	cmp	r6, r3
   10220:	01540002 	cmpeq	r4, r2
   10224:	1a000002 	bne	10234 <CTimer::Initialize()+0x94>
   10228:	e3a00001 	mov	r0, #1
   1022c:	e28dd00c 	add	sp, sp, #12
   10230:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10234:	ebffe828 	bl	a2dc <CLogger::Get()>
   10238:	e59f1034 	ldr	r1, [pc, #52]	@ 10274 <CTimer::Initialize()+0xd4>
   1023c:	e1a02005 	mov	r2, r5
   10240:	e88d0050 	stm	sp, {r4, r6}
   10244:	e3053b78 	movw	r3, #23416	@ 0x5b78
   10248:	e3403001 	movt	r3, #1
   1024c:	ebffe9eb 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10250:	e3a00001 	mov	r0, #1
   10254:	e28dd00c 	add	sp, sp, #12
   10258:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1025c:	e3051a60 	movw	r1, #23136	@ 0x5a60
   10260:	e3401001 	movt	r1, #1
   10264:	e3050a7c 	movw	r0, #23164	@ 0x5a7c
   10268:	e3400001 	movt	r0, #1
   1026c:	e3a02064 	mov	r2, #100	@ 0x64
   10270:	eb0009b6 	bl	12950 <assertion_failed>
   10274:	00015c90 	.word	0x00015c90

00010278 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
   10278:	e5903028 	ldr	r3, [r0, #40]	@ 0x28
   1027c:	e92d4010 	push	{r4, lr}
   10280:	e3530000 	cmp	r3, #0
   10284:	1a000008 	bne	102ac <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x34>
   10288:	e3510000 	cmp	r1, #0
   1028c:	e5801028 	str	r1, [r0, #40]	@ 0x28
   10290:	18bd8010 	popne	{r4, pc}
   10294:	e3051a60 	movw	r1, #23136	@ 0x5a60
   10298:	e3401001 	movt	r1, #1
   1029c:	e3050bd0 	movw	r0, #23504	@ 0x5bd0
   102a0:	e3400001 	movt	r0, #1
   102a4:	e3a02d09 	mov	r2, #576	@ 0x240
   102a8:	eb0009a8 	bl	12950 <assertion_failed>
   102ac:	e3051a60 	movw	r1, #23136	@ 0x5a60
   102b0:	e3401001 	movt	r1, #1
   102b4:	e3050bb4 	movw	r0, #23476	@ 0x5bb4
   102b8:	e3400001 	movt	r0, #1
   102bc:	e300223e 	movw	r2, #574	@ 0x23e
   102c0:	eb0009a2 	bl	12950 <assertion_failed>

000102c4 <CTimer::RegisterPeriodicHandler(void (*)())>:
   102c4:	e3510000 	cmp	r1, #0
   102c8:	e92d4010 	push	{r4, lr}
   102cc:	0a00000a 	beq	102fc <CTimer::RegisterPeriodicHandler(void (*)())+0x38>
   102d0:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   102d4:	e3530003 	cmp	r3, #3
   102d8:	8a00000d 	bhi	10314 <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   102dc:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   102e0:	e0803103 	add	r3, r0, r3, lsl #2
   102e4:	e583102c 	str	r1, [r3, #44]	@ 0x2c
   102e8:	f57ff04f 	dsb	sy
   102ec:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   102f0:	e2833001 	add	r3, r3, #1
   102f4:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   102f8:	e8bd8010 	pop	{r4, pc}
   102fc:	e3051a60 	movw	r1, #23136	@ 0x5a60
   10300:	e3401001 	movt	r1, #1
   10304:	e3060020 	movw	r0, #24608	@ 0x6020
   10308:	e3400001 	movt	r0, #1
   1030c:	e3002245 	movw	r2, #581	@ 0x245
   10310:	eb00098e 	bl	12950 <assertion_failed>
   10314:	e3051a60 	movw	r1, #23136	@ 0x5a60
   10318:	e3401001 	movt	r1, #1
   1031c:	e3050bec 	movw	r0, #23532	@ 0x5bec
   10320:	e3400001 	movt	r0, #1
   10324:	e3002247 	movw	r2, #583	@ 0x247
   10328:	eb000988 	bl	12950 <assertion_failed>

0001032c <CTimer::SimpleMsDelay(unsigned int)>:
   1032c:	e3500000 	cmp	r0, #0
   10330:	012fff1e 	bxeq	lr
   10334:	e3a03ffa 	mov	r3, #1000	@ 0x3e8
   10338:	e0000093 	mul	r0, r3, r0
   1033c:	e3500000 	cmp	r0, #0
   10340:	012fff1e 	bxeq	lr
   10344:	e2800001 	add	r0, r0, #1
   10348:	f57ff06f 	isb	sy
   1034c:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
   10350:	f57ff06f 	isb	sy
   10354:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
   10358:	e0433002 	sub	r3, r3, r2
   1035c:	e1500003 	cmp	r0, r3
   10360:	8afffffa 	bhi	10350 <CTimer::SimpleMsDelay(unsigned int)+0x24>
   10364:	e12fff1e 	bx	lr

00010368 <CTimer::SimpleusDelay(unsigned int)>:
   10368:	e3500000 	cmp	r0, #0
   1036c:	012fff1e 	bxeq	lr
   10370:	e2800001 	add	r0, r0, #1
   10374:	f57ff06f 	isb	sy
   10378:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
   1037c:	f57ff06f 	isb	sy
   10380:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
   10384:	e0433002 	sub	r3, r3, r2
   10388:	e1500003 	cmp	r0, r3
   1038c:	8afffffa 	bhi	1037c <CTimer::SimpleusDelay(unsigned int)+0x14>
   10390:	e12fff1e 	bx	lr

00010394 <CTimer::IsLeapYear(unsigned int)>:
   10394:	e3053c29 	movw	r3, #23593	@ 0x5c29
   10398:	e34c328f 	movt	r3, #49807	@ 0xc28f
   1039c:	e3052c28 	movw	r2, #23592	@ 0x5c28
   103a0:	e340228f 	movt	r2, #655	@ 0x28f
   103a4:	e0030093 	mul	r3, r3, r0
   103a8:	e1520163 	cmp	r2, r3, ror #2
   103ac:	2a000003 	bcs	103c0 <CTimer::IsLeapYear(unsigned int)+0x2c>
   103b0:	e3100003 	tst	r0, #3
   103b4:	03a00001 	moveq	r0, #1
   103b8:	13a00000 	movne	r0, #0
   103bc:	e12fff1e 	bx	lr
   103c0:	e30d270a 	movw	r2, #55050	@ 0xd70a
   103c4:	e34020a3 	movt	r2, #163	@ 0xa3
   103c8:	e1520263 	cmp	r2, r3, ror #4
   103cc:	23a00001 	movcs	r0, #1
   103d0:	33a00000 	movcc	r0, #0
   103d4:	e12fff1e 	bx	lr

000103d8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   103d8:	e3500001 	cmp	r0, #1
   103dc:	0a000003 	beq	103f0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
   103e0:	e3053c60 	movw	r3, #23648	@ 0x5c60
   103e4:	e3403001 	movt	r3, #1
   103e8:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   103ec:	e12fff1e 	bx	lr
   103f0:	e3053c29 	movw	r3, #23593	@ 0x5c29
   103f4:	e34c328f 	movt	r3, #49807	@ 0xc28f
   103f8:	e3052c28 	movw	r2, #23592	@ 0x5c28
   103fc:	e340228f 	movt	r2, #655	@ 0x28f
   10400:	e0030193 	mul	r3, r3, r1
   10404:	e1520163 	cmp	r2, r3, ror #2
   10408:	2a000003 	bcs	1041c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
   1040c:	e3110003 	tst	r1, #3
   10410:	1afffff2 	bne	103e0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   10414:	e3a0001d 	mov	r0, #29
   10418:	e12fff1e 	bx	lr
   1041c:	e30d270a 	movw	r2, #55050	@ 0xd70a
   10420:	e34020a3 	movt	r2, #163	@ 0xa3
   10424:	e1520263 	cmp	r2, r3, ror #4
   10428:	3affffec 	bcc	103e0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   1042c:	eafffff8 	b	10414 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>

00010430 <CTimer::Get()>:
   10430:	e3073728 	movw	r3, #30504	@ 0x7728
   10434:	e3403001 	movt	r3, #1
   10438:	e5930000 	ldr	r0, [r3]
   1043c:	e3500000 	cmp	r0, #0
   10440:	112fff1e 	bxne	lr
   10444:	e3051a60 	movw	r1, #23136	@ 0x5a60
   10448:	e3401001 	movt	r1, #1
   1044c:	e3050c20 	movw	r0, #23584	@ 0x5c20
   10450:	e3400001 	movt	r0, #1
   10454:	e3a02fa2 	mov	r2, #648	@ 0x288
   10458:	e92d4010 	push	{r4, lr}
   1045c:	eb00093b 	bl	12950 <assertion_failed>

00010460 <memmove>:
   10460:	e1500001 	cmp	r0, r1
   10464:	9a000002 	bls	10474 <memmove+0x14>
   10468:	e0813002 	add	r3, r1, r2
   1046c:	e1530000 	cmp	r3, r0
   10470:	8a000000 	bhi	10478 <memmove+0x18>
   10474:	ea000220 	b	10cfc <memcpy>
   10478:	e3520000 	cmp	r2, #0
   1047c:	e080c002 	add	ip, r0, r2
   10480:	012fff1e 	bxeq	lr
   10484:	e1a0200c 	mov	r2, ip
   10488:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   1048c:	e562c001 	strb	ip, [r2, #-1]!
   10490:	e1510003 	cmp	r1, r3
   10494:	1afffffb 	bne	10488 <memmove+0x28>
   10498:	e12fff1e 	bx	lr

0001049c <memcmp>:
   1049c:	e242c001 	sub	ip, r2, #1
   104a0:	e3520000 	cmp	r2, #0
   104a4:	0a00000c 	beq	104dc <memcmp+0x40>
   104a8:	e2403001 	sub	r3, r0, #1
   104ac:	e2411001 	sub	r1, r1, #1
   104b0:	e080000c 	add	r0, r0, ip
   104b4:	ea000002 	b	104c4 <memcmp+0x28>
   104b8:	3a000009 	bcc	104e4 <memcmp+0x48>
   104bc:	e1530000 	cmp	r3, r0
   104c0:	0a000005 	beq	104dc <memcmp+0x40>
   104c4:	e5f3c001 	ldrb	ip, [r3, #1]!
   104c8:	e5f12001 	ldrb	r2, [r1, #1]!
   104cc:	e15c0002 	cmp	ip, r2
   104d0:	9afffff8 	bls	104b8 <memcmp+0x1c>
   104d4:	e3a00001 	mov	r0, #1
   104d8:	e12fff1e 	bx	lr
   104dc:	e3a00000 	mov	r0, #0
   104e0:	e12fff1e 	bx	lr
   104e4:	e3e00000 	mvn	r0, #0
   104e8:	e12fff1e 	bx	lr

000104ec <strlen>:
   104ec:	e1a03000 	mov	r3, r0
   104f0:	e0d300d1 	ldrsb	r0, [r3], #1
   104f4:	e3500000 	cmp	r0, #0
   104f8:	012fff1e 	bxeq	lr
   104fc:	e3a00000 	mov	r0, #0
   10500:	e0d320d1 	ldrsb	r2, [r3], #1
   10504:	e2800001 	add	r0, r0, #1
   10508:	e3520000 	cmp	r2, #0
   1050c:	1afffffb 	bne	10500 <strlen+0x14>
   10510:	e12fff1e 	bx	lr

00010514 <strcmp>:
   10514:	e1d030d0 	ldrsb	r3, [r0]
   10518:	e3530000 	cmp	r3, #0
   1051c:	01d120d0 	ldrsbeq	r2, [r1]
   10520:	1a000006 	bne	10540 <strcmp+0x2c>
   10524:	ea000009 	b	10550 <strcmp+0x3c>
   10528:	e1520003 	cmp	r2, r3
   1052c:	ba00000c 	blt	10564 <strcmp+0x50>
   10530:	ca00000d 	bgt	1056c <strcmp+0x58>
   10534:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10538:	e3530000 	cmp	r3, #0
   1053c:	0a00000c 	beq	10574 <strcmp+0x60>
   10540:	e1a0c001 	mov	ip, r1
   10544:	e0d120d1 	ldrsb	r2, [r1], #1
   10548:	e3520000 	cmp	r2, #0
   1054c:	1afffff5 	bne	10528 <strcmp+0x14>
   10550:	e1530002 	cmp	r3, r2
   10554:	ca000002 	bgt	10564 <strcmp+0x50>
   10558:	a3a00000 	movge	r0, #0
   1055c:	b3e00000 	mvnlt	r0, #0
   10560:	e12fff1e 	bx	lr
   10564:	e3a00001 	mov	r0, #1
   10568:	e12fff1e 	bx	lr
   1056c:	e3e00000 	mvn	r0, #0
   10570:	e12fff1e 	bx	lr
   10574:	e1dc20d1 	ldrsb	r2, [ip, #1]
   10578:	e1530002 	cmp	r3, r2
   1057c:	dafffff5 	ble	10558 <strcmp+0x44>
   10580:	eafffff7 	b	10564 <strcmp+0x50>

00010584 <strcasecmp>:
   10584:	e2400001 	sub	r0, r0, #1
   10588:	ea000009 	b	105b4 <strcasecmp+0x30>
   1058c:	e0d130d1 	ldrsb	r3, [r1], #1
   10590:	e243c061 	sub	ip, r3, #97	@ 0x61
   10594:	e35c0019 	cmp	ip, #25
   10598:	92433020 	subls	r3, r3, #32
   1059c:	9a000001 	bls	105a8 <strcasecmp+0x24>
   105a0:	e3530000 	cmp	r3, #0
   105a4:	0a000012 	beq	105f4 <strcasecmp+0x70>
   105a8:	e1520003 	cmp	r2, r3
   105ac:	ca000012 	bgt	105fc <strcasecmp+0x78>
   105b0:	ba000013 	blt	10604 <strcasecmp+0x80>
   105b4:	e1f020d1 	ldrsb	r2, [r0, #1]!
   105b8:	e2423061 	sub	r3, r2, #97	@ 0x61
   105bc:	e3530019 	cmp	r3, #25
   105c0:	92422020 	subls	r2, r2, #32
   105c4:	9afffff0 	bls	1058c <strcasecmp+0x8>
   105c8:	e3520000 	cmp	r2, #0
   105cc:	1affffee 	bne	1058c <strcasecmp+0x8>
   105d0:	e1d130d0 	ldrsb	r3, [r1]
   105d4:	e2431061 	sub	r1, r3, #97	@ 0x61
   105d8:	e3510019 	cmp	r1, #25
   105dc:	8a000004 	bhi	105f4 <strcasecmp+0x70>
   105e0:	e2433020 	sub	r3, r3, #32
   105e4:	e1530002 	cmp	r3, r2
   105e8:	d3a00000 	movle	r0, #0
   105ec:	c3e00000 	mvngt	r0, #0
   105f0:	e12fff1e 	bx	lr
   105f4:	e1530002 	cmp	r3, r2
   105f8:	aafffff9 	bge	105e4 <strcasecmp+0x60>
   105fc:	e3a00001 	mov	r0, #1
   10600:	e12fff1e 	bx	lr
   10604:	e3e00000 	mvn	r0, #0
   10608:	e12fff1e 	bx	lr

0001060c <strncmp>:
   1060c:	e3520000 	cmp	r2, #0
   10610:	0a00001b 	beq	10684 <strncmp+0x78>
   10614:	e92d4010 	push	{r4, lr}
   10618:	ea000007 	b	1063c <strncmp+0x30>
   1061c:	e0d1c0d1 	ldrsb	ip, [r1], #1
   10620:	e35c0000 	cmp	ip, #0
   10624:	0a000009 	beq	10650 <strncmp+0x44>
   10628:	e153000c 	cmp	r3, ip
   1062c:	ca00000e 	bgt	1066c <strncmp+0x60>
   10630:	ba00000f 	blt	10674 <strncmp+0x68>
   10634:	e2522001 	subs	r2, r2, #1
   10638:	0a00000f 	beq	1067c <strncmp+0x70>
   1063c:	e1a04000 	mov	r4, r0
   10640:	e0d030d1 	ldrsb	r3, [r0], #1
   10644:	e1a0e001 	mov	lr, r1
   10648:	e3530000 	cmp	r3, #0
   1064c:	1afffff2 	bne	1061c <strncmp+0x10>
   10650:	e1d420d0 	ldrsb	r2, [r4]
   10654:	e1de30d0 	ldrsb	r3, [lr]
   10658:	e1520003 	cmp	r2, r3
   1065c:	ca000002 	bgt	1066c <strncmp+0x60>
   10660:	a3a00000 	movge	r0, #0
   10664:	b3e00000 	mvnlt	r0, #0
   10668:	e8bd8010 	pop	{r4, pc}
   1066c:	e3a00001 	mov	r0, #1
   10670:	e8bd8010 	pop	{r4, pc}
   10674:	e3e00000 	mvn	r0, #0
   10678:	e8bd8010 	pop	{r4, pc}
   1067c:	e1a00002 	mov	r0, r2
   10680:	e8bd8010 	pop	{r4, pc}
   10684:	e1a00002 	mov	r0, r2
   10688:	e12fff1e 	bx	lr

0001068c <strncasecmp>:
   1068c:	e1a0c000 	mov	ip, r0
   10690:	e2520000 	subs	r0, r2, #0
   10694:	012fff1e 	bxeq	lr
   10698:	e24cc001 	sub	ip, ip, #1
   1069c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   106a0:	e2432061 	sub	r2, r3, #97	@ 0x61
   106a4:	e3520019 	cmp	r2, #25
   106a8:	92433020 	subls	r3, r3, #32
   106ac:	8a00000c 	bhi	106e4 <strncasecmp+0x58>
   106b0:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   106b4:	e0d120d1 	ldrsb	r2, [r1], #1
   106b8:	e242e061 	sub	lr, r2, #97	@ 0x61
   106bc:	e35e0019 	cmp	lr, #25
   106c0:	92422020 	subls	r2, r2, #32
   106c4:	9a000011 	bls	10710 <strncasecmp+0x84>
   106c8:	e3520000 	cmp	r2, #0
   106cc:	1a00000f 	bne	10710 <strncasecmp+0x84>
   106d0:	e1530002 	cmp	r3, r2
   106d4:	ca00001e 	bgt	10754 <strncasecmp+0xc8>
   106d8:	a3a00000 	movge	r0, #0
   106dc:	b3e00000 	mvnlt	r0, #0
   106e0:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   106e4:	e3530000 	cmp	r3, #0
   106e8:	1afffff0 	bne	106b0 <strncasecmp+0x24>
   106ec:	e1d120d0 	ldrsb	r2, [r1]
   106f0:	e2421061 	sub	r1, r2, #97	@ 0x61
   106f4:	e3510019 	cmp	r1, #25
   106f8:	92422020 	subls	r2, r2, #32
   106fc:	e1530002 	cmp	r3, r2
   10700:	ca000017 	bgt	10764 <strncasecmp+0xd8>
   10704:	a3a00000 	movge	r0, #0
   10708:	b3e00000 	mvnlt	r0, #0
   1070c:	e12fff1e 	bx	lr
   10710:	e1520003 	cmp	r2, r3
   10714:	ba00000e 	blt	10754 <strncasecmp+0xc8>
   10718:	ca00000f 	bgt	1075c <strncasecmp+0xd0>
   1071c:	e2500001 	subs	r0, r0, #1
   10720:	049df004 	popeq	{pc}		@ (ldreq pc, [sp], #4)
   10724:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   10728:	e2432061 	sub	r2, r3, #97	@ 0x61
   1072c:	e3520019 	cmp	r2, #25
   10730:	92433020 	subls	r3, r3, #32
   10734:	9affffde 	bls	106b4 <strncasecmp+0x28>
   10738:	e3530000 	cmp	r3, #0
   1073c:	1affffdc 	bne	106b4 <strncasecmp+0x28>
   10740:	e1d120d0 	ldrsb	r2, [r1]
   10744:	e2421061 	sub	r1, r2, #97	@ 0x61
   10748:	e3510019 	cmp	r1, #25
   1074c:	92422020 	subls	r2, r2, #32
   10750:	eaffffde 	b	106d0 <strncasecmp+0x44>
   10754:	e3a00001 	mov	r0, #1
   10758:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1075c:	e3e00000 	mvn	r0, #0
   10760:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   10764:	e3a00001 	mov	r0, #1
   10768:	e12fff1e 	bx	lr

0001076c <strcpy>:
   1076c:	e1d130d0 	ldrsb	r3, [r1]
   10770:	e1a02000 	mov	r2, r0
   10774:	e3530000 	cmp	r3, #0
   10778:	0a000003 	beq	1078c <strcpy+0x20>
   1077c:	e4c23001 	strb	r3, [r2], #1
   10780:	e1f130d1 	ldrsb	r3, [r1, #1]!
   10784:	e3530000 	cmp	r3, #0
   10788:	1afffffb 	bne	1077c <strcpy+0x10>
   1078c:	e3a03000 	mov	r3, #0
   10790:	e5c23000 	strb	r3, [r2]
   10794:	e12fff1e 	bx	lr

00010798 <strncpy>:
   10798:	e3520000 	cmp	r2, #0
   1079c:	012fff1e 	bxeq	lr
   107a0:	e2411001 	sub	r1, r1, #1
   107a4:	e1a0c000 	mov	ip, r0
   107a8:	ea000002 	b	107b8 <strncpy+0x20>
   107ac:	e2522001 	subs	r2, r2, #1
   107b0:	e4cc3001 	strb	r3, [ip], #1
   107b4:	012fff1e 	bxeq	lr
   107b8:	e1f130d1 	ldrsb	r3, [r1, #1]!
   107bc:	e3530000 	cmp	r3, #0
   107c0:	1afffff9 	bne	107ac <strncpy+0x14>
   107c4:	e5cc3000 	strb	r3, [ip]
   107c8:	e12fff1e 	bx	lr

000107cc <strcat>:
   107cc:	e1d030d0 	ldrsb	r3, [r0]
   107d0:	e3530000 	cmp	r3, #0
   107d4:	e1a03000 	mov	r3, r0
   107d8:	0a000002 	beq	107e8 <strcat+0x1c>
   107dc:	e1f320d1 	ldrsb	r2, [r3, #1]!
   107e0:	e3520000 	cmp	r2, #0
   107e4:	1afffffc 	bne	107dc <strcat+0x10>
   107e8:	e1d120d0 	ldrsb	r2, [r1]
   107ec:	e3520000 	cmp	r2, #0
   107f0:	0a000003 	beq	10804 <strcat+0x38>
   107f4:	e4c32001 	strb	r2, [r3], #1
   107f8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   107fc:	e3520000 	cmp	r2, #0
   10800:	1afffffb 	bne	107f4 <strcat+0x28>
   10804:	e3a02000 	mov	r2, #0
   10808:	e5c32000 	strb	r2, [r3]
   1080c:	e12fff1e 	bx	lr

00010810 <strchr>:
   10810:	e1d030d0 	ldrsb	r3, [r0]
   10814:	e3530000 	cmp	r3, #0
   10818:	0a000004 	beq	10830 <strchr+0x20>
   1081c:	e1530001 	cmp	r3, r1
   10820:	012fff1e 	bxeq	lr
   10824:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10828:	e3530000 	cmp	r3, #0
   1082c:	1afffffa 	bne	1081c <strchr+0xc>
   10830:	e1a00003 	mov	r0, r3
   10834:	e12fff1e 	bx	lr

00010838 <strstr>:
   10838:	e92d4010 	push	{r4, lr}
   1083c:	e1d140d0 	ldrsb	r4, [r1]
   10840:	e1d030d0 	ldrsb	r3, [r0]
   10844:	e3530000 	cmp	r3, #0
   10848:	1a000002 	bne	10858 <strstr+0x20>
   1084c:	e3540000 	cmp	r4, #0
   10850:	13a00000 	movne	r0, #0
   10854:	e8bd8010 	pop	{r4, pc}
   10858:	e3540000 	cmp	r4, #0
   1085c:	08bd8010 	popeq	{r4, pc}
   10860:	e2402001 	sub	r2, r0, #1
   10864:	e1a0e001 	mov	lr, r1
   10868:	e1a03004 	mov	r3, r4
   1086c:	ea000002 	b	1087c <strstr+0x44>
   10870:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   10874:	e3530000 	cmp	r3, #0
   10878:	08bd8010 	popeq	{r4, pc}
   1087c:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   10880:	e15c0003 	cmp	ip, r3
   10884:	0afffff9 	beq	10870 <strstr+0x38>
   10888:	e1f030d1 	ldrsb	r3, [r0, #1]!
   1088c:	e3530000 	cmp	r3, #0
   10890:	1afffff2 	bne	10860 <strstr+0x28>
   10894:	e1a00003 	mov	r0, r3
   10898:	e8bd8010 	pop	{r4, pc}

0001089c <strtok_r>:
   1089c:	e92d4030 	push	{r4, r5, lr}
   108a0:	e3500000 	cmp	r0, #0
   108a4:	e1a05001 	mov	r5, r1
   108a8:	e1a04002 	mov	r4, r2
   108ac:	0a00002d 	beq	10968 <strtok_r+0xcc>
   108b0:	e1d0c0d0 	ldrsb	ip, [r0]
   108b4:	e35c0000 	cmp	ip, #0
   108b8:	0a000026 	beq	10958 <strtok_r+0xbc>
   108bc:	e1d510d0 	ldrsb	r1, [r5]
   108c0:	e2802001 	add	r2, r0, #1
   108c4:	e3510000 	cmp	r1, #0
   108c8:	0a00000a 	beq	108f8 <strtok_r+0x5c>
   108cc:	e1a0e005 	mov	lr, r5
   108d0:	e1a03001 	mov	r3, r1
   108d4:	ea000002 	b	108e4 <strtok_r+0x48>
   108d8:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   108dc:	e3530000 	cmp	r3, #0
   108e0:	0a000004 	beq	108f8 <strtok_r+0x5c>
   108e4:	e153000c 	cmp	r3, ip
   108e8:	1afffffa 	bne	108d8 <strtok_r+0x3c>
   108ec:	e1a00002 	mov	r0, r2
   108f0:	e0d2c0d1 	ldrsb	ip, [r2], #1
   108f4:	eafffff4 	b	108cc <strtok_r+0x30>
   108f8:	e35c0000 	cmp	ip, #0
   108fc:	0a000015 	beq	10958 <strtok_r+0xbc>
   10900:	e1a02000 	mov	r2, r0
   10904:	e3510000 	cmp	r1, #0
   10908:	1a000006 	bne	10928 <strtok_r+0x8c>
   1090c:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   10910:	e35c0000 	cmp	ip, #0
   10914:	1afffffc 	bne	1090c <strtok_r+0x70>
   10918:	ea00000c 	b	10950 <strtok_r+0xb4>
   1091c:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   10920:	e35c0000 	cmp	ip, #0
   10924:	0a000009 	beq	10950 <strtok_r+0xb4>
   10928:	e1a0e005 	mov	lr, r5
   1092c:	e1a03001 	mov	r3, r1
   10930:	ea000002 	b	10940 <strtok_r+0xa4>
   10934:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   10938:	e3530000 	cmp	r3, #0
   1093c:	0afffff6 	beq	1091c <strtok_r+0x80>
   10940:	e153000c 	cmp	r3, ip
   10944:	1afffffa 	bne	10934 <strtok_r+0x98>
   10948:	e3a03000 	mov	r3, #0
   1094c:	e4c23001 	strb	r3, [r2], #1
   10950:	e5842000 	str	r2, [r4]
   10954:	e8bd8030 	pop	{r4, r5, pc}
   10958:	e3a03000 	mov	r3, #0
   1095c:	e5843000 	str	r3, [r4]
   10960:	e3a00000 	mov	r0, #0
   10964:	e8bd8030 	pop	{r4, r5, pc}
   10968:	e5920000 	ldr	r0, [r2]
   1096c:	e3500000 	cmp	r0, #0
   10970:	1affffce 	bne	108b0 <strtok_r+0x14>
   10974:	eafffff9 	b	10960 <strtok_r+0xc4>

00010978 <strtoul>:
   10978:	e92d4070 	push	{r4, r5, r6, lr}
   1097c:	e2515000 	subs	r5, r1, #0
   10980:	e2423002 	sub	r3, r2, #2
   10984:	15850000 	strne	r0, [r5]
   10988:	e3520000 	cmp	r2, #0
   1098c:	13530022 	cmpne	r3, #34	@ 0x22
   10990:	8a000049 	bhi	10abc <strtoul+0x144>
   10994:	e1d030d0 	ldrsb	r3, [r0]
   10998:	e1a0e000 	mov	lr, r0
   1099c:	e2800001 	add	r0, r0, #1
   109a0:	e243c009 	sub	ip, r3, #9
   109a4:	e3530020 	cmp	r3, #32
   109a8:	0afffff9 	beq	10994 <strtoul+0x1c>
   109ac:	e6efc07c 	uxtb	ip, ip
   109b0:	e35c0004 	cmp	ip, #4
   109b4:	9afffff6 	bls	10994 <strtoul+0x1c>
   109b8:	e353002b 	cmp	r3, #43	@ 0x2b
   109bc:	0a00002c 	beq	10a74 <strtoul+0xfc>
   109c0:	e353002d 	cmp	r3, #45	@ 0x2d
   109c4:	03a06001 	moveq	r6, #1
   109c8:	13a06000 	movne	r6, #0
   109cc:	01de30d1 	ldrsbeq	r3, [lr, #1]
   109d0:	01a0e000 	moveq	lr, r0
   109d4:	e3530030 	cmp	r3, #48	@ 0x30
   109d8:	0a00002a 	beq	10a88 <strtoul+0x110>
   109dc:	e3520000 	cmp	r2, #0
   109e0:	03a0200a 	moveq	r2, #10
   109e4:	e353002f 	cmp	r3, #47	@ 0x2f
   109e8:	e1a0c003 	mov	ip, r3
   109ec:	da000030 	ble	10ab4 <strtoul+0x13c>
   109f0:	e3a04001 	mov	r4, #1
   109f4:	e3a01000 	mov	r1, #0
   109f8:	ea00000d 	b	10a34 <strtoul+0xbc>
   109fc:	e35c0040 	cmp	ip, #64	@ 0x40
   10a00:	ca00000f 	bgt	10a44 <strtoul+0xcc>
   10a04:	e24cc030 	sub	ip, ip, #48	@ 0x30
   10a08:	e15c0002 	cmp	ip, r2
   10a0c:	aa000010 	bge	10a54 <strtoul+0xdc>
   10a10:	e020c291 	mla	r0, r1, r2, ip
   10a14:	e3a04000 	mov	r4, #0
   10a18:	e1500001 	cmp	r0, r1
   10a1c:	3a00002c 	bcc	10ad4 <strtoul+0x15c>
   10a20:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   10a24:	e1a01000 	mov	r1, r0
   10a28:	e1a0300c 	mov	r3, ip
   10a2c:	e35c002f 	cmp	ip, #47	@ 0x2f
   10a30:	da00002b 	ble	10ae4 <strtoul+0x16c>
   10a34:	e2433061 	sub	r3, r3, #97	@ 0x61
   10a38:	e3530019 	cmp	r3, #25
   10a3c:	924cc020 	subls	ip, ip, #32
   10a40:	8affffed 	bhi	109fc <strtoul+0x84>
   10a44:	e24cc007 	sub	ip, ip, #7
   10a48:	e24cc030 	sub	ip, ip, #48	@ 0x30
   10a4c:	e15c0002 	cmp	ip, r2
   10a50:	baffffee 	blt	10a10 <strtoul+0x98>
   10a54:	e2243001 	eor	r3, r4, #1
   10a58:	e1a00001 	mov	r0, r1
   10a5c:	e0033006 	and	r3, r3, r6
   10a60:	e3550000 	cmp	r5, #0
   10a64:	1585e000 	strne	lr, [r5]
   10a68:	e3530000 	cmp	r3, #0
   10a6c:	12600000 	rsbne	r0, r0, #0
   10a70:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a74:	e1de30d1 	ldrsb	r3, [lr, #1]
   10a78:	e3a06000 	mov	r6, #0
   10a7c:	e1a0e000 	mov	lr, r0
   10a80:	e3530030 	cmp	r3, #48	@ 0x30
   10a84:	1affffd4 	bne	109dc <strtoul+0x64>
   10a88:	e1de30d1 	ldrsb	r3, [lr, #1]
   10a8c:	e28e0001 	add	r0, lr, #1
   10a90:	e3c31020 	bic	r1, r3, #32
   10a94:	e3510058 	cmp	r1, #88	@ 0x58
   10a98:	1a000009 	bne	10ac4 <strtoul+0x14c>
   10a9c:	e3d23010 	bics	r3, r2, #16
   10aa0:	1a000005 	bne	10abc <strtoul+0x144>
   10aa4:	e1de30d2 	ldrsb	r3, [lr, #2]
   10aa8:	e3a02010 	mov	r2, #16
   10aac:	e28ee002 	add	lr, lr, #2
   10ab0:	eaffffcb 	b	109e4 <strtoul+0x6c>
   10ab4:	e3550000 	cmp	r5, #0
   10ab8:	1585e000 	strne	lr, [r5]
   10abc:	e3a00000 	mov	r0, #0
   10ac0:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ac4:	e3520000 	cmp	r2, #0
   10ac8:	e1a0e000 	mov	lr, r0
   10acc:	03a02008 	moveq	r2, #8
   10ad0:	eaffffc3 	b	109e4 <strtoul+0x6c>
   10ad4:	e1550004 	cmp	r5, r4
   10ad8:	e3e00000 	mvn	r0, #0
   10adc:	1585e000 	strne	lr, [r5]
   10ae0:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ae4:	e3a03001 	mov	r3, #1
   10ae8:	eaffffdb 	b	10a5c <strtoul+0xe4>

00010aec <strtoull>:
   10aec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   10af0:	e2514000 	subs	r4, r1, #0
   10af4:	e2423002 	sub	r3, r2, #2
   10af8:	15840000 	strne	r0, [r4]
   10afc:	e3520000 	cmp	r2, #0
   10b00:	13530022 	cmpne	r3, #34	@ 0x22
   10b04:	8a000048 	bhi	10c2c <strtoull+0x140>
   10b08:	e1d030d0 	ldrsb	r3, [r0]
   10b0c:	e1a0e000 	mov	lr, r0
   10b10:	e2800001 	add	r0, r0, #1
   10b14:	e243c009 	sub	ip, r3, #9
   10b18:	e3530020 	cmp	r3, #32
   10b1c:	0afffff9 	beq	10b08 <strtoull+0x1c>
   10b20:	e6efc07c 	uxtb	ip, ip
   10b24:	e35c0004 	cmp	ip, #4
   10b28:	9afffff6 	bls	10b08 <strtoull+0x1c>
   10b2c:	e353002b 	cmp	r3, #43	@ 0x2b
   10b30:	0a00002b 	beq	10be4 <strtoull+0xf8>
   10b34:	e353002d 	cmp	r3, #45	@ 0x2d
   10b38:	03a07001 	moveq	r7, #1
   10b3c:	13a07000 	movne	r7, #0
   10b40:	01de30d1 	ldrsbeq	r3, [lr, #1]
   10b44:	01a0e000 	moveq	lr, r0
   10b48:	e3530030 	cmp	r3, #48	@ 0x30
   10b4c:	0a000029 	beq	10bf8 <strtoull+0x10c>
   10b50:	e3520000 	cmp	r2, #0
   10b54:	03a0200a 	moveq	r2, #10
   10b58:	e353002f 	cmp	r3, #47	@ 0x2f
   10b5c:	e1a0c003 	mov	ip, r3
   10b60:	da00002f 	ble	10c24 <strtoull+0x138>
   10b64:	e3a05000 	mov	r5, #0
   10b68:	e3a09001 	mov	r9, #1
   10b6c:	e1a06005 	mov	r6, r5
   10b70:	e1a08fc2 	asr	r8, r2, #31
   10b74:	ea000014 	b	10bcc <strtoull+0xe0>
   10b78:	e35c0040 	cmp	ip, #64	@ 0x40
   10b7c:	ca000016 	bgt	10bdc <strtoull+0xf0>
   10b80:	e0010692 	mul	r1, r2, r6
   10b84:	e24cc030 	sub	ip, ip, #48	@ 0x30
   10b88:	e0830592 	umull	r0, r3, r2, r5
   10b8c:	e15c0002 	cmp	ip, r2
   10b90:	e0211895 	mla	r1, r5, r8, r1
   10b94:	aa000027 	bge	10c38 <strtoull+0x14c>
   10b98:	e09c0000 	adds	r0, ip, r0
   10b9c:	e0811003 	add	r1, r1, r3
   10ba0:	e0a11fcc 	adc	r1, r1, ip, asr #31
   10ba4:	e1500005 	cmp	r0, r5
   10ba8:	e0d16006 	sbcs	r6, r1, r6
   10bac:	3a000030 	bcc	10c74 <strtoull+0x188>
   10bb0:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   10bb4:	e3a09000 	mov	r9, #0
   10bb8:	e1a05000 	mov	r5, r0
   10bbc:	e1a06001 	mov	r6, r1
   10bc0:	e1a0300c 	mov	r3, ip
   10bc4:	e35c002f 	cmp	ip, #47	@ 0x2f
   10bc8:	da00002e 	ble	10c88 <strtoull+0x19c>
   10bcc:	e2433061 	sub	r3, r3, #97	@ 0x61
   10bd0:	e3530019 	cmp	r3, #25
   10bd4:	924cc020 	subls	ip, ip, #32
   10bd8:	8affffe6 	bhi	10b78 <strtoull+0x8c>
   10bdc:	e24cc007 	sub	ip, ip, #7
   10be0:	eaffffe6 	b	10b80 <strtoull+0x94>
   10be4:	e1de30d1 	ldrsb	r3, [lr, #1]
   10be8:	e3a07000 	mov	r7, #0
   10bec:	e1a0e000 	mov	lr, r0
   10bf0:	e3530030 	cmp	r3, #48	@ 0x30
   10bf4:	1affffd5 	bne	10b50 <strtoull+0x64>
   10bf8:	e1de30d1 	ldrsb	r3, [lr, #1]
   10bfc:	e28e0001 	add	r0, lr, #1
   10c00:	e3c31020 	bic	r1, r3, #32
   10c04:	e3510058 	cmp	r1, #88	@ 0x58
   10c08:	1a000015 	bne	10c64 <strtoull+0x178>
   10c0c:	e3d23010 	bics	r3, r2, #16
   10c10:	1a000005 	bne	10c2c <strtoull+0x140>
   10c14:	e1de30d2 	ldrsb	r3, [lr, #2]
   10c18:	e3a02010 	mov	r2, #16
   10c1c:	e28ee002 	add	lr, lr, #2
   10c20:	eaffffcc 	b	10b58 <strtoull+0x6c>
   10c24:	e3540000 	cmp	r4, #0
   10c28:	1584e000 	strne	lr, [r4]
   10c2c:	e3a00000 	mov	r0, #0
   10c30:	e1a01000 	mov	r1, r0
   10c34:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   10c38:	e2293001 	eor	r3, r9, #1
   10c3c:	e1a00005 	mov	r0, r5
   10c40:	e1a01006 	mov	r1, r6
   10c44:	e0033007 	and	r3, r3, r7
   10c48:	e3540000 	cmp	r4, #0
   10c4c:	1584e000 	strne	lr, [r4]
   10c50:	e3530000 	cmp	r3, #0
   10c54:	08bd83f0 	popeq	{r4, r5, r6, r7, r8, r9, pc}
   10c58:	e2700000 	rsbs	r0, r0, #0
   10c5c:	e2e11000 	rsc	r1, r1, #0
   10c60:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   10c64:	e3520000 	cmp	r2, #0
   10c68:	e1a0e000 	mov	lr, r0
   10c6c:	03a02008 	moveq	r2, #8
   10c70:	eaffffb8 	b	10b58 <strtoull+0x6c>
   10c74:	e3540000 	cmp	r4, #0
   10c78:	e3a01000 	mov	r1, #0
   10c7c:	1584e000 	strne	lr, [r4]
   10c80:	e3e00000 	mvn	r0, #0
   10c84:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   10c88:	e3a03001 	mov	r3, #1
   10c8c:	eaffffec 	b	10c44 <strtoull+0x158>

00010c90 <atoi>:
   10c90:	e3a0200a 	mov	r2, #10
   10c94:	e3a01000 	mov	r1, #0
   10c98:	eaffff36 	b	10978 <strtoul>

00010c9c <char2int>:
   10c9c:	e12fff1e 	bx	lr

00010ca0 <memset>:
   10ca0:	e3100003 	tst	r0, #3
   10ca4:	1a00000d 	bne	10ce0 <memset+0x40>
   10ca8:	e3520010 	cmp	r2, #16
   10cac:	3a00000b 	bcc	10ce0 <memset+0x40>
   10cb0:	e1813401 	orr	r3, r1, r1, lsl #8
   10cb4:	e183c803 	orr	ip, r3, r3, lsl #16
   10cb8:	e1a03000 	mov	r3, r0
   10cbc:	e583c000 	str	ip, [r3]
   10cc0:	e583c004 	str	ip, [r3, #4]
   10cc4:	e583c008 	str	ip, [r3, #8]
   10cc8:	e583c00c 	str	ip, [r3, #12]
   10ccc:	e2833010 	add	r3, r3, #16
   10cd0:	e2422010 	sub	r2, r2, #16
   10cd4:	e352000f 	cmp	r2, #15
   10cd8:	8afffff7 	bhi	10cbc <memset+0x1c>
   10cdc:	ea000000 	b	10ce4 <memset+0x44>
   10ce0:	e1a03000 	mov	r3, r0
   10ce4:	e3520000 	cmp	r2, #0
   10ce8:	012fff1e 	bxeq	lr
   10cec:	e4c31001 	strb	r1, [r3], #1
   10cf0:	e2522001 	subs	r2, r2, #1
   10cf4:	1afffffc 	bne	10cec <memset+0x4c>
   10cf8:	e12fff1e 	bx	lr

00010cfc <memcpy>:
   10cfc:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
   10d00:	e352007f 	cmp	r2, #127	@ 0x7f
   10d04:	9a00000b 	bls	10d38 <memcpy+0x3c>
   10d08:	e3110003 	tst	r1, #3
   10d0c:	1a000009 	bne	10d38 <memcpy+0x3c>
   10d10:	e3100003 	tst	r0, #3
   10d14:	1a000007 	bne	10d38 <memcpy+0x3c>
   10d18:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   10d1c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   10d20:	e2422020 	sub	r2, r2, #32
   10d24:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   10d28:	f5d1f040 	pld	[r1, #64]	@ 0x40
   10d2c:	e352001f 	cmp	r2, #31
   10d30:	8afffff9 	bhi	10d1c <memcpy+0x20>
   10d34:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   10d38:	e3520000 	cmp	r2, #0
   10d3c:	0a000003 	beq	10d50 <memcpy+0x54>
   10d40:	e4d13001 	ldrb	r3, [r1], #1
   10d44:	e2522001 	subs	r2, r2, #1
   10d48:	e4c03001 	strb	r3, [r0], #1
   10d4c:	1afffffb 	bne	10d40 <memcpy+0x44>
   10d50:	e49d0004 	pop	{r0}		@ (ldr r0, [sp], #4)
   10d54:	e12fff1e 	bx	lr

00010d58 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   10d58:	e12fff1e 	bx	lr

00010d5c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   10d5c:	e92d4010 	push	{r4, lr}
   10d60:	e3a01014 	mov	r1, #20
   10d64:	e1a04000 	mov	r4, r0
   10d68:	eb000103 	bl	1117c <operator delete(void*, unsigned int)>
   10d6c:	e1a00004 	mov	r0, r4
   10d70:	e8bd8010 	pop	{r4, pc}

00010d74 <CVirtualGPIOPin::Write(unsigned int)>:
   10d74:	e92d4070 	push	{r4, r5, r6, lr}
   10d78:	e1a05001 	mov	r5, r1
   10d7c:	e5d03004 	ldrb	r3, [r0, #4]
   10d80:	e5901008 	ldr	r1, [r0, #8]
   10d84:	e24dd028 	sub	sp, sp, #40	@ 0x28
   10d88:	e3530000 	cmp	r3, #0
   10d8c:	0a000012 	beq	10ddc <CVirtualGPIOPin::Write(unsigned int)+0x68>
   10d90:	e3510000 	cmp	r1, #0
   10d94:	1a000032 	bne	10e64 <CVirtualGPIOPin::Write(unsigned int)+0xf0>
   10d98:	e28d000c 	add	r0, sp, #12
   10d9c:	eb00084e 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10da0:	e3a03014 	mov	r3, #20
   10da4:	e3a01008 	mov	r1, #8
   10da8:	e08d2003 	add	r2, sp, r3
   10dac:	e58d1000 	str	r1, [sp]
   10db0:	e28d000c 	add	r0, sp, #12
   10db4:	e3a01082 	mov	r1, #130	@ 0x82
   10db8:	e58d1020 	str	r1, [sp, #32]
   10dbc:	e3081041 	movw	r1, #32833	@ 0x8041
   10dc0:	e3401003 	movt	r1, #3
   10dc4:	e58d5024 	str	r5, [sp, #36]	@ 0x24
   10dc8:	eb000895 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10dcc:	e28d000c 	add	r0, sp, #12
   10dd0:	eb000848 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
   10dd4:	e28dd028 	add	sp, sp, #40	@ 0x28
   10dd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ddc:	e1853001 	orr	r3, r5, r1
   10de0:	e3530001 	cmp	r3, #1
   10de4:	8afffffa 	bhi	10dd4 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   10de8:	e307672c 	movw	r6, #30508	@ 0x772c
   10dec:	e3406001 	movt	r6, #1
   10df0:	e5963000 	ldr	r3, [r6]
   10df4:	e3530000 	cmp	r3, #0
   10df8:	0afffff5 	beq	10dd4 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   10dfc:	e1a04000 	mov	r4, r0
   10e00:	e5960004 	ldr	r0, [r6, #4]
   10e04:	e3500000 	cmp	r0, #0
   10e08:	1a000020 	bne	10e90 <CVirtualGPIOPin::Write(unsigned int)+0x11c>
   10e0c:	e1d421b0 	ldrh	r2, [r4, #16]
   10e10:	e1d431b2 	ldrh	r3, [r4, #18]
   10e14:	e584500c 	str	r5, [r4, #12]
   10e18:	e0421003 	sub	r1, r2, r3
   10e1c:	e6bf1071 	sxth	r1, r1
   10e20:	e3510000 	cmp	r1, #0
   10e24:	da000013 	ble	10e78 <CVirtualGPIOPin::Write(unsigned int)+0x104>
   10e28:	e3550000 	cmp	r5, #0
   10e2c:	1a000006 	bne	10e4c <CVirtualGPIOPin::Write(unsigned int)+0xd8>
   10e30:	e2833001 	add	r3, r3, #1
   10e34:	e6ff3073 	uxth	r3, r3
   10e38:	e1c431b2 	strh	r3, [r4, #18]
   10e3c:	e5940008 	ldr	r0, [r4, #8]
   10e40:	e1833802 	orr	r3, r3, r2, lsl #16
   10e44:	e5961000 	ldr	r1, [r6]
   10e48:	e7813100 	str	r3, [r1, r0, lsl #2]
   10e4c:	e5963004 	ldr	r3, [r6, #4]
   10e50:	e3530000 	cmp	r3, #0
   10e54:	0affffde 	beq	10dd4 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   10e58:	e28dd028 	add	sp, sp, #40	@ 0x28
   10e5c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10e60:	ea0004cd 	b	1219c <LeaveCritical>
   10e64:	e3051c98 	movw	r1, #23704	@ 0x5c98
   10e68:	e3401001 	movt	r1, #1
   10e6c:	e3a0205b 	mov	r2, #91	@ 0x5b
   10e70:	e2810014 	add	r0, r1, #20
   10e74:	eb0006b5 	bl	12950 <assertion_failed>
   10e78:	e3550000 	cmp	r5, #0
   10e7c:	0afffff2 	beq	10e4c <CVirtualGPIOPin::Write(unsigned int)+0xd8>
   10e80:	e2822001 	add	r2, r2, #1
   10e84:	e6ff2072 	uxth	r2, r2
   10e88:	e1c421b0 	strh	r2, [r4, #16]
   10e8c:	eaffffea 	b	10e3c <CVirtualGPIOPin::Write(unsigned int)+0xc8>
   10e90:	eb000496 	bl	120f0 <EnterCritical>
   10e94:	eaffffdc 	b	10e0c <CVirtualGPIOPin::Write(unsigned int)+0x98>

00010e98 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   10e98:	e92d4070 	push	{r4, r5, r6, lr}
   10e9c:	e1a04000 	mov	r4, r0
   10ea0:	e59f313c 	ldr	r3, [pc, #316]	@ 10fe4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   10ea4:	e3a00000 	mov	r0, #0
   10ea8:	e3510001 	cmp	r1, #1
   10eac:	91a0c002 	movls	ip, r2
   10eb0:	8382c001 	orrhi	ip, r2, #1
   10eb4:	e24dd020 	sub	sp, sp, #32
   10eb8:	e15c0000 	cmp	ip, r0
   10ebc:	e5840010 	str	r0, [r4, #16]
   10ec0:	e5843000 	str	r3, [r4]
   10ec4:	e5c42004 	strb	r2, [r4, #4]
   10ec8:	e5841008 	str	r1, [r4, #8]
   10ecc:	0a000002 	beq	10edc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   10ed0:	e1a00004 	mov	r0, r4
   10ed4:	e28dd020 	add	sp, sp, #32
   10ed8:	e8bd8070 	pop	{r4, r5, r6, pc}
   10edc:	e307572c 	movw	r5, #30508	@ 0x772c
   10ee0:	e3405001 	movt	r5, #1
   10ee4:	e5950004 	ldr	r0, [r5, #4]
   10ee8:	e3500000 	cmp	r0, #0
   10eec:	1a00000e 	bne	10f2c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x94>
   10ef0:	e5956000 	ldr	r6, [r5]
   10ef4:	e3560000 	cmp	r6, #0
   10ef8:	0a00000f 	beq	10f3c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa4>
   10efc:	e5943008 	ldr	r3, [r4, #8]
   10f00:	e3a02000 	mov	r2, #0
   10f04:	e7862103 	str	r2, [r6, r3, lsl #2]
   10f08:	e5953004 	ldr	r3, [r5, #4]
   10f0c:	e3530000 	cmp	r3, #0
   10f10:	1a000024 	bne	10fa8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>
   10f14:	e1a00004 	mov	r0, r4
   10f18:	e3a01000 	mov	r1, #0
   10f1c:	ebffff94 	bl	10d74 <CVirtualGPIOPin::Write(unsigned int)>
   10f20:	e1a00004 	mov	r0, r4
   10f24:	e28dd020 	add	sp, sp, #32
   10f28:	e8bd8070 	pop	{r4, r5, r6, pc}
   10f2c:	eb00046f 	bl	120f0 <EnterCritical>
   10f30:	e5956000 	ldr	r6, [r5]
   10f34:	e3560000 	cmp	r6, #0
   10f38:	1affffef 	bne	10efc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   10f3c:	e3a00001 	mov	r0, #1
   10f40:	eb00043b 	bl	12034 <CMemorySystem::GetCoherentPage(unsigned int)>
   10f44:	e1a01006 	mov	r1, r6
   10f48:	e5850000 	str	r0, [r5]
   10f4c:	e28d0008 	add	r0, sp, #8
   10f50:	eb0007e1 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10f54:	e5953000 	ldr	r3, [r5]
   10f58:	e28d0008 	add	r0, sp, #8
   10f5c:	e3081020 	movw	r1, #32800	@ 0x8020
   10f60:	e3401004 	movt	r1, #4
   10f64:	e3833103 	orr	r3, r3, #-1073741824	@ 0xc0000000
   10f68:	e58d301c 	str	r3, [sp, #28]
   10f6c:	e3a03004 	mov	r3, #4
   10f70:	e58d3000 	str	r3, [sp]
   10f74:	e3a03010 	mov	r3, #16
   10f78:	e08d2003 	add	r2, sp, r3
   10f7c:	eb000828 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10f80:	e3500000 	cmp	r0, #0
   10f84:	0a000009 	beq	10fb0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
   10f88:	e28d0008 	add	r0, sp, #8
   10f8c:	eb0007d9 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
   10f90:	e5956000 	ldr	r6, [r5]
   10f94:	e3560000 	cmp	r6, #0
   10f98:	1affffd7 	bne	10efc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   10f9c:	e5953004 	ldr	r3, [r5, #4]
   10fa0:	e3530000 	cmp	r3, #0
   10fa4:	0affffda 	beq	10f14 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   10fa8:	eb00047b 	bl	1219c <LeaveCritical>
   10fac:	eaffffd8 	b	10f14 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   10fb0:	e3a03010 	mov	r3, #16
   10fb4:	e58d0000 	str	r0, [sp]
   10fb8:	e1a01003 	mov	r1, r3
   10fbc:	e28d2010 	add	r2, sp, #16
   10fc0:	e3401004 	movt	r1, #4
   10fc4:	e28d0008 	add	r0, sp, #8
   10fc8:	eb000815 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10fcc:	e3500000 	cmp	r0, #0
   10fd0:	05850000 	streq	r0, [r5]
   10fd4:	159d301c 	ldrne	r3, [sp, #28]
   10fd8:	13c33103 	bicne	r3, r3, #-1073741824	@ 0xc0000000
   10fdc:	15853000 	strne	r3, [r5]
   10fe0:	eaffffe8 	b	10f88 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   10fe4:	00015cc0 	.word	0x00015cc0

00010fe8 <CVirtualGPIOPin::Invert()>:
   10fe8:	e590100c 	ldr	r1, [r0, #12]
   10fec:	e2211001 	eor	r1, r1, #1
   10ff0:	eaffff5f 	b	10d74 <CVirtualGPIOPin::Write(unsigned int)>

00010ff4 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   10ff4:	e307372c 	movw	r3, #30508	@ 0x772c
   10ff8:	e3403001 	movt	r3, #1
   10ffc:	e3a02000 	mov	r2, #0
   11000:	e5832004 	str	r2, [r3, #4]
   11004:	e12fff1e 	bx	lr

00011008 <ChainBootStub(void const*, unsigned int)>:
   11008:	e2811003 	add	r1, r1, #3
   1100c:	e1b01121 	lsrs	r1, r1, #2
   11010:	0a000007 	beq	11034 <ChainBootStub(void const*, unsigned int)+0x2c>
   11014:	e1a03000 	mov	r3, r0
   11018:	e0800101 	add	r0, r0, r1, lsl #2
   1101c:	e263c902 	rsb	ip, r3, #32768	@ 0x8000
   11020:	e083200c 	add	r2, r3, ip
   11024:	e4931004 	ldr	r1, [r3], #4
   11028:	e1530000 	cmp	r3, r0
   1102c:	e5821000 	str	r1, [r2]
   11030:	1afffffa 	bne	11020 <ChainBootStub(void const*, unsigned int)+0x18>
   11034:	e3a03000 	mov	r3, #0
   11038:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   1103c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11040:	f57ff04f 	dsb	sy
   11044:	f57ff06f 	isb	sy
   11048:	e3a03902 	mov	r3, #32768	@ 0x8000
   1104c:	e12fff13 	bx	r3

00011050 <EnableChainBoot>:
   11050:	e3073734 	movw	r3, #30516	@ 0x7734
   11054:	e3403001 	movt	r3, #1
   11058:	e1a0c001 	mov	ip, r1
   1105c:	e92d4010 	push	{r4, lr}
   11060:	e3a02b01 	mov	r2, #1024	@ 0x400
   11064:	e8831001 	stm	r3, {r0, ip}
   11068:	e3011008 	movw	r1, #4104	@ 0x1008
   1106c:	e3401001 	movt	r1, #1
   11070:	e3a00b1f 	mov	r0, #31744	@ 0x7c00
   11074:	ebffff20 	bl	10cfc <memcpy>
   11078:	e3a03000 	mov	r3, #0
   1107c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11080:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11084:	f57ff04f 	dsb	sy
   11088:	f57ff06f 	isb	sy
   1108c:	e8bd8010 	pop	{r4, pc}

00011090 <IsChainBootEnabled>:
   11090:	e3073734 	movw	r3, #30516	@ 0x7734
   11094:	e3403001 	movt	r3, #1
   11098:	e5930000 	ldr	r0, [r3]
   1109c:	e2500000 	subs	r0, r0, #0
   110a0:	13a00001 	movne	r0, #1
   110a4:	e12fff1e 	bx	lr

000110a8 <DoChainBoot>:
   110a8:	e3073734 	movw	r3, #30516	@ 0x7734
   110ac:	e3403001 	movt	r3, #1
   110b0:	e3a02b1f 	mov	r2, #31744	@ 0x7c00
   110b4:	e8930003 	ldm	r3, {r0, r1}
   110b8:	e12fff12 	bx	r2

000110bc <operator new(unsigned int, int)>:
   110bc:	e3d13002 	bics	r3, r1, #2
   110c0:	0a000001 	beq	110cc <operator new(unsigned int, int)+0x10>
   110c4:	e3a00000 	mov	r0, #0
   110c8:	e12fff1e 	bx	lr
   110cc:	e3073740 	movw	r3, #30528	@ 0x7740
   110d0:	e3403001 	movt	r3, #1
   110d4:	e1a01000 	mov	r1, r0
   110d8:	e5930000 	ldr	r0, [r3]
   110dc:	e280000c 	add	r0, r0, #12
   110e0:	ea00004f 	b	11224 <CHeapAllocator::Allocate(unsigned int)>

000110e4 <operator new[](unsigned int, int)>:
   110e4:	e3d13002 	bics	r3, r1, #2
   110e8:	0a000001 	beq	110f4 <operator new[](unsigned int, int)+0x10>
   110ec:	e3a00000 	mov	r0, #0
   110f0:	e12fff1e 	bx	lr
   110f4:	e3073740 	movw	r3, #30528	@ 0x7740
   110f8:	e3403001 	movt	r3, #1
   110fc:	e1a01000 	mov	r1, r0
   11100:	e5930000 	ldr	r0, [r3]
   11104:	e280000c 	add	r0, r0, #12
   11108:	ea000045 	b	11224 <CHeapAllocator::Allocate(unsigned int)>

0001110c <operator new(unsigned int, void*)>:
   1110c:	e1a00001 	mov	r0, r1
   11110:	e12fff1e 	bx	lr

00011114 <operator new[](unsigned int, void*)>:
   11114:	e1a00001 	mov	r0, r1
   11118:	e12fff1e 	bx	lr

0001111c <operator new(unsigned int)>:
   1111c:	e3073740 	movw	r3, #30528	@ 0x7740
   11120:	e3403001 	movt	r3, #1
   11124:	e1a01000 	mov	r1, r0
   11128:	e5930000 	ldr	r0, [r3]
   1112c:	e280000c 	add	r0, r0, #12
   11130:	ea00003b 	b	11224 <CHeapAllocator::Allocate(unsigned int)>

00011134 <operator new[](unsigned int)>:
   11134:	e3073740 	movw	r3, #30528	@ 0x7740
   11138:	e3403001 	movt	r3, #1
   1113c:	e1a01000 	mov	r1, r0
   11140:	e5930000 	ldr	r0, [r3]
   11144:	e280000c 	add	r0, r0, #12
   11148:	ea000035 	b	11224 <CHeapAllocator::Allocate(unsigned int)>

0001114c <operator delete(void*)>:
   1114c:	e3073740 	movw	r3, #30528	@ 0x7740
   11150:	e3403001 	movt	r3, #1
   11154:	e1a01000 	mov	r1, r0
   11158:	e5930000 	ldr	r0, [r3]
   1115c:	e280000c 	add	r0, r0, #12
   11160:	ea0000a9 	b	1140c <CHeapAllocator::Free(void*)>

00011164 <operator delete[](void*)>:
   11164:	e3073740 	movw	r3, #30528	@ 0x7740
   11168:	e3403001 	movt	r3, #1
   1116c:	e1a01000 	mov	r1, r0
   11170:	e5930000 	ldr	r0, [r3]
   11174:	e280000c 	add	r0, r0, #12
   11178:	ea0000a3 	b	1140c <CHeapAllocator::Free(void*)>

0001117c <operator delete(void*, unsigned int)>:
   1117c:	e3073740 	movw	r3, #30528	@ 0x7740
   11180:	e3403001 	movt	r3, #1
   11184:	e1a01000 	mov	r1, r0
   11188:	e5930000 	ldr	r0, [r3]
   1118c:	e280000c 	add	r0, r0, #12
   11190:	ea00009d 	b	1140c <CHeapAllocator::Free(void*)>

00011194 <operator delete[](void*, unsigned int)>:
   11194:	e3073740 	movw	r3, #30528	@ 0x7740
   11198:	e3403001 	movt	r3, #1
   1119c:	e1a01000 	mov	r1, r0
   111a0:	e5930000 	ldr	r0, [r3]
   111a4:	e280000c 	add	r0, r0, #12
   111a8:	ea000097 	b	1140c <CHeapAllocator::Free(void*)>

000111ac <CHeapAllocator::CHeapAllocator(char const*)>:
   111ac:	e92d4010 	push	{r4, lr}
   111b0:	e1a04000 	mov	r4, r0
   111b4:	e3a03000 	mov	r3, #0
   111b8:	e3a00001 	mov	r0, #1
   111bc:	e3a020a8 	mov	r2, #168	@ 0xa8
   111c0:	e884000a 	stm	r4, {r1, r3}
   111c4:	e1a01003 	mov	r1, r3
   111c8:	e5843008 	str	r3, [r4, #8]
   111cc:	e584300c 	str	r3, [r4, #12]
   111d0:	e58400b8 	str	r0, [r4, #184]	@ 0xb8
   111d4:	e2840010 	add	r0, r4, #16
   111d8:	ebfffeb0 	bl	10ca0 <memset>
   111dc:	e59f3020 	ldr	r3, [pc, #32]	@ 11204 <CHeapAllocator::CHeapAllocator(char const*)+0x58>
   111e0:	e1a02004 	mov	r2, r4
   111e4:	e283001c 	add	r0, r3, #28
   111e8:	e2822008 	add	r2, r2, #8
   111ec:	e5b31004 	ldr	r1, [r3, #4]!
   111f0:	e1530000 	cmp	r3, r0
   111f4:	e5821008 	str	r1, [r2, #8]
   111f8:	1afffffa 	bne	111e8 <CHeapAllocator::CHeapAllocator(char const*)+0x3c>
   111fc:	e1a00004 	mov	r0, r4
   11200:	e8bd8010 	pop	{r4, pc}
   11204:	0001769c 	.word	0x0001769c

00011208 <CHeapAllocator::~CHeapAllocator()>:
   11208:	e12fff1e 	bx	lr

0001120c <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   1120c:	e0812002 	add	r2, r1, r2
   11210:	e980000e 	stmib	r0, {r1, r2, r3}
   11214:	e12fff1e 	bx	lr

00011218 <CHeapAllocator::GetFreeSpace() const>:
   11218:	e9900005 	ldmib	r0, {r0, r2}
   1121c:	e0420000 	sub	r0, r2, r0
   11220:	e12fff1e 	bx	lr

00011224 <CHeapAllocator::Allocate(unsigned int)>:
   11224:	e5903004 	ldr	r3, [r0, #4]
   11228:	e3530000 	cmp	r3, #0
   1122c:	0a000074 	beq	11404 <CHeapAllocator::Allocate(unsigned int)+0x1e0>
   11230:	e92d4070 	push	{r4, r5, r6, lr}
   11234:	e1a06000 	mov	r6, r0
   11238:	e59000b8 	ldr	r0, [r0, #184]	@ 0xb8
   1123c:	e1a04001 	mov	r4, r1
   11240:	e3500000 	cmp	r0, #0
   11244:	1a000060 	bne	113cc <CHeapAllocator::Allocate(unsigned int)+0x1a8>
   11248:	e5963010 	ldr	r3, [r6, #16]
   1124c:	e2862010 	add	r2, r6, #16
   11250:	e3530000 	cmp	r3, #0
   11254:	1a000003 	bne	11268 <CHeapAllocator::Allocate(unsigned int)+0x44>
   11258:	ea00002c 	b	11310 <CHeapAllocator::Allocate(unsigned int)+0xec>
   1125c:	e5b23008 	ldr	r3, [r2, #8]!
   11260:	e3530000 	cmp	r3, #0
   11264:	0a000029 	beq	11310 <CHeapAllocator::Allocate(unsigned int)+0xec>
   11268:	e1530004 	cmp	r3, r4
   1126c:	3afffffa 	bcc	1125c <CHeapAllocator::Allocate(unsigned int)+0x38>
   11270:	e5925004 	ldr	r5, [r2, #4]
   11274:	e3550000 	cmp	r5, #0
   11278:	01a04003 	moveq	r4, r3
   1127c:	0a000023 	beq	11310 <CHeapAllocator::Allocate(unsigned int)+0xec>
   11280:	e5d51001 	ldrb	r1, [r5, #1]
   11284:	e5d53000 	ldrb	r3, [r5]
   11288:	e1833401 	orr	r3, r3, r1, lsl #8
   1128c:	e5d51002 	ldrb	r1, [r5, #2]
   11290:	e1833801 	orr	r3, r3, r1, lsl #16
   11294:	e5d51003 	ldrb	r1, [r5, #3]
   11298:	e1833c01 	orr	r3, r3, r1, lsl #24
   1129c:	e3041d43 	movw	r1, #19779	@ 0x4d43
   112a0:	e344124c 	movt	r1, #16972	@ 0x424c
   112a4:	e1530001 	cmp	r3, r1
   112a8:	1a00004f 	bne	113ec <CHeapAllocator::Allocate(unsigned int)+0x1c8>
   112ac:	e5d51009 	ldrb	r1, [r5, #9]
   112b0:	e5d53008 	ldrb	r3, [r5, #8]
   112b4:	e1833401 	orr	r3, r3, r1, lsl #8
   112b8:	e5d5100a 	ldrb	r1, [r5, #10]
   112bc:	e1833801 	orr	r3, r3, r1, lsl #16
   112c0:	e5d5100b 	ldrb	r1, [r5, #11]
   112c4:	e1833c01 	orr	r3, r3, r1, lsl #24
   112c8:	e5823004 	str	r3, [r2, #4]
   112cc:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
   112d0:	e3530000 	cmp	r3, #0
   112d4:	1a00002b 	bne	11388 <CHeapAllocator::Allocate(unsigned int)+0x164>
   112d8:	e315003f 	tst	r5, #63	@ 0x3f
   112dc:	e3a03000 	mov	r3, #0
   112e0:	e2850040 	add	r0, r5, #64	@ 0x40
   112e4:	e5c53008 	strb	r3, [r5, #8]
   112e8:	e5c53009 	strb	r3, [r5, #9]
   112ec:	e5c5300a 	strb	r3, [r5, #10]
   112f0:	e5c5300b 	strb	r3, [r5, #11]
   112f4:	08bd8070 	popeq	{r4, r5, r6, pc}
   112f8:	e3051cc8 	movw	r1, #23752	@ 0x5cc8
   112fc:	e3401001 	movt	r1, #1
   11300:	e3050d18 	movw	r0, #23832	@ 0x5d18
   11304:	e3400001 	movt	r0, #1
   11308:	e3a0208e 	mov	r2, #142	@ 0x8e
   1130c:	eb00058f 	bl	12950 <assertion_failed>
   11310:	e5965004 	ldr	r5, [r6, #4]
   11314:	e284307f 	add	r3, r4, #127	@ 0x7f
   11318:	e3c3303f 	bic	r3, r3, #63	@ 0x3f
   1131c:	e596100c 	ldr	r1, [r6, #12]
   11320:	e0853003 	add	r3, r5, r3
   11324:	e1550003 	cmp	r5, r3
   11328:	2a000018 	bcs	11390 <CHeapAllocator::Allocate(unsigned int)+0x16c>
   1132c:	e5962008 	ldr	r2, [r6, #8]
   11330:	e0422001 	sub	r2, r2, r1
   11334:	e1530002 	cmp	r3, r2
   11338:	8a000014 	bhi	11390 <CHeapAllocator::Allocate(unsigned int)+0x16c>
   1133c:	e5863004 	str	r3, [r6, #4]
   11340:	e3a02043 	mov	r2, #67	@ 0x43
   11344:	e3a0304d 	mov	r3, #77	@ 0x4d
   11348:	e5c52000 	strb	r2, [r5]
   1134c:	e5c53001 	strb	r3, [r5, #1]
   11350:	e3a0204c 	mov	r2, #76	@ 0x4c
   11354:	e3a03042 	mov	r3, #66	@ 0x42
   11358:	e5c52002 	strb	r2, [r5, #2]
   1135c:	e5c53003 	strb	r3, [r5, #3]
   11360:	e7e72454 	ubfx	r2, r4, #8, #8
   11364:	e7e73854 	ubfx	r3, r4, #16, #8
   11368:	e5c54004 	strb	r4, [r5, #4]
   1136c:	e5c52005 	strb	r2, [r5, #5]
   11370:	e1a04c24 	lsr	r4, r4, #24
   11374:	e5c53006 	strb	r3, [r5, #6]
   11378:	e5c54007 	strb	r4, [r5, #7]
   1137c:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
   11380:	e3530000 	cmp	r3, #0
   11384:	0affffd3 	beq	112d8 <CHeapAllocator::Allocate(unsigned int)+0xb4>
   11388:	eb000383 	bl	1219c <LeaveCritical>
   1138c:	eaffffd1 	b	112d8 <CHeapAllocator::Allocate(unsigned int)+0xb4>
   11390:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
   11394:	e3510000 	cmp	r1, #0
   11398:	0a00000d 	beq	113d4 <CHeapAllocator::Allocate(unsigned int)+0x1b0>
   1139c:	e3a02000 	mov	r2, #0
   113a0:	e586200c 	str	r2, [r6, #12]
   113a4:	e1530002 	cmp	r3, r2
   113a8:	1a00000d 	bne	113e4 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   113ac:	ebffe3ca 	bl	a2dc <CLogger::Get()>
   113b0:	e3053d08 	movw	r3, #23816	@ 0x5d08
   113b4:	e3403001 	movt	r3, #1
   113b8:	e5961000 	ldr	r1, [r6]
   113bc:	e3a02000 	mov	r2, #0
   113c0:	ebffe58e 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   113c4:	e3a00000 	mov	r0, #0
   113c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   113cc:	eb000347 	bl	120f0 <EnterCritical>
   113d0:	eaffff9c 	b	11248 <CHeapAllocator::Allocate(unsigned int)+0x24>
   113d4:	e3530000 	cmp	r3, #0
   113d8:	0afffff9 	beq	113c4 <CHeapAllocator::Allocate(unsigned int)+0x1a0>
   113dc:	eb00036e 	bl	1219c <LeaveCritical>
   113e0:	eafffff7 	b	113c4 <CHeapAllocator::Allocate(unsigned int)+0x1a0>
   113e4:	eb00036c 	bl	1219c <LeaveCritical>
   113e8:	eaffffef 	b	113ac <CHeapAllocator::Allocate(unsigned int)+0x188>
   113ec:	e3051cc8 	movw	r1, #23752	@ 0x5cc8
   113f0:	e3401001 	movt	r1, #1
   113f4:	e3050cdc 	movw	r0, #23772	@ 0x5cdc
   113f8:	e3400001 	movt	r0, #1
   113fc:	e3a0205e 	mov	r2, #94	@ 0x5e
   11400:	eb000552 	bl	12950 <assertion_failed>
   11404:	e3a00000 	mov	r0, #0
   11408:	e12fff1e 	bx	lr

0001140c <CHeapAllocator::Free(void*)>:
   1140c:	e3510000 	cmp	r1, #0
   11410:	012fff1e 	bxeq	lr
   11414:	e92d4070 	push	{r4, r5, r6, lr}
   11418:	e1a05000 	mov	r5, r0
   1141c:	e2416040 	sub	r6, r1, #64	@ 0x40
   11420:	e5513040 	ldrb	r3, [r1, #-64]	@ 0xffffffc0
   11424:	e551003f 	ldrb	r0, [r1, #-63]	@ 0xffffffc1
   11428:	e551203e 	ldrb	r2, [r1, #-62]	@ 0xffffffc2
   1142c:	e551103d 	ldrb	r1, [r1, #-61]	@ 0xffffffc3
   11430:	e1833400 	orr	r3, r3, r0, lsl #8
   11434:	e1833802 	orr	r3, r3, r2, lsl #16
   11438:	e3042d43 	movw	r2, #19779	@ 0x4d43
   1143c:	e344224c 	movt	r2, #16972	@ 0x424c
   11440:	e1833c01 	orr	r3, r3, r1, lsl #24
   11444:	e1530002 	cmp	r3, r2
   11448:	1a00002c 	bne	11500 <CHeapAllocator::Free(void*)+0xf4>
   1144c:	e5953010 	ldr	r3, [r5, #16]
   11450:	e3530000 	cmp	r3, #0
   11454:	08bd8070 	popeq	{r4, r5, r6, pc}
   11458:	e5d61005 	ldrb	r1, [r6, #5]
   1145c:	e2854010 	add	r4, r5, #16
   11460:	e5d62004 	ldrb	r2, [r6, #4]
   11464:	e1822401 	orr	r2, r2, r1, lsl #8
   11468:	e5d61006 	ldrb	r1, [r6, #6]
   1146c:	e1822801 	orr	r2, r2, r1, lsl #16
   11470:	e5d61007 	ldrb	r1, [r6, #7]
   11474:	e1822c01 	orr	r2, r2, r1, lsl #24
   11478:	ea000002 	b	11488 <CHeapAllocator::Free(void*)+0x7c>
   1147c:	e5b43008 	ldr	r3, [r4, #8]!
   11480:	e3530000 	cmp	r3, #0
   11484:	08bd8070 	popeq	{r4, r5, r6, pc}
   11488:	e1530002 	cmp	r3, r2
   1148c:	1afffffa 	bne	1147c <CHeapAllocator::Free(void*)+0x70>
   11490:	e59500b8 	ldr	r0, [r5, #184]	@ 0xb8
   11494:	e3500000 	cmp	r0, #0
   11498:	1a000009 	bne	114c4 <CHeapAllocator::Free(void*)+0xb8>
   1149c:	e5943004 	ldr	r3, [r4, #4]
   114a0:	e5c63008 	strb	r3, [r6, #8]
   114a4:	e7e71453 	ubfx	r1, r3, #8, #8
   114a8:	e7e72853 	ubfx	r2, r3, #16, #8
   114ac:	e5c61009 	strb	r1, [r6, #9]
   114b0:	e1a03c23 	lsr	r3, r3, #24
   114b4:	e5c6200a 	strb	r2, [r6, #10]
   114b8:	e5c6300b 	strb	r3, [r6, #11]
   114bc:	e5846004 	str	r6, [r4, #4]
   114c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   114c4:	eb000309 	bl	120f0 <EnterCritical>
   114c8:	e59510b8 	ldr	r1, [r5, #184]	@ 0xb8
   114cc:	e5943004 	ldr	r3, [r4, #4]
   114d0:	e3510000 	cmp	r1, #0
   114d4:	e5c63008 	strb	r3, [r6, #8]
   114d8:	e7e72453 	ubfx	r2, r3, #8, #8
   114dc:	e5c62009 	strb	r2, [r6, #9]
   114e0:	e7e72853 	ubfx	r2, r3, #16, #8
   114e4:	e1a03c23 	lsr	r3, r3, #24
   114e8:	e5c6200a 	strb	r2, [r6, #10]
   114ec:	e5c6300b 	strb	r3, [r6, #11]
   114f0:	e5846004 	str	r6, [r4, #4]
   114f4:	08bd8070 	popeq	{r4, r5, r6, pc}
   114f8:	e8bd4070 	pop	{r4, r5, r6, lr}
   114fc:	ea000326 	b	1219c <LeaveCritical>
   11500:	e3051cc8 	movw	r1, #23752	@ 0x5cc8
   11504:	e3401001 	movt	r1, #1
   11508:	e3050cdc 	movw	r0, #23772	@ 0x5cdc
   1150c:	e3400001 	movt	r0, #1
   11510:	e3a020bf 	mov	r2, #191	@ 0xbf
   11514:	eb00050d 	bl	12950 <assertion_failed>

00011518 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   11518:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1151c:	e1a05002 	mov	r5, r2
   11520:	e2514000 	subs	r4, r1, #0
   11524:	0a00002c 	beq	115dc <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc4>
   11528:	e3520000 	cmp	r2, #0
   1152c:	0a000027 	beq	115d0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xb8>
   11530:	e554203f 	ldrb	r2, [r4, #-63]	@ 0xffffffc1
   11534:	e2447040 	sub	r7, r4, #64	@ 0x40
   11538:	e5543040 	ldrb	r3, [r4, #-64]	@ 0xffffffc0
   1153c:	e1833402 	orr	r3, r3, r2, lsl #8
   11540:	e554203e 	ldrb	r2, [r4, #-62]	@ 0xffffffc2
   11544:	e1833802 	orr	r3, r3, r2, lsl #16
   11548:	e554203d 	ldrb	r2, [r4, #-61]	@ 0xffffffc3
   1154c:	e1833c02 	orr	r3, r3, r2, lsl #24
   11550:	e3042d43 	movw	r2, #19779	@ 0x4d43
   11554:	e344224c 	movt	r2, #16972	@ 0x424c
   11558:	e1530002 	cmp	r3, r2
   1155c:	1a000021 	bne	115e8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd0>
   11560:	e5d72005 	ldrb	r2, [r7, #5]
   11564:	e5d73004 	ldrb	r3, [r7, #4]
   11568:	e1833402 	orr	r3, r3, r2, lsl #8
   1156c:	e5d72006 	ldrb	r2, [r7, #6]
   11570:	e1833802 	orr	r3, r3, r2, lsl #16
   11574:	e5d72007 	ldrb	r2, [r7, #7]
   11578:	e1833c02 	orr	r3, r3, r2, lsl #24
   1157c:	e1530005 	cmp	r3, r5
   11580:	21a05004 	movcs	r5, r4
   11584:	3a000001 	bcc	11590 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   11588:	e1a00005 	mov	r0, r5
   1158c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11590:	e1a01005 	mov	r1, r5
   11594:	e1a06000 	mov	r6, r0
   11598:	ebffff21 	bl	11224 <CHeapAllocator::Allocate(unsigned int)>
   1159c:	e2505000 	subs	r5, r0, #0
   115a0:	0afffff8 	beq	11588 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x70>
   115a4:	e5d72005 	ldrb	r2, [r7, #5]
   115a8:	e1a01004 	mov	r1, r4
   115ac:	e5d73004 	ldrb	r3, [r7, #4]
   115b0:	e1833402 	orr	r3, r3, r2, lsl #8
   115b4:	e5d72006 	ldrb	r2, [r7, #6]
   115b8:	e1833802 	orr	r3, r3, r2, lsl #16
   115bc:	e5d72007 	ldrb	r2, [r7, #7]
   115c0:	e1832c02 	orr	r2, r3, r2, lsl #24
   115c4:	ebfffdcc 	bl	10cfc <memcpy>
   115c8:	e1a01004 	mov	r1, r4
   115cc:	e1a00006 	mov	r0, r6
   115d0:	ebffff8d 	bl	1140c <CHeapAllocator::Free(void*)>
   115d4:	e1a00005 	mov	r0, r5
   115d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   115dc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   115e0:	e1a01002 	mov	r1, r2
   115e4:	eaffff0e 	b	11224 <CHeapAllocator::Allocate(unsigned int)>
   115e8:	e3051cc8 	movw	r1, #23752	@ 0x5cc8
   115ec:	e3401001 	movt	r1, #1
   115f0:	e3050cdc 	movw	r0, #23772	@ 0x5cdc
   115f4:	e3400001 	movt	r0, #1
   115f8:	e3a020a3 	mov	r2, #163	@ 0xa3
   115fc:	eb0004d3 	bl	12950 <assertion_failed>

00011600 <InvalidateDataCacheL1Only>:
   11600:	e92d0070 	push	{r4, r5, r6}
   11604:	e3a00000 	mov	r0, #0
   11608:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   1160c:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   11610:	e3071fff 	movw	r1, #32767	@ 0x7fff
   11614:	e00126a0 	and	r2, r1, r0, lsr #13
   11618:	e30013ff 	movw	r1, #1023	@ 0x3ff
   1161c:	e00131a0 	and	r3, r1, r0, lsr #3
   11620:	e2822001 	add	r2, r2, #1
   11624:	e2000007 	and	r0, r0, #7
   11628:	e2800004 	add	r0, r0, #4
   1162c:	e16f1f13 	clz	r1, r3
   11630:	e2834001 	add	r4, r3, #1
   11634:	e2422001 	sub	r2, r2, #1
   11638:	e1a03004 	mov	r3, r4
   1163c:	e2533001 	subs	r3, r3, #1
   11640:	e1a05113 	lsl	r5, r3, r1
   11644:	e1a06012 	lsl	r6, r2, r0
   11648:	e1855006 	orr	r5, r5, r6
   1164c:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   11650:	cafffff9 	bgt	1163c <InvalidateDataCacheL1Only+0x3c>
   11654:	e3520000 	cmp	r2, #0
   11658:	cafffff5 	bgt	11634 <InvalidateDataCacheL1Only+0x34>
   1165c:	f57ff04e 	dsb	st
   11660:	f57ff06f 	isb	sy
   11664:	e8bd0070 	pop	{r4, r5, r6}
   11668:	e12fff1e 	bx	lr

0001166c <InvalidateDataCache>:
   1166c:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   11670:	f57ff05f 	dmb	sy
   11674:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   11678:	e1a03ba0 	lsr	r3, r0, #23
   1167c:	e213300e 	ands	r3, r3, #14
   11680:	0a00001d 	beq	116fc <InvalidateDataCache+0x90>
   11684:	e3a0a000 	mov	sl, #0
   11688:	e08a20aa 	add	r2, sl, sl, lsr #1
   1168c:	e1a01230 	lsr	r1, r0, r2
   11690:	e2011007 	and	r1, r1, #7
   11694:	e3510002 	cmp	r1, #2
   11698:	ba000014 	blt	116f0 <InvalidateDataCache+0x84>
   1169c:	e10f9000 	mrs	r9, CPSR
   116a0:	f10c0080 	cpsid	i
   116a4:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   116a8:	f57ff06f 	isb	sy
   116ac:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   116b0:	e121f009 	msr	CPSR_c, r9
   116b4:	e2012007 	and	r2, r1, #7
   116b8:	e2822004 	add	r2, r2, #4
   116bc:	e30043ff 	movw	r4, #1023	@ 0x3ff
   116c0:	e01441a1 	ands	r4, r4, r1, lsr #3
   116c4:	e16f5f14 	clz	r5, r4
   116c8:	e3077fff 	movw	r7, #32767	@ 0x7fff
   116cc:	e01776a1 	ands	r7, r7, r1, lsr #13
   116d0:	e1a09007 	mov	r9, r7
   116d4:	e18ab514 	orr	fp, sl, r4, lsl r5
   116d8:	e18bb219 	orr	fp, fp, r9, lsl r2
   116dc:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   116e0:	e2599001 	subs	r9, r9, #1
   116e4:	aafffffa 	bge	116d4 <InvalidateDataCache+0x68>
   116e8:	e2544001 	subs	r4, r4, #1
   116ec:	aafffff7 	bge	116d0 <InvalidateDataCache+0x64>
   116f0:	e28aa002 	add	sl, sl, #2
   116f4:	e153000a 	cmp	r3, sl
   116f8:	caffffe2 	bgt	11688 <InvalidateDataCache+0x1c>
   116fc:	e3a0a000 	mov	sl, #0
   11700:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   11704:	f57ff04e 	dsb	st
   11708:	f57ff06f 	isb	sy
   1170c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   11710:	e12fff1e 	bx	lr

00011714 <CleanDataCache>:
   11714:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   11718:	f57ff05f 	dmb	sy
   1171c:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   11720:	e1a03ba0 	lsr	r3, r0, #23
   11724:	e213300e 	ands	r3, r3, #14
   11728:	0a00001d 	beq	117a4 <CleanDataCache+0x90>
   1172c:	e3a0a000 	mov	sl, #0
   11730:	e08a20aa 	add	r2, sl, sl, lsr #1
   11734:	e1a01230 	lsr	r1, r0, r2
   11738:	e2011007 	and	r1, r1, #7
   1173c:	e3510002 	cmp	r1, #2
   11740:	ba000014 	blt	11798 <CleanDataCache+0x84>
   11744:	e10f9000 	mrs	r9, CPSR
   11748:	f10c0080 	cpsid	i
   1174c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   11750:	f57ff06f 	isb	sy
   11754:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   11758:	e121f009 	msr	CPSR_c, r9
   1175c:	e2012007 	and	r2, r1, #7
   11760:	e2822004 	add	r2, r2, #4
   11764:	e30043ff 	movw	r4, #1023	@ 0x3ff
   11768:	e01441a1 	ands	r4, r4, r1, lsr #3
   1176c:	e16f5f14 	clz	r5, r4
   11770:	e3077fff 	movw	r7, #32767	@ 0x7fff
   11774:	e01776a1 	ands	r7, r7, r1, lsr #13
   11778:	e1a09007 	mov	r9, r7
   1177c:	e18ab514 	orr	fp, sl, r4, lsl r5
   11780:	e18bb219 	orr	fp, fp, r9, lsl r2
   11784:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   11788:	e2599001 	subs	r9, r9, #1
   1178c:	aafffffa 	bge	1177c <CleanDataCache+0x68>
   11790:	e2544001 	subs	r4, r4, #1
   11794:	aafffff7 	bge	11778 <CleanDataCache+0x64>
   11798:	e28aa002 	add	sl, sl, #2
   1179c:	e153000a 	cmp	r3, sl
   117a0:	caffffe2 	bgt	11730 <CleanDataCache+0x1c>
   117a4:	e3a0a000 	mov	sl, #0
   117a8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   117ac:	f57ff04e 	dsb	st
   117b0:	f57ff06f 	isb	sy
   117b4:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   117b8:	e12fff1e 	bx	lr

000117bc <CleanAndInvalidateDataCacheRange>:
   117bc:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   117c0:	e1a03823 	lsr	r3, r3, #16
   117c4:	e203300f 	and	r3, r3, #15
   117c8:	e3a02004 	mov	r2, #4
   117cc:	e1a02312 	lsl	r2, r2, r3
   117d0:	e0801001 	add	r1, r0, r1
   117d4:	e2423001 	sub	r3, r2, #1
   117d8:	e1c00003 	bic	r0, r0, r3
   117dc:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   117e0:	e0800002 	add	r0, r0, r2
   117e4:	e1500001 	cmp	r0, r1
   117e8:	3afffffb 	bcc	117dc <CleanAndInvalidateDataCacheRange+0x20>
   117ec:	f57ff04e 	dsb	st
   117f0:	e12fff1e 	bx	lr

000117f4 <CExceptionHandler::~CExceptionHandler()>:
   117f4:	e307373c 	movw	r3, #30524	@ 0x773c
   117f8:	e3403001 	movt	r3, #1
   117fc:	e3a02000 	mov	r2, #0
   11800:	e5832000 	str	r2, [r3]
   11804:	e12fff1e 	bx	lr

00011808 <CExceptionHandler::~CExceptionHandler()>:
   11808:	e307373c 	movw	r3, #30524	@ 0x773c
   1180c:	e3403001 	movt	r3, #1
   11810:	e92d4010 	push	{r4, lr}
   11814:	e3a01004 	mov	r1, #4
   11818:	e1a04000 	mov	r4, r0
   1181c:	e3a02000 	mov	r2, #0
   11820:	e5832000 	str	r2, [r3]
   11824:	ebfffe54 	bl	1117c <operator delete(void*, unsigned int)>
   11828:	e1a00004 	mov	r0, r4
   1182c:	e8bd8010 	pop	{r4, pc}

00011830 <CExceptionHandler::Throw(unsigned int)>:
   11830:	e92d4010 	push	{r4, lr}
   11834:	e1a04001 	mov	r4, r1
   11838:	e24dd008 	sub	sp, sp, #8
   1183c:	ebffe2a6 	bl	a2dc <CLogger::Get()>
   11840:	e307c6c0 	movw	ip, #30400	@ 0x76c0
   11844:	e340c001 	movt	ip, #1
   11848:	e3a02000 	mov	r2, #0
   1184c:	e3053d44 	movw	r3, #23876	@ 0x5d44
   11850:	e3403001 	movt	r3, #1
   11854:	e79c1104 	ldr	r1, [ip, r4, lsl #2]
   11858:	e58d1000 	str	r1, [sp]
   1185c:	e3051e08 	movw	r1, #24072	@ 0x5e08
   11860:	e3401001 	movt	r1, #1
   11864:	ebffe465 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11868:	e28dd008 	add	sp, sp, #8
   1186c:	e8bd8010 	pop	{r4, pc}

00011870 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   11870:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11874:	e3510002 	cmp	r1, #2
   11878:	e1a05001 	mov	r5, r1
   1187c:	e24dd024 	sub	sp, sp, #36	@ 0x24
   11880:	e1a04002 	mov	r4, r2
   11884:	0a000030 	beq	1194c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   11888:	e3510003 	cmp	r1, #3
   1188c:	13a08000 	movne	r8, #0
   11890:	11a09008 	movne	r9, r8
   11894:	0a000022 	beq	11924 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   11898:	e3540000 	cmp	r4, #0
   1189c:	0a000024 	beq	11934 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   118a0:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   118a4:	e5947048 	ldr	r7, [r4, #72]	@ 0x48
   118a8:	e203301f 	and	r3, r3, #31
   118ac:	e5946044 	ldr	r6, [r4, #68]	@ 0x44
   118b0:	e3530011 	cmp	r3, #17
   118b4:	0a000027 	beq	11958 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   118b8:	e3530012 	cmp	r3, #18
   118bc:	089400c0 	ldmeq	r4, {r6, r7}
   118c0:	e1a00006 	mov	r0, r6
   118c4:	e3051e08 	movw	r1, #24072	@ 0x5e08
   118c8:	e3401001 	movt	r1, #1
   118cc:	eb00067a 	bl	132bc <debug_stacktrace(unsigned int const*, char const*)>
   118d0:	ebffe281 	bl	a2dc <CLogger::Get()>
   118d4:	e58d7014 	str	r7, [sp, #20]
   118d8:	e58d6010 	str	r6, [sp, #16]
   118dc:	e30736c0 	movw	r3, #30400	@ 0x76c0
   118e0:	e3403001 	movt	r3, #1
   118e4:	e58d800c 	str	r8, [sp, #12]
   118e8:	e3051e08 	movw	r1, #24072	@ 0x5e08
   118ec:	e3401001 	movt	r1, #1
   118f0:	e5942050 	ldr	r2, [r4, #80]	@ 0x50
   118f4:	e58d2004 	str	r2, [sp, #4]
   118f8:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   118fc:	e58d2018 	str	r2, [sp, #24]
   11900:	e3a02000 	mov	r2, #0
   11904:	e58d9008 	str	r9, [sp, #8]
   11908:	e793c105 	ldr	ip, [r3, r5, lsl #2]
   1190c:	e3053d78 	movw	r3, #23928	@ 0x5d78
   11910:	e3403001 	movt	r3, #1
   11914:	e58dc000 	str	ip, [sp]
   11918:	ebffe438 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1191c:	e28dd024 	add	sp, sp, #36	@ 0x24
   11920:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11924:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   11928:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   1192c:	e3540000 	cmp	r4, #0
   11930:	1affffda 	bne	118a0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   11934:	e3051d54 	movw	r1, #23892	@ 0x5d54
   11938:	e3401001 	movt	r1, #1
   1193c:	e3050d6c 	movw	r0, #23916	@ 0x5d6c
   11940:	e3400001 	movt	r0, #1
   11944:	e3a02069 	mov	r2, #105	@ 0x69
   11948:	eb000400 	bl	12950 <assertion_failed>
   1194c:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   11950:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   11954:	eaffffcf 	b	11898 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   11958:	e594700c 	ldr	r7, [r4, #12]
   1195c:	e5946008 	ldr	r6, [r4, #8]
   11960:	eaffffd6 	b	118c0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>

00011964 <CExceptionHandler::CExceptionHandler()>:
   11964:	e307273c 	movw	r2, #30524	@ 0x773c
   11968:	e3402001 	movt	r2, #1
   1196c:	e92d4010 	push	{r4, lr}
   11970:	e59f10bc 	ldr	r1, [pc, #188]	@ 11a34 <CExceptionHandler::CExceptionHandler()+0xd0>
   11974:	e5923000 	ldr	r3, [r2]
   11978:	e24dd008 	sub	sp, sp, #8
   1197c:	e5801000 	str	r1, [r0]
   11980:	e3530000 	cmp	r3, #0
   11984:	1a000024 	bne	11a1c <CExceptionHandler::CExceptionHandler()+0xb8>
   11988:	e3a03004 	mov	r3, #4
   1198c:	e58d3004 	str	r3, [sp, #4]
   11990:	e59d1004 	ldr	r1, [sp, #4]
   11994:	e3013c48 	movw	r3, #7240	@ 0x1c48
   11998:	e3403001 	movt	r3, #1
   1199c:	e1a04000 	mov	r4, r0
   119a0:	e0433001 	sub	r3, r3, r1
   119a4:	e59d0004 	ldr	r0, [sp, #4]
   119a8:	e59d1004 	ldr	r1, [sp, #4]
   119ac:	e1a03143 	asr	r3, r3, #2
   119b0:	e5824000 	str	r4, [r2]
   119b4:	e2433002 	sub	r3, r3, #2
   119b8:	e2812008 	add	r2, r1, #8
   119bc:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   119c0:	e5803000 	str	r3, [r0]
   119c4:	e59d0004 	ldr	r0, [sp, #4]
   119c8:	e3013ba8 	movw	r3, #7080	@ 0x1ba8
   119cc:	e3403001 	movt	r3, #1
   119d0:	e59d1004 	ldr	r1, [sp, #4]
   119d4:	e0432002 	sub	r2, r3, r2
   119d8:	e3013bf8 	movw	r3, #7160	@ 0x1bf8
   119dc:	e3403001 	movt	r3, #1
   119e0:	e281100c 	add	r1, r1, #12
   119e4:	e0433001 	sub	r3, r3, r1
   119e8:	e59d1004 	ldr	r1, [sp, #4]
   119ec:	e1a02142 	asr	r2, r2, #2
   119f0:	e1a03143 	asr	r3, r3, #2
   119f4:	e2422002 	sub	r2, r2, #2
   119f8:	e2433002 	sub	r3, r3, #2
   119fc:	e38224ea 	orr	r2, r2, #-369098752	@ 0xea000000
   11a00:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   11a04:	e5802008 	str	r2, [r0, #8]
   11a08:	e581300c 	str	r3, [r1, #12]
   11a0c:	eb0001f7 	bl	121f0 <SyncDataAndInstructionCache>
   11a10:	e1a00004 	mov	r0, r4
   11a14:	e28dd008 	add	sp, sp, #8
   11a18:	e8bd8010 	pop	{r4, pc}
   11a1c:	e3051d54 	movw	r1, #23892	@ 0x5d54
   11a20:	e3401001 	movt	r1, #1
   11a24:	e3050a6c 	movw	r0, #23148	@ 0x5a6c
   11a28:	e3400001 	movt	r0, #1
   11a2c:	e3a02030 	mov	r2, #48	@ 0x30
   11a30:	eb0003c6 	bl	12950 <assertion_failed>
   11a34:	00015e18 	.word	0x00015e18

00011a38 <CExceptionHandler::Get()>:
   11a38:	e307373c 	movw	r3, #30524	@ 0x773c
   11a3c:	e3403001 	movt	r3, #1
   11a40:	e5930000 	ldr	r0, [r3]
   11a44:	e3500000 	cmp	r0, #0
   11a48:	112fff1e 	bxne	lr
   11a4c:	e3051d54 	movw	r1, #23892	@ 0x5d54
   11a50:	e3401001 	movt	r1, #1
   11a54:	e3050c20 	movw	r0, #23584	@ 0x5c20
   11a58:	e3400001 	movt	r0, #1
   11a5c:	e3a02087 	mov	r2, #135	@ 0x87
   11a60:	e92d4010 	push	{r4, lr}
   11a64:	eb0003b9 	bl	12950 <assertion_failed>

00011a68 <ExceptionHandler>:
   11a68:	e92d4070 	push	{r4, r5, r6, lr}
   11a6c:	e1a04000 	mov	r4, r0
   11a70:	e1a05001 	mov	r5, r1
   11a74:	eb00033c 	bl	1276c <CInterruptSystem::DisableFIQ()>
   11a78:	f1080040 	cpsie	f
   11a7c:	e307373c 	movw	r3, #30524	@ 0x773c
   11a80:	e3403001 	movt	r3, #1
   11a84:	e5930000 	ldr	r0, [r3]
   11a88:	e3500000 	cmp	r0, #0
   11a8c:	0a000005 	beq	11aa8 <ExceptionHandler+0x40>
   11a90:	e5903000 	ldr	r3, [r0]
   11a94:	e1a02005 	mov	r2, r5
   11a98:	e1a01004 	mov	r1, r4
   11a9c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11aa0:	e593300c 	ldr	r3, [r3, #12]
   11aa4:	e12fff13 	bx	r3
   11aa8:	e3051d54 	movw	r1, #23892	@ 0x5d54
   11aac:	e3401001 	movt	r1, #1
   11ab0:	e3050c20 	movw	r0, #23584	@ 0x5c20
   11ab4:	e3400001 	movt	r0, #1
   11ab8:	e3a02087 	mov	r2, #135	@ 0x87
   11abc:	eb0003a3 	bl	12950 <assertion_failed>

00011ac0 <raise>:
   11ac0:	e307373c 	movw	r3, #30524	@ 0x773c
   11ac4:	e3403001 	movt	r3, #1
   11ac8:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   11acc:	e5930000 	ldr	r0, [r3]
   11ad0:	e24dd00c 	sub	sp, sp, #12
   11ad4:	e3500000 	cmp	r0, #0
   11ad8:	0a000018 	beq	11b40 <raise+0x80>
   11adc:	e5902000 	ldr	r2, [r0]
   11ae0:	e3013830 	movw	r3, #6192	@ 0x1830
   11ae4:	e3403001 	movt	r3, #1
   11ae8:	e5922008 	ldr	r2, [r2, #8]
   11aec:	e1520003 	cmp	r2, r3
   11af0:	1a00000d 	bne	11b2c <raise+0x6c>
   11af4:	ebffe1f8 	bl	a2dc <CLogger::Get()>
   11af8:	e307c6c0 	movw	ip, #30400	@ 0x76c0
   11afc:	e340c001 	movt	ip, #1
   11b00:	e3a02000 	mov	r2, #0
   11b04:	e3053d44 	movw	r3, #23876	@ 0x5d44
   11b08:	e3403001 	movt	r3, #1
   11b0c:	e3051e08 	movw	r1, #24072	@ 0x5e08
   11b10:	e3401001 	movt	r1, #1
   11b14:	e59cc010 	ldr	ip, [ip, #16]
   11b18:	e58dc000 	str	ip, [sp]
   11b1c:	ebffe3b7 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11b20:	e3a00000 	mov	r0, #0
   11b24:	e28dd00c 	add	sp, sp, #12
   11b28:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   11b2c:	e3a01004 	mov	r1, #4
   11b30:	e12fff32 	blx	r2
   11b34:	e3a00000 	mov	r0, #0
   11b38:	e28dd00c 	add	sp, sp, #12
   11b3c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   11b40:	e3051d54 	movw	r1, #23892	@ 0x5d54
   11b44:	e3401001 	movt	r1, #1
   11b48:	e3050c20 	movw	r0, #23584	@ 0x5c20
   11b4c:	e3400001 	movt	r0, #1
   11b50:	e3a02087 	mov	r2, #135	@ 0x87
   11b54:	eb00037d 	bl	12950 <assertion_failed>

00011b58 <UndefinedInstructionInternal>:
   11b58:	e24dd004 	sub	sp, sp, #4
   11b5c:	e24ee004 	sub	lr, lr, #4
   11b60:	e92d4000 	stmfd	sp!, {lr}
   11b64:	e14fe000 	mrs	lr, SPSR
   11b68:	e92d4000 	stmfd	sp!, {lr}
   11b6c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11b70:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   11b74:	e1a0100d 	mov	r1, sp
   11b78:	f1020012 	cps	#18
   11b7c:	e1a0200d 	mov	r2, sp
   11b80:	e1a0300e 	mov	r3, lr
   11b84:	f1020011 	cps	#17
   11b88:	e1a0400d 	mov	r4, sp
   11b8c:	e1a0500e 	mov	r5, lr
   11b90:	f102001f 	cps	#31
   11b94:	e1a0d001 	mov	sp, r1
   11b98:	e92d003c 	push	{r2, r3, r4, r5}
   11b9c:	e1a0100d 	mov	r1, sp
   11ba0:	e3a00001 	mov	r0, #1
   11ba4:	eaffffaf 	b	11a68 <ExceptionHandler>

00011ba8 <PrefetchAbortStub>:
   11ba8:	e24dd004 	sub	sp, sp, #4
   11bac:	e24ee004 	sub	lr, lr, #4
   11bb0:	e92d4000 	stmfd	sp!, {lr}
   11bb4:	e14fe000 	mrs	lr, SPSR
   11bb8:	e92d4000 	stmfd	sp!, {lr}
   11bbc:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11bc0:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   11bc4:	e1a0100d 	mov	r1, sp
   11bc8:	f1020012 	cps	#18
   11bcc:	e1a0200d 	mov	r2, sp
   11bd0:	e1a0300e 	mov	r3, lr
   11bd4:	f1020011 	cps	#17
   11bd8:	e1a0400d 	mov	r4, sp
   11bdc:	e1a0500e 	mov	r5, lr
   11be0:	f102001f 	cps	#31
   11be4:	e1a0d001 	mov	sp, r1
   11be8:	e92d003c 	push	{r2, r3, r4, r5}
   11bec:	e1a0100d 	mov	r1, sp
   11bf0:	e3a00002 	mov	r0, #2
   11bf4:	eaffff9b 	b	11a68 <ExceptionHandler>

00011bf8 <DataAbortStub>:
   11bf8:	e24dd004 	sub	sp, sp, #4
   11bfc:	e24ee008 	sub	lr, lr, #8
   11c00:	e92d4000 	stmfd	sp!, {lr}
   11c04:	e14fe000 	mrs	lr, SPSR
   11c08:	e92d4000 	stmfd	sp!, {lr}
   11c0c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11c10:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   11c14:	e1a0100d 	mov	r1, sp
   11c18:	f1020012 	cps	#18
   11c1c:	e1a0200d 	mov	r2, sp
   11c20:	e1a0300e 	mov	r3, lr
   11c24:	f1020011 	cps	#17
   11c28:	e1a0400d 	mov	r4, sp
   11c2c:	e1a0500e 	mov	r5, lr
   11c30:	f102001f 	cps	#31
   11c34:	e1a0d001 	mov	sp, r1
   11c38:	e92d003c 	push	{r2, r3, r4, r5}
   11c3c:	e1a0100d 	mov	r1, sp
   11c40:	e3a00003 	mov	r0, #3
   11c44:	eaffff87 	b	11a68 <ExceptionHandler>

00011c48 <UndefinedInstructionStub>:
   11c48:	e92d4001 	push	{r0, lr}
   11c4c:	eef80a10 	vmrs	r0, fpexc
   11c50:	e3100102 	tst	r0, #-2147483648	@ 0x80000000
   11c54:	0affffbf 	beq	11b58 <UndefinedInstructionInternal>
   11c58:	e3c00102 	bic	r0, r0, #-2147483648	@ 0x80000000
   11c5c:	eee80a10 	vmsr	fpexc, r0
   11c60:	e8fd8001 	ldm	sp!, {r0, pc}^

00011c64 <IRQStub>:
   11c64:	e24ee004 	sub	lr, lr, #4
   11c68:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   11c6c:	e24dd004 	sub	sp, sp, #4
   11c70:	eef10a10 	vmrs	r0, fpscr
   11c74:	e92d0001 	stmfd	sp!, {r0}
   11c78:	ed2d0b20 	vpush	{d0-d15}
   11c7c:	ed6d0b20 	vpush	{d16-d31}
   11c80:	e59f008c 	ldr	r0, [pc, #140]	@ 11d14 <FIQStub+0x70>
   11c84:	e580e000 	str	lr, [r0]
   11c88:	eb00032f 	bl	1294c <InterruptHandler>
   11c8c:	ecfd0b20 	vpop	{d16-d31}
   11c90:	ecbd0b20 	vpop	{d0-d15}
   11c94:	e8bd0001 	ldmfd	sp!, {r0}
   11c98:	eee10a10 	vmsr	fpscr, r0
   11c9c:	e28dd004 	add	sp, sp, #4
   11ca0:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00011ca4 <FIQStub>:
   11ca4:	e24ee004 	sub	lr, lr, #4
   11ca8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   11cac:	e24dd004 	sub	sp, sp, #4
   11cb0:	eef10a10 	vmrs	r0, fpscr
   11cb4:	e92d0001 	stmfd	sp!, {r0}
   11cb8:	ed2d0b20 	vpush	{d0-d15}
   11cbc:	ed6d0b20 	vpush	{d16-d31}
   11cc0:	e59f2050 	ldr	r2, [pc, #80]	@ 11d18 <FIQStub+0x74>
   11cc4:	e5921000 	ldr	r1, [r2]
   11cc8:	e3510000 	cmp	r1, #0
   11ccc:	0a000007 	beq	11cf0 <FIQStub+0x4c>
   11cd0:	e5920004 	ldr	r0, [r2, #4]
   11cd4:	e12fff31 	blx	r1
   11cd8:	ecfd0b20 	vpop	{d16-d31}
   11cdc:	ecbd0b20 	vpop	{d0-d15}
   11ce0:	e8bd0001 	ldmfd	sp!, {r0}
   11ce4:	eee10a10 	vmsr	fpscr, r0
   11ce8:	e28dd004 	add	sp, sp, #4
   11cec:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11cf0:	e59f1024 	ldr	r1, [pc, #36]	@ 11d1c <FIQStub+0x78>
   11cf4:	e3a00000 	mov	r0, #0
   11cf8:	e5810000 	str	r0, [r1]
   11cfc:	ecfd0b20 	vpop	{d16-d31}
   11d00:	ecbd0b20 	vpop	{d0-d15}
   11d04:	e8bd0001 	ldmfd	sp!, {r0}
   11d08:	eee10a10 	vmsr	fpscr, r0
   11d0c:	e28dd004 	add	sp, sp, #4
   11d10:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11d14:	000176e0 	.word	0x000176e0
   11d18:	000176d4 	.word	0x000176d4
   11d1c:	3f00b20c 	.word	0x3f00b20c

00011d20 <CMemorySystem::~CMemorySystem()>:
   11d20:	e3073740 	movw	r3, #30528	@ 0x7740
   11d24:	e3403001 	movt	r3, #1
   11d28:	e92d4070 	push	{r4, r5, r6, lr}
   11d2c:	e1a04000 	mov	r4, r0
   11d30:	e5932000 	ldr	r2, [r3]
   11d34:	e1500002 	cmp	r0, r2
   11d38:	0a000005 	beq	11d54 <CMemorySystem::~CMemorySystem()+0x34>
   11d3c:	e28400c8 	add	r0, r4, #200	@ 0xc8
   11d40:	eb000b1a 	bl	149b0 <CPageAllocator::~CPageAllocator()>
   11d44:	e284000c 	add	r0, r4, #12
   11d48:	ebfffd2e 	bl	11208 <CHeapAllocator::~CHeapAllocator()>
   11d4c:	e1a00004 	mov	r0, r4
   11d50:	e8bd8070 	pop	{r4, r5, r6, pc}
   11d54:	e5d02000 	ldrb	r2, [r0]
   11d58:	e3a05000 	mov	r5, #0
   11d5c:	e5835000 	str	r5, [r3]
   11d60:	e1520005 	cmp	r2, r5
   11d64:	0afffff4 	beq	11d3c <CMemorySystem::~CMemorySystem()+0x1c>
   11d68:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11d6c:	e3c33005 	bic	r3, r3, #5
   11d70:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   11d74:	ebfffe66 	bl	11714 <CleanDataCache>
   11d78:	ebfffe3b 	bl	1166c <InvalidateDataCache>
   11d7c:	ee085f17 	mcr	15, 0, r5, cr8, cr7, {0}
   11d80:	f57ff04f 	dsb	sy
   11d84:	eaffffec 	b	11d3c <CMemorySystem::~CMemorySystem()+0x1c>

00011d88 <CMemorySystem::Destructor()>:
   11d88:	e3073740 	movw	r3, #30528	@ 0x7740
   11d8c:	e3403001 	movt	r3, #1
   11d90:	e5932000 	ldr	r2, [r3]
   11d94:	e1520000 	cmp	r2, r0
   11d98:	112fff1e 	bxne	lr
   11d9c:	e5d22000 	ldrb	r2, [r2]
   11da0:	e92d4010 	push	{r4, lr}
   11da4:	e3a04000 	mov	r4, #0
   11da8:	e1520004 	cmp	r2, r4
   11dac:	e5834000 	str	r4, [r3]
   11db0:	08bd8010 	popeq	{r4, pc}
   11db4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11db8:	e3c33005 	bic	r3, r3, #5
   11dbc:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   11dc0:	ebfffe53 	bl	11714 <CleanDataCache>
   11dc4:	ebfffe28 	bl	1166c <InvalidateDataCache>
   11dc8:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   11dcc:	f57ff04f 	dsb	sy
   11dd0:	e8bd8010 	pop	{r4, pc}

00011dd4 <CMemorySystem::GetMemSize() const>:
   11dd4:	e3073740 	movw	r3, #30528	@ 0x7740
   11dd8:	e3403001 	movt	r3, #1
   11ddc:	e5933000 	ldr	r3, [r3]
   11de0:	e3530000 	cmp	r3, #0
   11de4:	0a000002 	beq	11df4 <CMemorySystem::GetMemSize() const+0x20>
   11de8:	e9930009 	ldmib	r3, {r0, r3}
   11dec:	e0800003 	add	r0, r0, r3
   11df0:	e12fff1e 	bx	lr
   11df4:	e3051e28 	movw	r1, #24104	@ 0x5e28
   11df8:	e3401001 	movt	r1, #1
   11dfc:	e3a020a0 	mov	r2, #160	@ 0xa0
   11e00:	e281000c 	add	r0, r1, #12
   11e04:	e92d4010 	push	{r4, lr}
   11e08:	eb0002d0 	bl	12950 <assertion_failed>

00011e0c <CMemorySystem::Get()>:
   11e0c:	e3073740 	movw	r3, #30528	@ 0x7740
   11e10:	e3403001 	movt	r3, #1
   11e14:	e5930000 	ldr	r0, [r3]
   11e18:	e3500000 	cmp	r0, #0
   11e1c:	112fff1e 	bxne	lr
   11e20:	e3051e28 	movw	r1, #24104	@ 0x5e28
   11e24:	e3401001 	movt	r1, #1
   11e28:	e3a020a6 	mov	r2, #166	@ 0xa6
   11e2c:	e281000c 	add	r0, r1, #12
   11e30:	e92d4010 	push	{r4, lr}
   11e34:	eb0002c5 	bl	12950 <assertion_failed>

00011e38 <CMemorySystem::EnableMMU()>:
   11e38:	e5d03000 	ldrb	r3, [r0]
   11e3c:	e92d4010 	push	{r4, lr}
   11e40:	e3530000 	cmp	r3, #0
   11e44:	0a00001a 	beq	11eb4 <CMemorySystem::EnableMMU()+0x7c>
   11e48:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   11e4c:	e3833040 	orr	r3, r3, #64	@ 0x40
   11e50:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   11e54:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   11e58:	e3130001 	tst	r3, #1
   11e5c:	1a000019 	bne	11ec8 <CMemorySystem::EnableMMU()+0x90>
   11e60:	e3a04000 	mov	r4, #0
   11e64:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   11e68:	e59000d8 	ldr	r0, [r0, #216]	@ 0xd8
   11e6c:	e1500004 	cmp	r0, r4
   11e70:	0a000019 	beq	11edc <CMemorySystem::EnableMMU()+0xa4>
   11e74:	eb000095 	bl	120d0 <CPageTable::GetBaseAddress() const>
   11e78:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   11e7c:	e3a03001 	mov	r3, #1
   11e80:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   11e84:	ebfffdf8 	bl	1166c <InvalidateDataCache>
   11e88:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   11e8c:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   11e90:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   11e94:	f57ff04f 	dsb	sy
   11e98:	f57ff06f 	isb	sy
   11e9c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11ea0:	e3c33002 	bic	r3, r3, #2
   11ea4:	e3833b06 	orr	r3, r3, #6144	@ 0x1800
   11ea8:	e3833005 	orr	r3, r3, #5
   11eac:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   11eb0:	e8bd8010 	pop	{r4, pc}
   11eb4:	e3051e28 	movw	r1, #24104	@ 0x5e28
   11eb8:	e3401001 	movt	r1, #1
   11ebc:	e3a020ac 	mov	r2, #172	@ 0xac
   11ec0:	e281001c 	add	r0, r1, #28
   11ec4:	eb0002a1 	bl	12950 <assertion_failed>
   11ec8:	e3051e28 	movw	r1, #24104	@ 0x5e28
   11ecc:	e3401001 	movt	r1, #1
   11ed0:	e3a020ba 	mov	r2, #186	@ 0xba
   11ed4:	e281002c 	add	r0, r1, #44	@ 0x2c
   11ed8:	eb00029c 	bl	12950 <assertion_failed>
   11edc:	e3051e28 	movw	r1, #24104	@ 0x5e28
   11ee0:	e3401001 	movt	r1, #1
   11ee4:	e3a020c0 	mov	r2, #192	@ 0xc0
   11ee8:	e2810058 	add	r0, r1, #88	@ 0x58
   11eec:	eb000297 	bl	12950 <assertion_failed>

00011ef0 <CMemorySystem::CMemorySystem(bool)>:
   11ef0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11ef4:	e1a04000 	mov	r4, r0
   11ef8:	e280700c 	add	r7, r0, #12
   11efc:	e1a03001 	mov	r3, r1
   11f00:	e3a05000 	mov	r5, #0
   11f04:	e5c03000 	strb	r3, [r0]
   11f08:	e24dd02c 	sub	sp, sp, #44	@ 0x2c
   11f0c:	e5805004 	str	r5, [r0, #4]
   11f10:	e28460c8 	add	r6, r4, #200	@ 0xc8
   11f14:	e5805008 	str	r5, [r0, #8]
   11f18:	e1a00007 	mov	r0, r7
   11f1c:	e59f110c 	ldr	r1, [pc, #268]	@ 12030 <CMemorySystem::CMemorySystem(bool)+0x140>
   11f20:	ebfffca1 	bl	111ac <CHeapAllocator::CHeapAllocator(char const*)>
   11f24:	e1a00006 	mov	r0, r6
   11f28:	eb000a99 	bl	14994 <CPageAllocator::CPageAllocator()>
   11f2c:	e3073740 	movw	r3, #30528	@ 0x7740
   11f30:	e3403001 	movt	r3, #1
   11f34:	e58450d8 	str	r5, [r4, #216]	@ 0xd8
   11f38:	e5935000 	ldr	r5, [r3]
   11f3c:	e3550000 	cmp	r5, #0
   11f40:	0a000002 	beq	11f50 <CMemorySystem::CMemorySystem(bool)+0x60>
   11f44:	e1a00004 	mov	r0, r4
   11f48:	e28dd02c 	add	sp, sp, #44	@ 0x2c
   11f4c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11f50:	e3a01001 	mov	r1, #1
   11f54:	e28d000c 	add	r0, sp, #12
   11f58:	e5834000 	str	r4, [r3]
   11f5c:	eb0003de 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11f60:	e3a03014 	mov	r3, #20
   11f64:	e3a01005 	mov	r1, #5
   11f68:	e3401001 	movt	r1, #1
   11f6c:	e08d2003 	add	r2, sp, r3
   11f70:	e28d000c 	add	r0, sp, #12
   11f74:	e58d5000 	str	r5, [sp]
   11f78:	eb000429 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11f7c:	e3500000 	cmp	r0, #0
   11f80:	0a000016 	beq	11fe0 <CMemorySystem::CMemorySystem(bool)+0xf0>
   11f84:	e59d3020 	ldr	r3, [sp, #32]
   11f88:	e3530000 	cmp	r3, #0
   11f8c:	1a000022 	bne	1201c <CMemorySystem::CMemorySystem(bool)+0x12c>
   11f90:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
   11f94:	e2435501 	sub	r5, r3, #4194304	@ 0x400000
   11f98:	e2432609 	sub	r2, r3, #9437184	@ 0x900000
   11f9c:	e1a00007 	mov	r0, r7
   11fa0:	e3a01605 	mov	r1, #5242880	@ 0x500000
   11fa4:	e5843004 	str	r3, [r4, #4]
   11fa8:	e3a03701 	mov	r3, #262144	@ 0x40000
   11fac:	ebfffc96 	bl	1120c <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   11fb0:	e3a02501 	mov	r2, #4194304	@ 0x400000
   11fb4:	e1a01005 	mov	r1, r5
   11fb8:	e1a00006 	mov	r0, r6
   11fbc:	eb000a7c 	bl	149b4 <CPageAllocator::Setup(unsigned int, unsigned int)>
   11fc0:	e5d43000 	ldrb	r3, [r4]
   11fc4:	e3530000 	cmp	r3, #0
   11fc8:	1a00000a 	bne	11ff8 <CMemorySystem::CMemorySystem(bool)+0x108>
   11fcc:	e28d000c 	add	r0, sp, #12
   11fd0:	eb0003c8 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
   11fd4:	e1a00004 	mov	r0, r4
   11fd8:	e28dd02c 	add	sp, sp, #44	@ 0x2c
   11fdc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11fe0:	e3a03303 	mov	r3, #201326592	@ 0xc000000
   11fe4:	e3a026b7 	mov	r2, #191889408	@ 0xb700000
   11fe8:	e3a0552f 	mov	r5, #197132288	@ 0xbc00000
   11fec:	e58d0020 	str	r0, [sp, #32]
   11ff0:	e58d3024 	str	r3, [sp, #36]	@ 0x24
   11ff4:	eaffffe8 	b	11f9c <CMemorySystem::CMemorySystem(bool)+0xac>
   11ff8:	e3a00004 	mov	r0, #4
   11ffc:	ebfffc46 	bl	1111c <operator new(unsigned int)>
   12000:	e5941004 	ldr	r1, [r4, #4]
   12004:	e1a05000 	mov	r5, r0
   12008:	eb00000c 	bl	12040 <CPageTable::CPageTable(unsigned int)>
   1200c:	e1a00004 	mov	r0, r4
   12010:	e58450d8 	str	r5, [r4, #216]	@ 0xd8
   12014:	ebffff87 	bl	11e38 <CMemorySystem::EnableMMU()>
   12018:	eaffffeb 	b	11fcc <CMemorySystem::CMemorySystem(bool)+0xdc>
   1201c:	e3051e28 	movw	r1, #24104	@ 0x5e28
   12020:	e3401001 	movt	r1, #1
   12024:	e3a0204e 	mov	r2, #78	@ 0x4e
   12028:	e2810074 	add	r0, r1, #116	@ 0x74
   1202c:	eb000247 	bl	12950 <assertion_failed>
   12030:	00015e94 	.word	0x00015e94

00012034 <CMemorySystem::GetCoherentPage(unsigned int)>:
   12034:	e1a00600 	lsl	r0, r0, #12
   12038:	e2800501 	add	r0, r0, #4194304	@ 0x400000
   1203c:	e12fff1e 	bx	lr

00012040 <CPageTable::CPageTable(unsigned int)>:
   12040:	e3a039ba 	mov	r3, #3047424	@ 0x2e8000
   12044:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12048:	e1a02003 	mov	r2, r3
   1204c:	e304ee64 	movw	lr, #20068	@ 0x4e64
   12050:	e340e001 	movt	lr, #1
   12054:	e5803000 	str	r3, [r0]
   12058:	e3007412 	movw	r7, #1042	@ 0x412
   1205c:	e3407041 	movt	r7, #65	@ 0x41
   12060:	e30f5ffe 	movw	r5, #65534	@ 0xfffe
   12064:	e3445003 	movt	r5, #16387	@ 0x4003
   12068:	e1a08000 	mov	r8, r0
   1206c:	e3a03000 	mov	r3, #0
   12070:	e1a04001 	mov	r4, r1
   12074:	e300641e 	movw	r6, #1054	@ 0x41e
   12078:	e300140e 	movw	r1, #1038	@ 0x40e
   1207c:	e153000e 	cmp	r3, lr
   12080:	3183c001 	orrcc	ip, r3, r1
   12084:	3a000009 	bcc	120b0 <CPageTable::CPageTable(unsigned int)+0x70>
   12088:	e3530501 	cmp	r3, #4194304	@ 0x400000
   1208c:	01a0c007 	moveq	ip, r7
   12090:	0a000006 	beq	120b0 <CPageTable::CPageTable(unsigned int)+0x70>
   12094:	e1530004 	cmp	r3, r4
   12098:	e1a0c003 	mov	ip, r3
   1209c:	3183c006 	orrcc	ip, r3, r6
   120a0:	3a000002 	bcc	120b0 <CPageTable::CPageTable(unsigned int)+0x70>
   120a4:	e1530005 	cmp	r3, r5
   120a8:	9383cb41 	orrls	ip, r3, #66560	@ 0x10400
   120ac:	938cc016 	orrls	ip, ip, #22
   120b0:	e482c004 	str	ip, [r2], #4
   120b4:	e2833601 	add	r3, r3, #1048576	@ 0x100000
   120b8:	e35209bb 	cmp	r2, #3063808	@ 0x2ec000
   120bc:	1affffee 	bne	1207c <CPageTable::CPageTable(unsigned int)+0x3c>
   120c0:	ebfffd93 	bl	11714 <CleanDataCache>
   120c4:	e1a00008 	mov	r0, r8
   120c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000120cc <CPageTable::~CPageTable()>:
   120cc:	e12fff1e 	bx	lr

000120d0 <CPageTable::GetBaseAddress() const>:
   120d0:	e5900000 	ldr	r0, [r0]
   120d4:	e3800059 	orr	r0, r0, #89	@ 0x59
   120d8:	e12fff1e 	bx	lr

000120dc <CurrentExecutionLevel>:
   120dc:	e10f0000 	mrs	r0, CPSR
   120e0:	e3100040 	tst	r0, #64	@ 0x40
   120e4:	07e003d0 	ubfxeq	r0, r0, #7, #1
   120e8:	13a00002 	movne	r0, #2
   120ec:	e12fff1e 	bx	lr

000120f0 <EnterCritical>:
   120f0:	e2403001 	sub	r3, r0, #1
   120f4:	e92d4010 	push	{r4, lr}
   120f8:	e3530001 	cmp	r3, #1
   120fc:	8a000012 	bhi	1214c <EnterCritical+0x5c>
   12100:	e10f1000 	mrs	r1, CPSR
   12104:	e3500002 	cmp	r0, #2
   12108:	1a000015 	bne	12164 <EnterCritical+0x74>
   1210c:	f10c00c0 	cpsid	if
   12110:	e3073748 	movw	r3, #30536	@ 0x7748
   12114:	e3403001 	movt	r3, #1
   12118:	e5932000 	ldr	r2, [r3]
   1211c:	e3520013 	cmp	r2, #19
   12120:	8a000017 	bhi	12184 <EnterCritical+0x94>
   12124:	e5932000 	ldr	r2, [r3]
   12128:	e3500001 	cmp	r0, #1
   1212c:	e2820001 	add	r0, r2, #1
   12130:	e5830000 	str	r0, [r3]
   12134:	e0833102 	add	r3, r3, r2, lsl #2
   12138:	e5831008 	str	r1, [r3, #8]
   1213c:	1a000000 	bne	12144 <EnterCritical+0x54>
   12140:	f1080040 	cpsie	f
   12144:	f57ff05f 	dmb	sy
   12148:	e8bd8010 	pop	{r4, pc}
   1214c:	e3051eb8 	movw	r1, #24248	@ 0x5eb8
   12150:	e3401001 	movt	r1, #1
   12154:	e3050ec8 	movw	r0, #24264	@ 0x5ec8
   12158:	e3400001 	movt	r0, #1
   1215c:	e3a02064 	mov	r2, #100	@ 0x64
   12160:	eb0001fa 	bl	12950 <assertion_failed>
   12164:	e3110040 	tst	r1, #64	@ 0x40
   12168:	0affffe7 	beq	1210c <EnterCritical+0x1c>
   1216c:	e3051eb8 	movw	r1, #24248	@ 0x5eb8
   12170:	e3401001 	movt	r1, #1
   12174:	e3050f00 	movw	r0, #24320	@ 0x5f00
   12178:	e3400001 	movt	r0, #1
   1217c:	e3a0206a 	mov	r2, #106	@ 0x6a
   12180:	eb0001f2 	bl	12950 <assertion_failed>
   12184:	e3051eb8 	movw	r1, #24248	@ 0x5eb8
   12188:	e3401001 	movt	r1, #1
   1218c:	e3050f30 	movw	r0, #24368	@ 0x5f30
   12190:	e3400001 	movt	r0, #1
   12194:	e3a0206e 	mov	r2, #110	@ 0x6e
   12198:	eb0001ec 	bl	12950 <assertion_failed>

0001219c <LeaveCritical>:
   1219c:	f57ff05f 	dmb	sy
   121a0:	f10c0040 	cpsid	f
   121a4:	e3073748 	movw	r3, #30536	@ 0x7748
   121a8:	e3403001 	movt	r3, #1
   121ac:	e5932000 	ldr	r2, [r3]
   121b0:	e3520000 	cmp	r2, #0
   121b4:	0a000006 	beq	121d4 <LeaveCritical+0x38>
   121b8:	e5932000 	ldr	r2, [r3]
   121bc:	e2422001 	sub	r2, r2, #1
   121c0:	e5832000 	str	r2, [r3]
   121c4:	e0833102 	add	r3, r3, r2, lsl #2
   121c8:	e5933008 	ldr	r3, [r3, #8]
   121cc:	e121f003 	msr	CPSR_c, r3
   121d0:	e12fff1e 	bx	lr
   121d4:	e3051eb8 	movw	r1, #24248	@ 0x5eb8
   121d8:	e3401001 	movt	r1, #1
   121dc:	e3050f58 	movw	r0, #24408	@ 0x5f58
   121e0:	e3400001 	movt	r0, #1
   121e4:	e3a0207f 	mov	r2, #127	@ 0x7f
   121e8:	e92d4010 	push	{r4, lr}
   121ec:	eb0001d7 	bl	12950 <assertion_failed>

000121f0 <SyncDataAndInstructionCache>:
   121f0:	e92d4010 	push	{r4, lr}
   121f4:	ebfffd46 	bl	11714 <CleanDataCache>
   121f8:	e3a03000 	mov	r3, #0
   121fc:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   12200:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   12204:	f57ff04f 	dsb	sy
   12208:	f57ff06f 	isb	sy
   1220c:	e8bd8010 	pop	{r4, pc}

00012210 <CInterruptSystem::CInterruptSystem()>:
   12210:	e3a02000 	mov	r2, #0
   12214:	e2403004 	sub	r3, r0, #4
   12218:	e2801f53 	add	r1, r0, #332	@ 0x14c
   1221c:	e5a32004 	str	r2, [r3, #4]!
   12220:	e1530001 	cmp	r3, r1
   12224:	e5832150 	str	r2, [r3, #336]	@ 0x150
   12228:	1afffffb 	bne	1221c <CInterruptSystem::CInterruptSystem()+0xc>
   1222c:	e30737a0 	movw	r3, #30624	@ 0x77a0
   12230:	e3403001 	movt	r3, #1
   12234:	e5830000 	str	r0, [r3]
   12238:	e12fff1e 	bx	lr

0001223c <CInterruptSystem::~CInterruptSystem()>:
   1223c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   12240:	f10c0080 	cpsid	i
   12244:	e3a0e101 	mov	lr, #1073741824	@ 0x40000000
   12248:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   1224c:	e3433f00 	movt	r3, #16128	@ 0x3f00
   12250:	e30727a0 	movw	r2, #30624	@ 0x77a0
   12254:	e3402001 	movt	r2, #1
   12258:	e3a01000 	mov	r1, #0
   1225c:	e3e0c000 	mvn	ip, #0
   12260:	e583120c 	str	r1, [r3, #524]	@ 0x20c
   12264:	e583c21c 	str	ip, [r3, #540]	@ 0x21c
   12268:	e583c220 	str	ip, [r3, #544]	@ 0x220
   1226c:	e583c224 	str	ip, [r3, #548]	@ 0x224
   12270:	e58e1040 	str	r1, [lr, #64]	@ 0x40
   12274:	e5821000 	str	r1, [r2]
   12278:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

0001227c <CInterruptSystem::Initialize()>:
   1227c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   12280:	e3a03004 	mov	r3, #4
   12284:	e3012c64 	movw	r2, #7268	@ 0x1c64
   12288:	e3402001 	movt	r2, #1
   1228c:	e24dd00c 	sub	sp, sp, #12
   12290:	e58d3004 	str	r3, [sp, #4]
   12294:	e3013ca4 	movw	r3, #7332	@ 0x1ca4
   12298:	e3403001 	movt	r3, #1
   1229c:	e59d0004 	ldr	r0, [sp, #4]
   122a0:	e59dc004 	ldr	ip, [sp, #4]
   122a4:	e59d1004 	ldr	r1, [sp, #4]
   122a8:	e2800014 	add	r0, r0, #20
   122ac:	e0422000 	sub	r2, r2, r0
   122b0:	e2811018 	add	r1, r1, #24
   122b4:	e0433001 	sub	r3, r3, r1
   122b8:	e59d1004 	ldr	r1, [sp, #4]
   122bc:	e1a02142 	asr	r2, r2, #2
   122c0:	e1a03143 	asr	r3, r3, #2
   122c4:	e2422002 	sub	r2, r2, #2
   122c8:	e2433002 	sub	r3, r3, #2
   122cc:	e38224ea 	orr	r2, r2, #-369098752	@ 0xea000000
   122d0:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   122d4:	e58c2014 	str	r2, [ip, #20]
   122d8:	e5813018 	str	r3, [r1, #24]
   122dc:	ebffffc3 	bl	121f0 <SyncDataAndInstructionCache>
   122e0:	e3a00101 	mov	r0, #1073741824	@ 0x40000000
   122e4:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   122e8:	e3433f00 	movt	r3, #16128	@ 0x3f00
   122ec:	e3e02000 	mvn	r2, #0
   122f0:	e3a01000 	mov	r1, #0
   122f4:	e583120c 	str	r1, [r3, #524]	@ 0x20c
   122f8:	e583221c 	str	r2, [r3, #540]	@ 0x21c
   122fc:	e5832220 	str	r2, [r3, #544]	@ 0x220
   12300:	e5832224 	str	r2, [r3, #548]	@ 0x224
   12304:	e5801040 	str	r1, [r0, #64]	@ 0x40
   12308:	f1080080 	cpsie	i
   1230c:	e3a00001 	mov	r0, #1
   12310:	e28dd00c 	add	sp, sp, #12
   12314:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

00012318 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   12318:	e3510053 	cmp	r1, #83	@ 0x53
   1231c:	e92d4010 	push	{r4, lr}
   12320:	8a00001d 	bhi	1239c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x84>
   12324:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   12328:	e080e101 	add	lr, r0, r1, lsl #2
   1232c:	e35c0000 	cmp	ip, #0
   12330:	1a00001f 	bne	123b4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x9c>
   12334:	e7802101 	str	r2, [r0, r1, lsl #2]
   12338:	e3510047 	cmp	r1, #71	@ 0x47
   1233c:	e58e3150 	str	r3, [lr, #336]	@ 0x150
   12340:	9a000006 	bls	12360 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   12344:	e3510049 	cmp	r1, #73	@ 0x49
   12348:	1a00001f 	bne	123cc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb4>
   1234c:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   12350:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   12354:	e3833002 	orr	r3, r3, #2
   12358:	e5823040 	str	r3, [r2, #64]	@ 0x40
   1235c:	e8bd8010 	pop	{r4, pc}
   12360:	e351001f 	cmp	r1, #31
   12364:	930b3210 	movwls	r3, #45584	@ 0xb210
   12368:	93433f00 	movtls	r3, #16128	@ 0x3f00
   1236c:	9a000005 	bls	12388 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x70>
   12370:	e351003f 	cmp	r1, #63	@ 0x3f
   12374:	e30b2214 	movw	r2, #45588	@ 0xb214
   12378:	e3432f00 	movt	r2, #16128	@ 0x3f00
   1237c:	e30b3218 	movw	r3, #45592	@ 0xb218
   12380:	e3433f00 	movt	r3, #16128	@ 0x3f00
   12384:	91a03002 	movls	r3, r2
   12388:	e201101f 	and	r1, r1, #31
   1238c:	e3a02001 	mov	r2, #1
   12390:	e1a02112 	lsl	r2, r2, r1
   12394:	e5832000 	str	r2, [r3]
   12398:	e8bd8010 	pop	{r4, pc}
   1239c:	e3051f70 	movw	r1, #24432	@ 0x5f70
   123a0:	e3401001 	movt	r1, #1
   123a4:	e3050f80 	movw	r0, #24448	@ 0x5f80
   123a8:	e3400001 	movt	r0, #1
   123ac:	e3a02076 	mov	r2, #118	@ 0x76
   123b0:	eb000166 	bl	12950 <assertion_failed>
   123b4:	e3051f70 	movw	r1, #24432	@ 0x5f70
   123b8:	e3401001 	movt	r1, #1
   123bc:	e3050f94 	movw	r0, #24468	@ 0x5f94
   123c0:	e3400001 	movt	r0, #1
   123c4:	e3a02077 	mov	r2, #119	@ 0x77
   123c8:	eb000160 	bl	12950 <assertion_failed>
   123cc:	e3051f70 	movw	r1, #24432	@ 0x5f70
   123d0:	e3401001 	movt	r1, #1
   123d4:	e3050fb0 	movw	r0, #24496	@ 0x5fb0
   123d8:	e3400001 	movt	r0, #1
   123dc:	e3a020b0 	mov	r2, #176	@ 0xb0
   123e0:	eb00015a 	bl	12950 <assertion_failed>

000123e4 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   123e4:	e3510053 	cmp	r1, #83	@ 0x53
   123e8:	e92d4010 	push	{r4, lr}
   123ec:	8a00001e 	bhi	1246c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x88>
   123f0:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   123f4:	e0802101 	add	r2, r0, r1, lsl #2
   123f8:	e3530000 	cmp	r3, #0
   123fc:	0a000020 	beq	12484 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xa0>
   12400:	e3510047 	cmp	r1, #71	@ 0x47
   12404:	9a000009 	bls	12430 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   12408:	e3510049 	cmp	r1, #73	@ 0x49
   1240c:	1a000022 	bne	1249c <CInterruptSystem::DisconnectIRQ(unsigned int)+0xb8>
   12410:	e3a0c101 	mov	ip, #1073741824	@ 0x40000000
   12414:	e59c3040 	ldr	r3, [ip, #64]	@ 0x40
   12418:	e3c33002 	bic	r3, r3, #2
   1241c:	e58c3040 	str	r3, [ip, #64]	@ 0x40
   12420:	e3a03000 	mov	r3, #0
   12424:	e7803101 	str	r3, [r0, r1, lsl #2]
   12428:	e5823150 	str	r3, [r2, #336]	@ 0x150
   1242c:	e8bd8010 	pop	{r4, pc}
   12430:	e351001f 	cmp	r1, #31
   12434:	930b321c 	movwls	r3, #45596	@ 0xb21c
   12438:	93433f00 	movtls	r3, #16128	@ 0x3f00
   1243c:	9a000005 	bls	12458 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
   12440:	e351003f 	cmp	r1, #63	@ 0x3f
   12444:	e30bc220 	movw	ip, #45600	@ 0xb220
   12448:	e343cf00 	movt	ip, #16128	@ 0x3f00
   1244c:	e30b3224 	movw	r3, #45604	@ 0xb224
   12450:	e3433f00 	movt	r3, #16128	@ 0x3f00
   12454:	91a0300c 	movls	r3, ip
   12458:	e201e01f 	and	lr, r1, #31
   1245c:	e3a0c001 	mov	ip, #1
   12460:	e1a0ce1c 	lsl	ip, ip, lr
   12464:	e583c000 	str	ip, [r3]
   12468:	eaffffec 	b	12420 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   1246c:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12470:	e3401001 	movt	r1, #1
   12474:	e3050f80 	movw	r0, #24448	@ 0x5f80
   12478:	e3400001 	movt	r0, #1
   1247c:	e3a02081 	mov	r2, #129	@ 0x81
   12480:	eb000132 	bl	12950 <assertion_failed>
   12484:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12488:	e3401001 	movt	r1, #1
   1248c:	e3050fd0 	movw	r0, #24528	@ 0x5fd0
   12490:	e3400001 	movt	r0, #1
   12494:	e3a02082 	mov	r2, #130	@ 0x82
   12498:	eb00012c 	bl	12950 <assertion_failed>
   1249c:	e3051f70 	movw	r1, #24432	@ 0x5f70
   124a0:	e3401001 	movt	r1, #1
   124a4:	e3050fb0 	movw	r0, #24496	@ 0x5fb0
   124a8:	e3400001 	movt	r0, #1
   124ac:	e3a020c8 	mov	r2, #200	@ 0xc8
   124b0:	eb000126 	bl	12950 <assertion_failed>

000124b4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   124b4:	e3510047 	cmp	r1, #71	@ 0x47
   124b8:	e92d4010 	push	{r4, lr}
   124bc:	8a00001e 	bhi	1253c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   124c0:	e3520000 	cmp	r2, #0
   124c4:	0a000022 	beq	12554 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
   124c8:	e30706d4 	movw	r0, #30420	@ 0x76d4
   124cc:	e3400001 	movt	r0, #1
   124d0:	e5d0e001 	ldrb	lr, [r0, #1]
   124d4:	e5d0c000 	ldrb	ip, [r0]
   124d8:	e18cc40e 	orr	ip, ip, lr, lsl #8
   124dc:	e5d0e002 	ldrb	lr, [r0, #2]
   124e0:	e18cc80e 	orr	ip, ip, lr, lsl #16
   124e4:	e5d0e003 	ldrb	lr, [r0, #3]
   124e8:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   124ec:	1a00001e 	bne	1256c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   124f0:	e7e7c452 	ubfx	ip, r2, #8, #8
   124f4:	e5c0c001 	strb	ip, [r0, #1]
   124f8:	e7e7c852 	ubfx	ip, r2, #16, #8
   124fc:	e5c0c002 	strb	ip, [r0, #2]
   12500:	e3a0ca0b 	mov	ip, #45056	@ 0xb000
   12504:	e343cf00 	movt	ip, #16128	@ 0x3f00
   12508:	e7e7e453 	ubfx	lr, r3, #8, #8
   1250c:	e5c02000 	strb	r2, [r0]
   12510:	e5c03004 	strb	r3, [r0, #4]
   12514:	e1a02c22 	lsr	r2, r2, #24
   12518:	e3811080 	orr	r1, r1, #128	@ 0x80
   1251c:	e5c02003 	strb	r2, [r0, #3]
   12520:	e5c0e005 	strb	lr, [r0, #5]
   12524:	e7e72853 	ubfx	r2, r3, #16, #8
   12528:	e1a03c23 	lsr	r3, r3, #24
   1252c:	e5c02006 	strb	r2, [r0, #6]
   12530:	e5c03007 	strb	r3, [r0, #7]
   12534:	e58c120c 	str	r1, [ip, #524]	@ 0x20c
   12538:	e8bd8010 	pop	{r4, pc}
   1253c:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12540:	e3401001 	movt	r1, #1
   12544:	e3050fec 	movw	r0, #24556	@ 0x5fec
   12548:	e3400001 	movt	r0, #1
   1254c:	e3a0208f 	mov	r2, #143	@ 0x8f
   12550:	eb0000fe 	bl	12950 <assertion_failed>
   12554:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12558:	e3401001 	movt	r1, #1
   1255c:	e3060020 	movw	r0, #24608	@ 0x6020
   12560:	e3400001 	movt	r0, #1
   12564:	e3a02090 	mov	r2, #144	@ 0x90
   12568:	eb0000f8 	bl	12950 <assertion_failed>
   1256c:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12570:	e3401001 	movt	r1, #1
   12574:	e3060000 	movw	r0, #24576	@ 0x6000
   12578:	e3400001 	movt	r0, #1
   1257c:	e3a02091 	mov	r2, #145	@ 0x91
   12580:	eb0000f2 	bl	12950 <assertion_failed>

00012584 <CInterruptSystem::DisconnectFIQ()>:
   12584:	e30736d4 	movw	r3, #30420	@ 0x76d4
   12588:	e3403001 	movt	r3, #1
   1258c:	e5d32000 	ldrb	r2, [r3]
   12590:	e5d3c001 	ldrb	ip, [r3, #1]
   12594:	e5d30002 	ldrb	r0, [r3, #2]
   12598:	e5d31003 	ldrb	r1, [r3, #3]
   1259c:	e182240c 	orr	r2, r2, ip, lsl #8
   125a0:	e1822800 	orr	r2, r2, r0, lsl #16
   125a4:	e1922c01 	orrs	r2, r2, r1, lsl #24
   125a8:	0a00000c 	beq	125e0 <CInterruptSystem::DisconnectFIQ()+0x5c>
   125ac:	e3a01a0b 	mov	r1, #45056	@ 0xb000
   125b0:	e3431f00 	movt	r1, #16128	@ 0x3f00
   125b4:	e3a02000 	mov	r2, #0
   125b8:	e581220c 	str	r2, [r1, #524]	@ 0x20c
   125bc:	e5c32000 	strb	r2, [r3]
   125c0:	e5c32001 	strb	r2, [r3, #1]
   125c4:	e5c32002 	strb	r2, [r3, #2]
   125c8:	e5c32003 	strb	r2, [r3, #3]
   125cc:	e5c32004 	strb	r2, [r3, #4]
   125d0:	e5c32005 	strb	r2, [r3, #5]
   125d4:	e5c32006 	strb	r2, [r3, #6]
   125d8:	e5c32007 	strb	r2, [r3, #7]
   125dc:	e12fff1e 	bx	lr
   125e0:	e3051f70 	movw	r1, #24432	@ 0x5f70
   125e4:	e3401001 	movt	r1, #1
   125e8:	e3060018 	movw	r0, #24600	@ 0x6018
   125ec:	e3400001 	movt	r0, #1
   125f0:	e3a0209b 	mov	r2, #155	@ 0x9b
   125f4:	e92d4010 	push	{r4, lr}
   125f8:	eb0000d4 	bl	12950 <assertion_failed>

000125fc <CInterruptSystem::EnableIRQ(unsigned int)>:
   125fc:	e3500053 	cmp	r0, #83	@ 0x53
   12600:	e92d4010 	push	{r4, lr}
   12604:	8a000017 	bhi	12668 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   12608:	e3500047 	cmp	r0, #71	@ 0x47
   1260c:	8a00000e 	bhi	1264c <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   12610:	e350001f 	cmp	r0, #31
   12614:	930b3210 	movwls	r3, #45584	@ 0xb210
   12618:	93433f00 	movtls	r3, #16128	@ 0x3f00
   1261c:	9a000005 	bls	12638 <CInterruptSystem::EnableIRQ(unsigned int)+0x3c>
   12620:	e350003f 	cmp	r0, #63	@ 0x3f
   12624:	e30b2214 	movw	r2, #45588	@ 0xb214
   12628:	e3432f00 	movt	r2, #16128	@ 0x3f00
   1262c:	e30b3218 	movw	r3, #45592	@ 0xb218
   12630:	e3433f00 	movt	r3, #16128	@ 0x3f00
   12634:	91a03002 	movls	r3, r2
   12638:	e200001f 	and	r0, r0, #31
   1263c:	e3a02001 	mov	r2, #1
   12640:	e1a02012 	lsl	r2, r2, r0
   12644:	e5832000 	str	r2, [r3]
   12648:	e8bd8010 	pop	{r4, pc}
   1264c:	e3500049 	cmp	r0, #73	@ 0x49
   12650:	1a00000a 	bne	12680 <CInterruptSystem::EnableIRQ(unsigned int)+0x84>
   12654:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   12658:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   1265c:	e3833002 	orr	r3, r3, #2
   12660:	e5823040 	str	r3, [r2, #64]	@ 0x40
   12664:	e8bd8010 	pop	{r4, pc}
   12668:	e3051f70 	movw	r1, #24432	@ 0x5f70
   1266c:	e3401001 	movt	r1, #1
   12670:	e3050f80 	movw	r0, #24448	@ 0x5f80
   12674:	e3400001 	movt	r0, #1
   12678:	e3a020a7 	mov	r2, #167	@ 0xa7
   1267c:	eb0000b3 	bl	12950 <assertion_failed>
   12680:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12684:	e3401001 	movt	r1, #1
   12688:	e3050fb0 	movw	r0, #24496	@ 0x5fb0
   1268c:	e3400001 	movt	r0, #1
   12690:	e3a020b0 	mov	r2, #176	@ 0xb0
   12694:	eb0000ad 	bl	12950 <assertion_failed>

00012698 <CInterruptSystem::DisableIRQ(unsigned int)>:
   12698:	e3500053 	cmp	r0, #83	@ 0x53
   1269c:	e92d4010 	push	{r4, lr}
   126a0:	8a000017 	bhi	12704 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   126a4:	e3500047 	cmp	r0, #71	@ 0x47
   126a8:	8a00000e 	bhi	126e8 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   126ac:	e350001f 	cmp	r0, #31
   126b0:	930b321c 	movwls	r3, #45596	@ 0xb21c
   126b4:	93433f00 	movtls	r3, #16128	@ 0x3f00
   126b8:	9a000005 	bls	126d4 <CInterruptSystem::DisableIRQ(unsigned int)+0x3c>
   126bc:	e350003f 	cmp	r0, #63	@ 0x3f
   126c0:	e30b2220 	movw	r2, #45600	@ 0xb220
   126c4:	e3432f00 	movt	r2, #16128	@ 0x3f00
   126c8:	e30b3224 	movw	r3, #45604	@ 0xb224
   126cc:	e3433f00 	movt	r3, #16128	@ 0x3f00
   126d0:	91a03002 	movls	r3, r2
   126d4:	e200001f 	and	r0, r0, #31
   126d8:	e3a02001 	mov	r2, #1
   126dc:	e1a02012 	lsl	r2, r2, r0
   126e0:	e5832000 	str	r2, [r3]
   126e4:	e8bd8010 	pop	{r4, pc}
   126e8:	e3500049 	cmp	r0, #73	@ 0x49
   126ec:	1a00000a 	bne	1271c <CInterruptSystem::DisableIRQ(unsigned int)+0x84>
   126f0:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   126f4:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   126f8:	e3c33002 	bic	r3, r3, #2
   126fc:	e5823040 	str	r3, [r2, #64]	@ 0x40
   12700:	e8bd8010 	pop	{r4, pc}
   12704:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12708:	e3401001 	movt	r1, #1
   1270c:	e3050f80 	movw	r0, #24448	@ 0x5f80
   12710:	e3400001 	movt	r0, #1
   12714:	e3a020bf 	mov	r2, #191	@ 0xbf
   12718:	eb00008c 	bl	12950 <assertion_failed>
   1271c:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12720:	e3401001 	movt	r1, #1
   12724:	e3050fb0 	movw	r0, #24496	@ 0x5fb0
   12728:	e3400001 	movt	r0, #1
   1272c:	e3a020c8 	mov	r2, #200	@ 0xc8
   12730:	eb000086 	bl	12950 <assertion_failed>

00012734 <CInterruptSystem::EnableFIQ(unsigned int)>:
   12734:	e3500047 	cmp	r0, #71	@ 0x47
   12738:	8a000004 	bhi	12750 <CInterruptSystem::EnableFIQ(unsigned int)+0x1c>
   1273c:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   12740:	e3433f00 	movt	r3, #16128	@ 0x3f00
   12744:	e3800080 	orr	r0, r0, #128	@ 0x80
   12748:	e583020c 	str	r0, [r3, #524]	@ 0x20c
   1274c:	e12fff1e 	bx	lr
   12750:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12754:	e3401001 	movt	r1, #1
   12758:	e3050fec 	movw	r0, #24556	@ 0x5fec
   1275c:	e3400001 	movt	r0, #1
   12760:	e3a020d7 	mov	r2, #215	@ 0xd7
   12764:	e92d4010 	push	{r4, lr}
   12768:	eb000078 	bl	12950 <assertion_failed>

0001276c <CInterruptSystem::DisableFIQ()>:
   1276c:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   12770:	e3433f00 	movt	r3, #16128	@ 0x3f00
   12774:	e3a02000 	mov	r2, #0
   12778:	e583220c 	str	r2, [r3, #524]	@ 0x20c
   1277c:	e12fff1e 	bx	lr

00012780 <CInterruptSystem::Get()>:
   12780:	e30737a0 	movw	r3, #30624	@ 0x77a0
   12784:	e3403001 	movt	r3, #1
   12788:	e5930000 	ldr	r0, [r3]
   1278c:	e3500000 	cmp	r0, #0
   12790:	112fff1e 	bxne	lr
   12794:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12798:	e3401001 	movt	r1, #1
   1279c:	e3050c20 	movw	r0, #23584	@ 0x5c20
   127a0:	e3400001 	movt	r0, #1
   127a4:	e3a020e9 	mov	r2, #233	@ 0xe9
   127a8:	e92d4010 	push	{r4, lr}
   127ac:	eb000067 	bl	12950 <assertion_failed>

000127b0 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   127b0:	e3510053 	cmp	r1, #83	@ 0x53
   127b4:	e92d4010 	push	{r4, lr}
   127b8:	8a00000b 	bhi	127ec <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   127bc:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   127c0:	e0803101 	add	r3, r0, r1, lsl #2
   127c4:	e3540000 	cmp	r4, #0
   127c8:	0a000003 	beq	127dc <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   127cc:	e5930150 	ldr	r0, [r3, #336]	@ 0x150
   127d0:	e12fff34 	blx	r4
   127d4:	e3a00001 	mov	r0, #1
   127d8:	e8bd8010 	pop	{r4, pc}
   127dc:	e1a00001 	mov	r0, r1
   127e0:	ebffffac 	bl	12698 <CInterruptSystem::DisableIRQ(unsigned int)>
   127e4:	e1a00004 	mov	r0, r4
   127e8:	e8bd8010 	pop	{r4, pc}
   127ec:	e3051f70 	movw	r1, #24432	@ 0x5f70
   127f0:	e3401001 	movt	r1, #1
   127f4:	e3050f80 	movw	r0, #24448	@ 0x5f80
   127f8:	e3400001 	movt	r0, #1
   127fc:	e3a020ef 	mov	r2, #239	@ 0xef
   12800:	eb000052 	bl	12950 <assertion_failed>

00012804 <CInterruptSystem::InterruptHandler()>:
   12804:	e30737a0 	movw	r3, #30624	@ 0x77a0
   12808:	e3403001 	movt	r3, #1
   1280c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12810:	e5938000 	ldr	r8, [r3]
   12814:	e24dd010 	sub	sp, sp, #16
   12818:	e3580000 	cmp	r8, #0
   1281c:	0a00003a 	beq	1290c <CInterruptSystem::InterruptHandler()+0x108>
   12820:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   12824:	e5926060 	ldr	r6, [r2, #96]	@ 0x60
   12828:	e3c63e1f 	bic	r3, r6, #496	@ 0x1f0
   1282c:	e3c33002 	bic	r3, r3, #2
   12830:	e3530000 	cmp	r3, #0
   12834:	1a00003a 	bne	12924 <CInterruptSystem::InterruptHandler()+0x120>
   12838:	e2166002 	ands	r6, r6, #2
   1283c:	1a000025 	bne	128d8 <CInterruptSystem::InterruptHandler()+0xd4>
   12840:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   12844:	e3433f00 	movt	r3, #16128	@ 0x3f00
   12848:	e28d7004 	add	r7, sp, #4
   1284c:	e5932204 	ldr	r2, [r3, #516]	@ 0x204
   12850:	e58d2004 	str	r2, [sp, #4]
   12854:	e5932208 	ldr	r2, [r3, #520]	@ 0x208
   12858:	e58d2008 	str	r2, [sp, #8]
   1285c:	e5933200 	ldr	r3, [r3, #512]	@ 0x200
   12860:	e6ef3073 	uxtb	r3, r3
   12864:	e58d300c 	str	r3, [sp, #12]
   12868:	e4974004 	ldr	r4, [r7], #4
   1286c:	e3540000 	cmp	r4, #0
   12870:	1a000004 	bne	12888 <CInterruptSystem::InterruptHandler()+0x84>
   12874:	e2866020 	add	r6, r6, #32
   12878:	e3560060 	cmp	r6, #96	@ 0x60
   1287c:	1afffff9 	bne	12868 <CInterruptSystem::InterruptHandler()+0x64>
   12880:	e28dd010 	add	sp, sp, #16
   12884:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12888:	e1a05006 	mov	r5, r6
   1288c:	ea000002 	b	1289c <CInterruptSystem::InterruptHandler()+0x98>
   12890:	e2855001 	add	r5, r5, #1
   12894:	e1b040a4 	lsrs	r4, r4, #1
   12898:	0afffff5 	beq	12874 <CInterruptSystem::InterruptHandler()+0x70>
   1289c:	e3140001 	tst	r4, #1
   128a0:	0afffffa 	beq	12890 <CInterruptSystem::InterruptHandler()+0x8c>
   128a4:	e3550053 	cmp	r5, #83	@ 0x53
   128a8:	8a000011 	bhi	128f4 <CInterruptSystem::InterruptHandler()+0xf0>
   128ac:	e7983105 	ldr	r3, [r8, r5, lsl #2]
   128b0:	e3530000 	cmp	r3, #0
   128b4:	0a000004 	beq	128cc <CInterruptSystem::InterruptHandler()+0xc8>
   128b8:	e2855054 	add	r5, r5, #84	@ 0x54
   128bc:	e7980105 	ldr	r0, [r8, r5, lsl #2]
   128c0:	e28dd010 	add	sp, sp, #16
   128c4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   128c8:	e12fff13 	bx	r3
   128cc:	e1a00005 	mov	r0, r5
   128d0:	ebffff70 	bl	12698 <CInterruptSystem::DisableIRQ(unsigned int)>
   128d4:	eaffffed 	b	12890 <CInterruptSystem::InterruptHandler()+0x8c>
   128d8:	e5983124 	ldr	r3, [r8, #292]	@ 0x124
   128dc:	e3530000 	cmp	r3, #0
   128e0:	0a000015 	beq	1293c <CInterruptSystem::InterruptHandler()+0x138>
   128e4:	e5980274 	ldr	r0, [r8, #628]	@ 0x274
   128e8:	e28dd010 	add	sp, sp, #16
   128ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   128f0:	e12fff13 	bx	r3
   128f4:	e3051f70 	movw	r1, #24432	@ 0x5f70
   128f8:	e3401001 	movt	r1, #1
   128fc:	e3050f80 	movw	r0, #24448	@ 0x5f80
   12900:	e3400001 	movt	r0, #1
   12904:	e3a020ef 	mov	r2, #239	@ 0xef
   12908:	eb000010 	bl	12950 <assertion_failed>
   1290c:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12910:	e3401001 	movt	r1, #1
   12914:	e3050c20 	movw	r0, #23584	@ 0x5c20
   12918:	e3400001 	movt	r0, #1
   1291c:	e3002102 	movw	r2, #258	@ 0x102
   12920:	eb00000a 	bl	12950 <assertion_failed>
   12924:	e3051f70 	movw	r1, #24432	@ 0x5f70
   12928:	e3401001 	movt	r1, #1
   1292c:	e3060030 	movw	r0, #24624	@ 0x6030
   12930:	e3400001 	movt	r0, #1
   12934:	e3002106 	movw	r2, #262	@ 0x106
   12938:	eb000004 	bl	12950 <assertion_failed>
   1293c:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   12940:	e3c33002 	bic	r3, r3, #2
   12944:	e5823040 	str	r3, [r2, #64]	@ 0x40
   12948:	eaffffcc 	b	12880 <CInterruptSystem::InterruptHandler()+0x7c>

0001294c <InterruptHandler>:
   1294c:	eaffffac 	b	12804 <CInterruptSystem::InterruptHandler()>

00012950 <assertion_failed>:
   12950:	e92d4080 	push	{r7, lr}
   12954:	e1a04000 	mov	r4, r0
   12958:	e1a05001 	mov	r5, r1
   1295c:	e24dd018 	sub	sp, sp, #24
   12960:	e1a06002 	mov	r6, r2
   12964:	e1a0700d 	mov	r7, sp
   12968:	ebffff7f 	bl	1276c <CInterruptSystem::DisableFIQ()>
   1296c:	f1080040 	cpsie	f
   12970:	e28d0008 	add	r0, sp, #8
   12974:	ebffed30 	bl	de3c <CString::CString()>
   12978:	e1a02005 	mov	r2, r5
   1297c:	e1a03006 	mov	r3, r6
   12980:	e28d0008 	add	r0, sp, #8
   12984:	e3061064 	movw	r1, #24676	@ 0x6064
   12988:	e3401001 	movt	r1, #1
   1298c:	ebfff2e3 	bl	f520 <CString::Format(char const*, ...)>
   12990:	e28d0008 	add	r0, sp, #8
   12994:	ebffed60 	bl	df1c <CString::operator char const*() const>
   12998:	e1a01000 	mov	r1, r0
   1299c:	e1a00007 	mov	r0, r7
   129a0:	eb000245 	bl	132bc <debug_stacktrace(unsigned int const*, char const*)>
   129a4:	ebffde4c 	bl	a2dc <CLogger::Get()>
   129a8:	e1a05000 	mov	r5, r0
   129ac:	e28d0008 	add	r0, sp, #8
   129b0:	ebffed59 	bl	df1c <CString::operator char const*() const>
   129b4:	e306306c 	movw	r3, #24684	@ 0x606c
   129b8:	e3403001 	movt	r3, #1
   129bc:	e1a01000 	mov	r1, r0
   129c0:	e3a02000 	mov	r2, #0
   129c4:	e1a00005 	mov	r0, r5
   129c8:	e58d4000 	str	r4, [sp]
   129cc:	ebffe00b 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   129d0:	eafffffe 	b	129d0 <assertion_failed+0x80>

000129d4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   129d4:	e92d4070 	push	{r4, r5, r6, lr}
   129d8:	e1a04000 	mov	r4, r0
   129dc:	e24dd028 	sub	sp, sp, #40	@ 0x28
   129e0:	e5803010 	str	r3, [r0, #16]
   129e4:	e59d5040 	ldr	r5, [sp, #64]	@ 0x40
   129e8:	e59dc038 	ldr	ip, [sp, #56]	@ 0x38
   129ec:	e8801006 	stm	r0, {r1, r2, ip}
   129f0:	e3550000 	cmp	r5, #0
   129f4:	e5dd6044 	ldrb	r6, [sp, #68]	@ 0x44
   129f8:	e5805014 	str	r5, [r0, #20]
   129fc:	e59d003c 	ldr	r0, [sp, #60]	@ 0x3c
   12a00:	e584000c 	str	r0, [r4, #12]
   12a04:	e3a00000 	mov	r0, #0
   12a08:	e5840018 	str	r0, [r4, #24]
   12a0c:	e584001c 	str	r0, [r4, #28]
   12a10:	e5840020 	str	r0, [r4, #32]
   12a14:	e5840024 	str	r0, [r4, #36]	@ 0x24
   12a18:	1a000033 	bne	12aec <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x118>
   12a1c:	e1510000 	cmp	r1, r0
   12a20:	11520000 	cmpne	r2, r0
   12a24:	1a00001a 	bne	12a94 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc0>
   12a28:	e1a01005 	mov	r1, r5
   12a2c:	e28d000c 	add	r0, sp, #12
   12a30:	eb000129 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12a34:	e3a03014 	mov	r3, #20
   12a38:	e08d2003 	add	r2, sp, r3
   12a3c:	e3a01003 	mov	r1, #3
   12a40:	e3401004 	movt	r1, #4
   12a44:	e28d000c 	add	r0, sp, #12
   12a48:	e58d5000 	str	r5, [sp]
   12a4c:	eb000174 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12a50:	e3500000 	cmp	r0, #0
   12a54:	0a000007 	beq	12a78 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xa4>
   12a58:	e59d2020 	ldr	r2, [sp, #32]
   12a5c:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
   12a60:	e884000c 	stm	r4, {r2, r3}
   12a64:	e2422d0a 	sub	r2, r2, #640	@ 0x280
   12a68:	e2433e1e 	sub	r3, r3, #480	@ 0x1e0
   12a6c:	e3530e69 	cmp	r3, #1680	@ 0x690
   12a70:	93520d36 	cmpls	r2, #3456	@ 0xd80
   12a74:	9a000002 	bls	12a84 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xb0>
   12a78:	e3a02d0a 	mov	r2, #640	@ 0x280
   12a7c:	e3a03e1e 	mov	r3, #480	@ 0x1e0
   12a80:	e884000c 	stm	r4, {r2, r3}
   12a84:	e28d000c 	add	r0, sp, #12
   12a88:	eb00011a 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
   12a8c:	e594c008 	ldr	ip, [r4, #8]
   12a90:	e5943010 	ldr	r3, [r4, #16]
   12a94:	e35c0000 	cmp	ip, #0
   12a98:	1a000016 	bne	12af8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x124>
   12a9c:	e8940006 	ldm	r4, {r1, r2}
   12aa0:	e3530008 	cmp	r3, #8
   12aa4:	e5841008 	str	r1, [r4, #8]
   12aa8:	e0222296 	mla	r2, r6, r2, r2
   12aac:	e584200c 	str	r2, [r4, #12]
   12ab0:	9a000015 	bls	12b0c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x138>
   12ab4:	e3a02070 	mov	r2, #112	@ 0x70
   12ab8:	e2840028 	add	r0, r4, #40	@ 0x28
   12abc:	e3061084 	movw	r1, #24708	@ 0x6084
   12ac0:	e3401001 	movt	r1, #1
   12ac4:	ebfff88c 	bl	10cfc <memcpy>
   12ac8:	e5941008 	ldr	r1, [r4, #8]
   12acc:	e8940009 	ldm	r4, {r0, r3}
   12ad0:	e5843038 	str	r3, [r4, #56]	@ 0x38
   12ad4:	e594200c 	ldr	r2, [r4, #12]
   12ad8:	e5943010 	ldr	r3, [r4, #16]
   12adc:	e5840034 	str	r0, [r4, #52]	@ 0x34
   12ae0:	e5841048 	str	r1, [r4, #72]	@ 0x48
   12ae4:	e584204c 	str	r2, [r4, #76]	@ 0x4c
   12ae8:	e584305c 	str	r3, [r4, #92]	@ 0x5c
   12aec:	e1a00004 	mov	r0, r4
   12af0:	e28dd028 	add	sp, sp, #40	@ 0x28
   12af4:	e8bd8070 	pop	{r4, r5, r6, pc}
   12af8:	e594200c 	ldr	r2, [r4, #12]
   12afc:	e3520000 	cmp	r2, #0
   12b00:	0affffe5 	beq	12a9c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc8>
   12b04:	e3530008 	cmp	r3, #8
   12b08:	8affffe9 	bhi	12ab4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xe0>
   12b0c:	e3000414 	movw	r0, #1044	@ 0x414
   12b10:	ebfff987 	bl	11134 <operator new[](unsigned int)>
   12b14:	e3a02b01 	mov	r2, #1024	@ 0x400
   12b18:	e1a03000 	mov	r3, r0
   12b1c:	e3a01000 	mov	r1, #0
   12b20:	e5843024 	str	r3, [r4, #36]	@ 0x24
   12b24:	e2800014 	add	r0, r0, #20
   12b28:	ebfff85c 	bl	10ca0 <memset>
   12b2c:	eaffffe0 	b	12ab4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xe0>

00012b30 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   12b30:	e92d4010 	push	{r4, lr}
   12b34:	e1a04000 	mov	r4, r0
   12b38:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
   12b3c:	e3500000 	cmp	r0, #0
   12b40:	0a000001 	beq	12b4c <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   12b44:	e3a01014 	mov	r1, #20
   12b48:	ebfff98b 	bl	1117c <operator delete(void*, unsigned int)>
   12b4c:	e1a00004 	mov	r0, r4
   12b50:	e8bd8010 	pop	{r4, pc}

00012b54 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   12b54:	e5903010 	ldr	r3, [r0, #16]
   12b58:	e3530008 	cmp	r3, #8
   12b5c:	812fff1e 	bxhi	lr
   12b60:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   12b64:	e1a0c5a2 	lsr	ip, r2, #11
   12b68:	e1a00982 	lsl	r0, r2, #19
   12b6c:	e2811004 	add	r1, r1, #4
   12b70:	e200073e 	and	r0, r0, #16252928	@ 0xf80000
   12b74:	e1a02282 	lsl	r2, r2, #5
   12b78:	e180018c 	orr	r0, r0, ip, lsl #3
   12b7c:	e2022b3f 	and	r2, r2, #64512	@ 0xfc00
   12b80:	e0833101 	add	r3, r3, r1, lsl #2
   12b84:	e1822000 	orr	r2, r2, r0
   12b88:	e38214ff 	orr	r1, r2, #-16777216	@ 0xff000000
   12b8c:	e5c32004 	strb	r2, [r3, #4]
   12b90:	e1a00421 	lsr	r0, r1, #8
   12b94:	e1a02821 	lsr	r2, r1, #16
   12b98:	e5c30005 	strb	r0, [r3, #5]
   12b9c:	e1a01c21 	lsr	r1, r1, #24
   12ba0:	e5c32006 	strb	r2, [r3, #6]
   12ba4:	e5c31007 	strb	r1, [r3, #7]
   12ba8:	e12fff1e 	bx	lr

00012bac <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   12bac:	e5903010 	ldr	r3, [r0, #16]
   12bb0:	e3530008 	cmp	r3, #8
   12bb4:	812fff1e 	bxhi	lr
   12bb8:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   12bbc:	e2811004 	add	r1, r1, #4
   12bc0:	e7e7c452 	ubfx	ip, r2, #8, #8
   12bc4:	e7e70852 	ubfx	r0, r2, #16, #8
   12bc8:	e0833101 	add	r3, r3, r1, lsl #2
   12bcc:	e5c32004 	strb	r2, [r3, #4]
   12bd0:	e1a02c22 	lsr	r2, r2, #24
   12bd4:	e5c3c005 	strb	ip, [r3, #5]
   12bd8:	e5c30006 	strb	r0, [r3, #6]
   12bdc:	e5c32007 	strb	r2, [r3, #7]
   12be0:	e12fff1e 	bx	lr

00012be4 <CBcmFrameBuffer::GetWidth() const>:
   12be4:	e5900000 	ldr	r0, [r0]
   12be8:	e12fff1e 	bx	lr

00012bec <CBcmFrameBuffer::GetHeight() const>:
   12bec:	e5900004 	ldr	r0, [r0, #4]
   12bf0:	e12fff1e 	bx	lr

00012bf4 <CBcmFrameBuffer::GetVirtWidth() const>:
   12bf4:	e5900008 	ldr	r0, [r0, #8]
   12bf8:	e12fff1e 	bx	lr

00012bfc <CBcmFrameBuffer::GetVirtHeight() const>:
   12bfc:	e590000c 	ldr	r0, [r0, #12]
   12c00:	e12fff1e 	bx	lr

00012c04 <CBcmFrameBuffer::GetPitch() const>:
   12c04:	e5900020 	ldr	r0, [r0, #32]
   12c08:	e12fff1e 	bx	lr

00012c0c <CBcmFrameBuffer::GetDepth() const>:
   12c0c:	e5900010 	ldr	r0, [r0, #16]
   12c10:	e12fff1e 	bx	lr

00012c14 <CBcmFrameBuffer::GetBuffer() const>:
   12c14:	e5900018 	ldr	r0, [r0, #24]
   12c18:	e12fff1e 	bx	lr

00012c1c <CBcmFrameBuffer::GetSize() const>:
   12c1c:	e590001c 	ldr	r0, [r0, #28]
   12c20:	e12fff1e 	bx	lr

00012c24 <CBcmFrameBuffer::UpdatePalette()>:
   12c24:	e5903010 	ldr	r3, [r0, #16]
   12c28:	e3530008 	cmp	r3, #8
   12c2c:	9a000001 	bls	12c38 <CBcmFrameBuffer::UpdatePalette()+0x14>
   12c30:	e3a00001 	mov	r0, #1
   12c34:	e12fff1e 	bx	lr
   12c38:	e92d4010 	push	{r4, lr}
   12c3c:	e1a04000 	mov	r4, r0
   12c40:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   12c44:	e24dd010 	sub	sp, sp, #16
   12c48:	e3a01000 	mov	r1, #0
   12c4c:	e3a02001 	mov	r2, #1
   12c50:	e28d0008 	add	r0, sp, #8
   12c54:	e5c3100c 	strb	r1, [r3, #12]
   12c58:	e5c3100d 	strb	r1, [r3, #13]
   12c5c:	e5c3100e 	strb	r1, [r3, #14]
   12c60:	e5c3100f 	strb	r1, [r3, #15]
   12c64:	e5c31010 	strb	r1, [r3, #16]
   12c68:	e5c32011 	strb	r2, [r3, #17]
   12c6c:	e5c31012 	strb	r1, [r3, #18]
   12c70:	e5c31013 	strb	r1, [r3, #19]
   12c74:	eb000098 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12c78:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
   12c7c:	e3003408 	movw	r3, #1032	@ 0x408
   12c80:	e28d0008 	add	r0, sp, #8
   12c84:	e58d3000 	str	r3, [sp]
   12c88:	e308100b 	movw	r1, #32779	@ 0x800b
   12c8c:	e3401004 	movt	r1, #4
   12c90:	e3003414 	movw	r3, #1044	@ 0x414
   12c94:	eb0000e2 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12c98:	e3500000 	cmp	r0, #0
   12c9c:	0a000008 	beq	12cc4 <CBcmFrameBuffer::UpdatePalette()+0xa0>
   12ca0:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
   12ca4:	e5d2300c 	ldrb	r3, [r2, #12]
   12ca8:	e5d2000d 	ldrb	r0, [r2, #13]
   12cac:	e5d2100e 	ldrb	r1, [r2, #14]
   12cb0:	e5d2200f 	ldrb	r2, [r2, #15]
   12cb4:	e1833400 	orr	r3, r3, r0, lsl #8
   12cb8:	e1833801 	orr	r3, r3, r1, lsl #16
   12cbc:	e1933c02 	orrs	r3, r3, r2, lsl #24
   12cc0:	0a000004 	beq	12cd8 <CBcmFrameBuffer::UpdatePalette()+0xb4>
   12cc4:	e28d0008 	add	r0, sp, #8
   12cc8:	eb00008a 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
   12ccc:	e3a00000 	mov	r0, #0
   12cd0:	e28dd010 	add	sp, sp, #16
   12cd4:	e8bd8010 	pop	{r4, pc}
   12cd8:	e28d0008 	add	r0, sp, #8
   12cdc:	eb000085 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
   12ce0:	e3a00001 	mov	r0, #1
   12ce4:	e28dd010 	add	sp, sp, #16
   12ce8:	e8bd8010 	pop	{r4, pc}

00012cec <CBcmFrameBuffer::Initialize()>:
   12cec:	e5901014 	ldr	r1, [r0, #20]
   12cf0:	e92d4030 	push	{r4, r5, lr}
   12cf4:	e3510000 	cmp	r1, #0
   12cf8:	e24dd00c 	sub	sp, sp, #12
   12cfc:	13a04000 	movne	r4, #0
   12d00:	0a000002 	beq	12d10 <CBcmFrameBuffer::Initialize()+0x24>
   12d04:	e1a00004 	mov	r0, r4
   12d08:	e28dd00c 	add	sp, sp, #12
   12d0c:	e8bd8030 	pop	{r4, r5, pc}
   12d10:	e1a05000 	mov	r5, r0
   12d14:	e1a0000d 	mov	r0, sp
   12d18:	eb00006f 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12d1c:	e3a02070 	mov	r2, #112	@ 0x70
   12d20:	e2851028 	add	r1, r5, #40	@ 0x28
   12d24:	e1a0000d 	mov	r0, sp
   12d28:	eb000077 	bl	12f0c <CBcmPropertyTags::GetTags(void*, unsigned int)>
   12d2c:	e2504000 	subs	r4, r0, #0
   12d30:	0a00001a 	beq	12da0 <CBcmFrameBuffer::Initialize()+0xb4>
   12d34:	e5954034 	ldr	r4, [r5, #52]	@ 0x34
   12d38:	e3540000 	cmp	r4, #0
   12d3c:	0a000017 	beq	12da0 <CBcmFrameBuffer::Initialize()+0xb4>
   12d40:	e5954038 	ldr	r4, [r5, #56]	@ 0x38
   12d44:	e3540000 	cmp	r4, #0
   12d48:	0a000014 	beq	12da0 <CBcmFrameBuffer::Initialize()+0xb4>
   12d4c:	e5954048 	ldr	r4, [r5, #72]	@ 0x48
   12d50:	e3540000 	cmp	r4, #0
   12d54:	0a000011 	beq	12da0 <CBcmFrameBuffer::Initialize()+0xb4>
   12d58:	e595404c 	ldr	r4, [r5, #76]	@ 0x4c
   12d5c:	e3540000 	cmp	r4, #0
   12d60:	0a00000e 	beq	12da0 <CBcmFrameBuffer::Initialize()+0xb4>
   12d64:	e595405c 	ldr	r4, [r5, #92]	@ 0x5c
   12d68:	e3540000 	cmp	r4, #0
   12d6c:	0a00000b 	beq	12da0 <CBcmFrameBuffer::Initialize()+0xb4>
   12d70:	e5954080 	ldr	r4, [r5, #128]	@ 0x80
   12d74:	e3540000 	cmp	r4, #0
   12d78:	0a000008 	beq	12da0 <CBcmFrameBuffer::Initialize()+0xb4>
   12d7c:	e5952084 	ldr	r2, [r5, #132]	@ 0x84
   12d80:	e3c44103 	bic	r4, r4, #-1073741824	@ 0xc0000000
   12d84:	e5953094 	ldr	r3, [r5, #148]	@ 0x94
   12d88:	e1a00005 	mov	r0, r5
   12d8c:	e5854018 	str	r4, [r5, #24]
   12d90:	e585201c 	str	r2, [r5, #28]
   12d94:	e5853020 	str	r3, [r5, #32]
   12d98:	ebffffa1 	bl	12c24 <CBcmFrameBuffer::UpdatePalette()>
   12d9c:	e1a04000 	mov	r4, r0
   12da0:	e1a0000d 	mov	r0, sp
   12da4:	eb000053 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
   12da8:	e1a00004 	mov	r0, r4
   12dac:	e28dd00c 	add	sp, sp, #12
   12db0:	e8bd8030 	pop	{r4, r5, pc}

00012db4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   12db4:	e92d4070 	push	{r4, r5, r6, lr}
   12db8:	e1a05001 	mov	r5, r1
   12dbc:	e3a01000 	mov	r1, #0
   12dc0:	e24dd028 	sub	sp, sp, #40	@ 0x28
   12dc4:	e1a06002 	mov	r6, r2
   12dc8:	e28d000c 	add	r0, sp, #12
   12dcc:	eb000042 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12dd0:	e3a03014 	mov	r3, #20
   12dd4:	e3a02008 	mov	r2, #8
   12dd8:	e28d000c 	add	r0, sp, #12
   12ddc:	e58d2000 	str	r2, [sp]
   12de0:	e3081009 	movw	r1, #32777	@ 0x8009
   12de4:	e3401004 	movt	r1, #4
   12de8:	e08d2003 	add	r2, sp, r3
   12dec:	e58d5020 	str	r5, [sp, #32]
   12df0:	e58d6024 	str	r6, [sp, #36]	@ 0x24
   12df4:	eb00008a 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12df8:	e2504000 	subs	r4, r0, #0
   12dfc:	0a000006 	beq	12e1c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x68>
   12e00:	e59d3020 	ldr	r3, [sp, #32]
   12e04:	e1530005 	cmp	r3, r5
   12e08:	13a04000 	movne	r4, #0
   12e0c:	059d0024 	ldreq	r0, [sp, #36]	@ 0x24
   12e10:	00404006 	subeq	r4, r0, r6
   12e14:	016f4f14 	clzeq	r4, r4
   12e18:	01a042a4 	lsreq	r4, r4, #5
   12e1c:	e28d000c 	add	r0, sp, #12
   12e20:	eb000034 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
   12e24:	e1a00004 	mov	r0, r4
   12e28:	e28dd028 	add	sp, sp, #40	@ 0x28
   12e2c:	e8bd8070 	pop	{r4, r5, r6, pc}

00012e30 <CBcmFrameBuffer::WaitForVerticalSync()>:
   12e30:	e92d4010 	push	{r4, lr}
   12e34:	e3a01000 	mov	r1, #0
   12e38:	e24dd020 	sub	sp, sp, #32
   12e3c:	e28d0008 	add	r0, sp, #8
   12e40:	eb000025 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12e44:	e3a03010 	mov	r3, #16
   12e48:	e08d2003 	add	r2, sp, r3
   12e4c:	e3a01000 	mov	r1, #0
   12e50:	e28d0008 	add	r0, sp, #8
   12e54:	e58d1000 	str	r1, [sp]
   12e58:	e308100e 	movw	r1, #32782	@ 0x800e
   12e5c:	e3401004 	movt	r1, #4
   12e60:	eb00006f 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12e64:	e1a04000 	mov	r4, r0
   12e68:	e28d0008 	add	r0, sp, #8
   12e6c:	eb000021 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
   12e70:	e1a00004 	mov	r0, r4
   12e74:	e28dd020 	add	sp, sp, #32
   12e78:	e8bd8010 	pop	{r4, pc}

00012e7c <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   12e7c:	e92d4010 	push	{r4, lr}
   12e80:	e1a04001 	mov	r4, r1
   12e84:	e3a01000 	mov	r1, #0
   12e88:	e24dd020 	sub	sp, sp, #32
   12e8c:	e28d0008 	add	r0, sp, #8
   12e90:	eb000011 	bl	12edc <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12e94:	e3a03010 	mov	r3, #16
   12e98:	e08d2003 	add	r2, sp, r3
   12e9c:	e3a01004 	mov	r1, #4
   12ea0:	e28d0008 	add	r0, sp, #8
   12ea4:	e58d1000 	str	r1, [sp]
   12ea8:	e308100f 	movw	r1, #32783	@ 0x800f
   12eac:	e3401004 	movt	r1, #4
   12eb0:	e58d401c 	str	r4, [sp, #28]
   12eb4:	eb00005a 	bl	13024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12eb8:	e1a04000 	mov	r4, r0
   12ebc:	e28d0008 	add	r0, sp, #8
   12ec0:	eb00000c 	bl	12ef8 <CBcmPropertyTags::~CBcmPropertyTags()>
   12ec4:	e1a00004 	mov	r0, r4
   12ec8:	e28dd020 	add	sp, sp, #32
   12ecc:	e8bd8010 	pop	{r4, pc}

00012ed0 <CBcmFrameBuffer::SetDisplay()>:
   12ed0:	e12fff1e 	bx	lr

00012ed4 <CBcmFrameBuffer::GetNumDisplays()>:
   12ed4:	e3a00001 	mov	r0, #1
   12ed8:	e12fff1e 	bx	lr

00012edc <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   12edc:	e1a02001 	mov	r2, r1
   12ee0:	e92d4010 	push	{r4, lr}
   12ee4:	e3a01008 	mov	r1, #8
   12ee8:	e1a04000 	mov	r4, r0
   12eec:	eb00071a 	bl	14b5c <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   12ef0:	e1a00004 	mov	r0, r4
   12ef4:	e8bd8010 	pop	{r4, pc}

00012ef8 <CBcmPropertyTags::~CBcmPropertyTags()>:
   12ef8:	e92d4010 	push	{r4, lr}
   12efc:	e1a04000 	mov	r4, r0
   12f00:	eb000718 	bl	14b68 <CBcmMailBox::~CBcmMailBox()>
   12f04:	e1a00004 	mov	r0, r4
   12f08:	e8bd8010 	pop	{r4, pc}

00012f0c <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   12f0c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f10:	e2519000 	subs	r9, r1, #0
   12f14:	0a000033 	beq	12fe8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
   12f18:	e1a05002 	mov	r5, r2
   12f1c:	e352000f 	cmp	r2, #15
   12f20:	9a000035 	bls	12ffc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   12f24:	e282700c 	add	r7, r2, #12
   12f28:	e2126003 	ands	r6, r2, #3
   12f2c:	1a000037 	bne	13010 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x104>
   12f30:	e1a08000 	mov	r8, r0
   12f34:	e1a00006 	mov	r0, r6
   12f38:	ebfffc3d 	bl	12034 <CMemorySystem::GetCoherentPage(unsigned int)>
   12f3c:	e280a008 	add	sl, r0, #8
   12f40:	e7e73457 	ubfx	r3, r7, #8, #8
   12f44:	e5c07000 	strb	r7, [r0]
   12f48:	e5c06004 	strb	r6, [r0, #4]
   12f4c:	e1a04000 	mov	r4, r0
   12f50:	e5c06005 	strb	r6, [r0, #5]
   12f54:	e1a02005 	mov	r2, r5
   12f58:	e5c06006 	strb	r6, [r0, #6]
   12f5c:	e1a01009 	mov	r1, r9
   12f60:	e5c06007 	strb	r6, [r0, #7]
   12f64:	e5c03001 	strb	r3, [r0, #1]
   12f68:	e7e73857 	ubfx	r3, r7, #16, #8
   12f6c:	e1a07c27 	lsr	r7, r7, #24
   12f70:	e5c03002 	strb	r3, [r0, #2]
   12f74:	e5c07003 	strb	r7, [r0, #3]
   12f78:	e1a0000a 	mov	r0, sl
   12f7c:	ebfff75e 	bl	10cfc <memcpy>
   12f80:	e78a6005 	str	r6, [sl, r5]
   12f84:	f57ff04f 	dsb	sy
   12f88:	e3846103 	orr	r6, r4, #-1073741824	@ 0xc0000000
   12f8c:	e1a00008 	mov	r0, r8
   12f90:	e1a01006 	mov	r1, r6
   12f94:	eb0006f4 	bl	14b6c <CBcmMailBox::WriteRead(unsigned int)>
   12f98:	e1500006 	cmp	r0, r6
   12f9c:	0a000001 	beq	12fa8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
   12fa0:	e3a00000 	mov	r0, #0
   12fa4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fa8:	f57ff05f 	dmb	sy
   12fac:	e5d42005 	ldrb	r2, [r4, #5]
   12fb0:	e5d43004 	ldrb	r3, [r4, #4]
   12fb4:	e1833402 	orr	r3, r3, r2, lsl #8
   12fb8:	e5d42006 	ldrb	r2, [r4, #6]
   12fbc:	e1833802 	orr	r3, r3, r2, lsl #16
   12fc0:	e5d42007 	ldrb	r2, [r4, #7]
   12fc4:	e1833c02 	orr	r3, r3, r2, lsl #24
   12fc8:	e3530102 	cmp	r3, #-2147483648	@ 0x80000000
   12fcc:	1afffff3 	bne	12fa0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x94>
   12fd0:	e1a02005 	mov	r2, r5
   12fd4:	e1a0100a 	mov	r1, sl
   12fd8:	e1a00009 	mov	r0, r9
   12fdc:	ebfff746 	bl	10cfc <memcpy>
   12fe0:	e3a00001 	mov	r0, #1
   12fe4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fe8:	e30610f4 	movw	r1, #24820	@ 0x60f4
   12fec:	e3401001 	movt	r1, #1
   12ff0:	e3a0204b 	mov	r2, #75	@ 0x4b
   12ff4:	e2810014 	add	r0, r1, #20
   12ff8:	ebfffe54 	bl	12950 <assertion_failed>
   12ffc:	e30610f4 	movw	r1, #24820	@ 0x60f4
   13000:	e3401001 	movt	r1, #1
   13004:	e3a0204c 	mov	r2, #76	@ 0x4c
   13008:	e2810020 	add	r0, r1, #32
   1300c:	ebfffe4f 	bl	12950 <assertion_failed>
   13010:	e30610f4 	movw	r1, #24820	@ 0x60f4
   13014:	e3401001 	movt	r1, #1
   13018:	e3a0204e 	mov	r2, #78	@ 0x4e
   1301c:	e281004c 	add	r0, r1, #76	@ 0x4c
   13020:	ebfffe4a 	bl	12950 <assertion_failed>

00013024 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   13024:	e92d4010 	push	{r4, lr}
   13028:	e2524000 	subs	r4, r2, #0
   1302c:	e59dc008 	ldr	ip, [sp, #8]
   13030:	0a00002e 	beq	130f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xcc>
   13034:	e353000f 	cmp	r3, #15
   13038:	9a000031 	bls	13104 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   1303c:	e243e00c 	sub	lr, r3, #12
   13040:	e1a02003 	mov	r2, r3
   13044:	e5c41000 	strb	r1, [r4]
   13048:	e7e73451 	ubfx	r3, r1, #8, #8
   1304c:	e5c4c008 	strb	ip, [r4, #8]
   13050:	e5c4e004 	strb	lr, [r4, #4]
   13054:	e5c43001 	strb	r3, [r4, #1]
   13058:	e7e73851 	ubfx	r3, r1, #16, #8
   1305c:	e1a01c21 	lsr	r1, r1, #24
   13060:	e5c43002 	strb	r3, [r4, #2]
   13064:	e5c41003 	strb	r1, [r4, #3]
   13068:	e7e7345e 	ubfx	r3, lr, #8, #8
   1306c:	e1a01004 	mov	r1, r4
   13070:	e5c43005 	strb	r3, [r4, #5]
   13074:	e7e7385e 	ubfx	r3, lr, #16, #8
   13078:	e1a0ec2e 	lsr	lr, lr, #24
   1307c:	e5c43006 	strb	r3, [r4, #6]
   13080:	e7e7345c 	ubfx	r3, ip, #8, #8
   13084:	e5c4e007 	strb	lr, [r4, #7]
   13088:	e5c43009 	strb	r3, [r4, #9]
   1308c:	e7e7385c 	ubfx	r3, ip, #16, #8
   13090:	e7e6cc5c 	ubfx	ip, ip, #24, #7
   13094:	e5c4300a 	strb	r3, [r4, #10]
   13098:	e5c4c00b 	strb	ip, [r4, #11]
   1309c:	ebffff9a 	bl	12f0c <CBcmPropertyTags::GetTags(void*, unsigned int)>
   130a0:	e3500000 	cmp	r0, #0
   130a4:	08bd8010 	popeq	{r4, pc}
   130a8:	e5d40009 	ldrb	r0, [r4, #9]
   130ac:	e5d43008 	ldrb	r3, [r4, #8]
   130b0:	e5d4100a 	ldrb	r1, [r4, #10]
   130b4:	e5d4200b 	ldrb	r2, [r4, #11]
   130b8:	e1833400 	orr	r3, r3, r0, lsl #8
   130bc:	e1833801 	orr	r3, r3, r1, lsl #16
   130c0:	e1833c02 	orr	r3, r3, r2, lsl #24
   130c4:	e5c43008 	strb	r3, [r4, #8]
   130c8:	e3c32102 	bic	r2, r3, #-2147483648	@ 0x80000000
   130cc:	e2520000 	subs	r0, r2, #0
   130d0:	e7e71453 	ubfx	r1, r3, #8, #8
   130d4:	e1a02c22 	lsr	r2, r2, #24
   130d8:	e7e73853 	ubfx	r3, r3, #16, #8
   130dc:	13a00001 	movne	r0, #1
   130e0:	e5c41009 	strb	r1, [r4, #9]
   130e4:	e5c4300a 	strb	r3, [r4, #10]
   130e8:	e5c4200b 	strb	r2, [r4, #11]
   130ec:	e8bd8010 	pop	{r4, pc}
   130f0:	e30610f4 	movw	r1, #24820	@ 0x60f4
   130f4:	e3401001 	movt	r1, #1
   130f8:	e3a02033 	mov	r2, #51	@ 0x33
   130fc:	e2810064 	add	r0, r1, #100	@ 0x64
   13100:	ebfffe12 	bl	12950 <assertion_failed>
   13104:	e30610f4 	movw	r1, #24820	@ 0x60f4
   13108:	e3401001 	movt	r1, #1
   1310c:	e3a02034 	mov	r2, #52	@ 0x34
   13110:	e2810070 	add	r0, r1, #112	@ 0x70
   13114:	ebfffe0d 	bl	12950 <assertion_failed>

00013118 <CCharGenerator::CCharGenerator()>:
   13118:	e3a03008 	mov	r3, #8
   1311c:	e5803000 	str	r3, [r0]
   13120:	e12fff1e 	bx	lr

00013124 <CCharGenerator::~CCharGenerator()>:
   13124:	e12fff1e 	bx	lr

00013128 <CCharGenerator::GetCharWidth() const>:
   13128:	e5900000 	ldr	r0, [r0]
   1312c:	e12fff1e 	bx	lr

00013130 <CCharGenerator::GetCharHeight() const>:
   13130:	e3a00013 	mov	r0, #19
   13134:	e12fff1e 	bx	lr

00013138 <CCharGenerator::GetUnderline() const>:
   13138:	e3a00010 	mov	r0, #16
   1313c:	e12fff1e 	bx	lr

00013140 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   13140:	e6ef1071 	uxtb	r1, r1
   13144:	e2411021 	sub	r1, r1, #33	@ 0x21
   13148:	e35100de 	cmp	r1, #222	@ 0xde
   1314c:	8a00000d 	bhi	13188 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   13150:	e5900000 	ldr	r0, [r0]
   13154:	e1500002 	cmp	r0, r2
   13158:	9a00000c 	bls	13190 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   1315c:	e353000f 	cmp	r3, #15
   13160:	8a000008 	bhi	13188 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   13164:	e30601b8 	movw	r0, #25016	@ 0x61b8
   13168:	e3400001 	movt	r0, #1
   1316c:	e0800201 	add	r0, r0, r1, lsl #4
   13170:	e3a01080 	mov	r1, #128	@ 0x80
   13174:	e7d03003 	ldrb	r3, [r0, r3]
   13178:	e0133251 	ands	r3, r3, r1, asr r2
   1317c:	13a00001 	movne	r0, #1
   13180:	03a00000 	moveq	r0, #0
   13184:	e12fff1e 	bx	lr
   13188:	e3a00000 	mov	r0, #0
   1318c:	e12fff1e 	bx	lr
   13190:	e306118c 	movw	r1, #24972	@ 0x618c
   13194:	e3401001 	movt	r1, #1
   13198:	e30601a0 	movw	r0, #24992	@ 0x61a0
   1319c:	e3400001 	movt	r0, #1
   131a0:	e3a0204e 	mov	r2, #78	@ 0x4e
   131a4:	e92d4010 	push	{r4, lr}
   131a8:	ebfffde8 	bl	12950 <assertion_failed>

000131ac <debug_hexdump(void const*, unsigned int, char const*)>:
   131ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131b0:	e3520000 	cmp	r2, #0
   131b4:	e307803c 	movw	r8, #28732	@ 0x703c
   131b8:	e3408001 	movt	r8, #1
   131bc:	e24dd054 	sub	sp, sp, #84	@ 0x54
   131c0:	11a08002 	movne	r8, r2
   131c4:	e1a05001 	mov	r5, r1
   131c8:	e1a04000 	mov	r4, r0
   131cc:	ebffdc42 	bl	a2dc <CLogger::Get()>
   131d0:	e3a02004 	mov	r2, #4
   131d4:	e1a01008 	mov	r1, r8
   131d8:	e3063fa8 	movw	r3, #28584	@ 0x6fa8
   131dc:	e3403001 	movt	r3, #1
   131e0:	e58d4004 	str	r4, [sp, #4]
   131e4:	e58d5000 	str	r5, [sp]
   131e8:	ebffde04 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   131ec:	e3550000 	cmp	r5, #0
   131f0:	0a00002f 	beq	132b4 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   131f4:	e3063fd0 	movw	r3, #28624	@ 0x6fd0
   131f8:	e3403001 	movt	r3, #1
   131fc:	e205900f 	and	r9, r5, #15
   13200:	e58d304c 	str	r3, [sp, #76]	@ 0x4c
   13204:	ea000001 	b	13210 <debug_hexdump(void const*, unsigned int, char const*)+0x64>
   13208:	e2555010 	subs	r5, r5, #16
   1320c:	0a000028 	beq	132b4 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   13210:	ebffdc31 	bl	a2dc <CLogger::Get()>
   13214:	e5d4e00f 	ldrb	lr, [r4, #15]
   13218:	e5d4c00e 	ldrb	ip, [r4, #14]
   1321c:	e3a02004 	mov	r2, #4
   13220:	e5d4a00d 	ldrb	sl, [r4, #13]
   13224:	e5d4300c 	ldrb	r3, [r4, #12]
   13228:	e5d4700b 	ldrb	r7, [r4, #11]
   1322c:	e5d4100a 	ldrb	r1, [r4, #10]
   13230:	e5d46009 	ldrb	r6, [r4, #9]
   13234:	e58de040 	str	lr, [sp, #64]	@ 0x40
   13238:	e58dc03c 	str	ip, [sp, #60]	@ 0x3c
   1323c:	e5d4e008 	ldrb	lr, [r4, #8]
   13240:	e5d4c007 	ldrb	ip, [r4, #7]
   13244:	e58da038 	str	sl, [sp, #56]	@ 0x38
   13248:	e58d3034 	str	r3, [sp, #52]	@ 0x34
   1324c:	e5d43006 	ldrb	r3, [r4, #6]
   13250:	e5d4b005 	ldrb	fp, [r4, #5]
   13254:	e58d7030 	str	r7, [sp, #48]	@ 0x30
   13258:	e58d102c 	str	r1, [sp, #44]	@ 0x2c
   1325c:	e5d41004 	ldrb	r1, [r4, #4]
   13260:	e5d4a003 	ldrb	sl, [r4, #3]
   13264:	e58d6028 	str	r6, [sp, #40]	@ 0x28
   13268:	e58de024 	str	lr, [sp, #36]	@ 0x24
   1326c:	e5d47002 	ldrb	r7, [r4, #2]
   13270:	e5d46001 	ldrb	r6, [r4, #1]
   13274:	e58dc020 	str	ip, [sp, #32]
   13278:	e6ffc074 	uxth	ip, r4
   1327c:	e58d301c 	str	r3, [sp, #28]
   13280:	e2844010 	add	r4, r4, #16
   13284:	e59d304c 	ldr	r3, [sp, #76]	@ 0x4c
   13288:	e554e010 	ldrb	lr, [r4, #-16]
   1328c:	e58d1014 	str	r1, [sp, #20]
   13290:	e1a01008 	mov	r1, r8
   13294:	e58db018 	str	fp, [sp, #24]
   13298:	e58da010 	str	sl, [sp, #16]
   1329c:	e58d700c 	str	r7, [sp, #12]
   132a0:	e58d6008 	str	r6, [sp, #8]
   132a4:	e88d5000 	stm	sp, {ip, lr}
   132a8:	ebffddd4 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   132ac:	e1590005 	cmp	r9, r5
   132b0:	1affffd4 	bne	13208 <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   132b4:	e28dd054 	add	sp, sp, #84	@ 0x54
   132b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000132bc <debug_stacktrace(unsigned int const*, char const*)>:
   132bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   132c0:	e3510000 	cmp	r1, #0
   132c4:	e307703c 	movw	r7, #28732	@ 0x703c
   132c8:	e3407001 	movt	r7, #1
   132cc:	e3046e64 	movw	r6, #20068	@ 0x4e64
   132d0:	e3406001 	movt	r6, #1
   132d4:	e3078028 	movw	r8, #28712	@ 0x7028
   132d8:	e3408001 	movt	r8, #1
   132dc:	e24dd008 	sub	sp, sp, #8
   132e0:	11a07001 	movne	r7, r1
   132e4:	e2405004 	sub	r5, r0, #4
   132e8:	e3a04000 	mov	r4, #0
   132ec:	ea000002 	b	132fc <debug_stacktrace(unsigned int const*, char const*)+0x40>
   132f0:	e2844001 	add	r4, r4, #1
   132f4:	e3540040 	cmp	r4, #64	@ 0x40
   132f8:	0a000010 	beq	13340 <debug_stacktrace(unsigned int const*, char const*)+0x84>
   132fc:	e5b53004 	ldr	r3, [r5, #4]!
   13300:	e3530902 	cmp	r3, #32768	@ 0x8000
   13304:	3afffff9 	bcc	132f0 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   13308:	e1530006 	cmp	r3, r6
   1330c:	2afffff7 	bcs	132f0 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   13310:	e3130003 	tst	r3, #3
   13314:	1afffff5 	bne	132f0 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   13318:	ebffdbef 	bl	a2dc <CLogger::Get()>
   1331c:	e595c000 	ldr	ip, [r5]
   13320:	e88d1010 	stm	sp, {r4, ip}
   13324:	e1a03008 	mov	r3, r8
   13328:	e3a02004 	mov	r2, #4
   1332c:	e1a01007 	mov	r1, r7
   13330:	e2844001 	add	r4, r4, #1
   13334:	ebffddb1 	bl	aa00 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13338:	e3540040 	cmp	r4, #64	@ 0x40
   1333c:	1affffee 	bne	132fc <debug_stacktrace(unsigned int const*, char const*)+0x40>
   13340:	e28dd008 	add	sp, sp, #8
   13344:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00013348 <DelayLoop>:
   13348:	e1a01001 	mov	r1, r1
   1334c:	e1a02002 	mov	r2, r2
   13350:	e2500001 	subs	r0, r0, #1
   13354:	8afffffb 	bhi	13348 <DelayLoop>
   13358:	e1a0f00e 	mov	pc, lr

0001335c <CDevice::Read(void*, unsigned int)>:
   1335c:	e3e00000 	mvn	r0, #0
   13360:	e12fff1e 	bx	lr

00013364 <CDevice::Seek(unsigned long long)>:
   13364:	e3e00000 	mvn	r0, #0
   13368:	e3e01000 	mvn	r1, #0
   1336c:	e12fff1e 	bx	lr

00013370 <CDevice::GetSize() const>:
   13370:	e3e00000 	mvn	r0, #0
   13374:	e3e01000 	mvn	r1, #0
   13378:	e12fff1e 	bx	lr

0001337c <CDevice::IOCtl(unsigned long, void*)>:
   1337c:	e3e00000 	mvn	r0, #0
   13380:	e12fff1e 	bx	lr

00013384 <CDevice::RemoveDevice()>:
   13384:	e3a00000 	mov	r0, #0
   13388:	e12fff1e 	bx	lr

0001338c <CDevice::~CDevice()>:
   1338c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13390:	e1a06000 	mov	r6, r0
   13394:	e59f3080 	ldr	r3, [pc, #128]	@ 1341c <CDevice::~CDevice()+0x90>
   13398:	e1a07000 	mov	r7, r0
   1339c:	e4863004 	str	r3, [r6], #4
   133a0:	ea000008 	b	133c8 <CDevice::~CDevice()+0x3c>
   133a4:	e5901004 	ldr	r1, [r0, #4]
   133a8:	e1a00007 	mov	r0, r7
   133ac:	e12fff33 	blx	r3
   133b0:	e1a01004 	mov	r1, r4
   133b4:	e1a00006 	mov	r0, r6
   133b8:	eb000515 	bl	14814 <CPtrList::Remove(TPtrListElement*)>
   133bc:	e3a01008 	mov	r1, #8
   133c0:	e1a00005 	mov	r0, r5
   133c4:	ebfff76c 	bl	1117c <operator delete(void*, unsigned int)>
   133c8:	e1a00006 	mov	r0, r6
   133cc:	eb00046a 	bl	1457c <CPtrList::GetFirst()>
   133d0:	e2504000 	subs	r4, r0, #0
   133d4:	0a00000c 	beq	1340c <CDevice::~CDevice()+0x80>
   133d8:	e1a01004 	mov	r1, r4
   133dc:	e1a00006 	mov	r0, r6
   133e0:	eb00047d 	bl	145dc <CPtrList::GetPtr(TPtrListElement*)>
   133e4:	e5903000 	ldr	r3, [r0]
   133e8:	e1a05000 	mov	r5, r0
   133ec:	e3530000 	cmp	r3, #0
   133f0:	1affffeb 	bne	133a4 <CDevice::~CDevice()+0x18>
   133f4:	e3071044 	movw	r1, #28740	@ 0x7044
   133f8:	e3401001 	movt	r1, #1
   133fc:	e3070050 	movw	r0, #28752	@ 0x7050
   13400:	e3400001 	movt	r0, #1
   13404:	e3a02028 	mov	r2, #40	@ 0x28
   13408:	ebfffd50 	bl	12950 <assertion_failed>
   1340c:	e1a00006 	mov	r0, r6
   13410:	eb00044f 	bl	14554 <CPtrList::~CPtrList()>
   13414:	e1a00007 	mov	r0, r7
   13418:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1341c:	0001708c 	.word	0x0001708c

00013420 <CDevice::~CDevice()>:
   13420:	e92d4010 	push	{r4, lr}
   13424:	e1a04000 	mov	r4, r0
   13428:	ebffffd7 	bl	1338c <CDevice::~CDevice()>
   1342c:	e1a00004 	mov	r0, r4
   13430:	e3a01008 	mov	r1, #8
   13434:	ebfff750 	bl	1117c <operator delete(void*, unsigned int)>
   13438:	e1a00004 	mov	r0, r4
   1343c:	e8bd8010 	pop	{r4, pc}

00013440 <CDevice::CDevice()>:
   13440:	e59f3014 	ldr	r3, [pc, #20]	@ 1345c <CDevice::CDevice()+0x1c>
   13444:	e92d4010 	push	{r4, lr}
   13448:	e1a04000 	mov	r4, r0
   1344c:	e4803004 	str	r3, [r0], #4
   13450:	eb00043c 	bl	14548 <CPtrList::CPtrList()>
   13454:	e1a00004 	mov	r0, r4
   13458:	e8bd8010 	pop	{r4, pc}
   1345c:	0001708c 	.word	0x0001708c

00013460 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   13460:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13464:	e2516000 	subs	r6, r1, #0
   13468:	0a000012 	beq	134b8 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x58>
   1346c:	e1a04000 	mov	r4, r0
   13470:	e3a00008 	mov	r0, #8
   13474:	e1a07002 	mov	r7, r2
   13478:	ebfff727 	bl	1111c <operator new(unsigned int)>
   1347c:	e1a05000 	mov	r5, r0
   13480:	e2844004 	add	r4, r4, #4
   13484:	e1a00004 	mov	r0, r4
   13488:	e88500c0 	stm	r5, {r6, r7}
   1348c:	eb00043a 	bl	1457c <CPtrList::GetFirst()>
   13490:	e1a02005 	mov	r2, r5
   13494:	e2501000 	subs	r1, r0, #0
   13498:	e1a00004 	mov	r0, r4
   1349c:	0a000002 	beq	134ac <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x4c>
   134a0:	eb000463 	bl	14634 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   134a4:	e1a00005 	mov	r0, r5
   134a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   134ac:	eb00049c 	bl	14724 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   134b0:	e1a00005 	mov	r0, r5
   134b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   134b8:	e3071044 	movw	r1, #28740	@ 0x7044
   134bc:	e3401001 	movt	r1, #1
   134c0:	e3060020 	movw	r0, #24608	@ 0x6020
   134c4:	e3400001 	movt	r0, #1
   134c8:	e3a02052 	mov	r2, #82	@ 0x52
   134cc:	ebfffd1f 	bl	12950 <assertion_failed>

000134d0 <CDevice::UnregisterRemovedHandler(void*)>:
   134d0:	e92d4070 	push	{r4, r5, r6, lr}
   134d4:	e2515000 	subs	r5, r1, #0
   134d8:	0a00000a 	beq	13508 <CDevice::UnregisterRemovedHandler(void*)+0x38>
   134dc:	e2804004 	add	r4, r0, #4
   134e0:	e1a00004 	mov	r0, r4
   134e4:	eb000514 	bl	1493c <CPtrList::Find(void*)>
   134e8:	e2501000 	subs	r1, r0, #0
   134ec:	0a00000b 	beq	13520 <CDevice::UnregisterRemovedHandler(void*)+0x50>
   134f0:	e1a00004 	mov	r0, r4
   134f4:	eb0004c6 	bl	14814 <CPtrList::Remove(TPtrListElement*)>
   134f8:	e1a00005 	mov	r0, r5
   134fc:	e3a01008 	mov	r1, #8
   13500:	e8bd4070 	pop	{r4, r5, r6, lr}
   13504:	eafff71c 	b	1117c <operator delete(void*, unsigned int)>
   13508:	e3071044 	movw	r1, #28740	@ 0x7044
   1350c:	e3401001 	movt	r1, #1
   13510:	e3070068 	movw	r0, #28776	@ 0x7068
   13514:	e3400001 	movt	r0, #1
   13518:	e3a02069 	mov	r2, #105	@ 0x69
   1351c:	ebfffd0b 	bl	12950 <assertion_failed>
   13520:	e3071044 	movw	r1, #28740	@ 0x7044
   13524:	e3401001 	movt	r1, #1
   13528:	e3070074 	movw	r0, #28788	@ 0x7074
   1352c:	e3400001 	movt	r0, #1
   13530:	e3a0206c 	mov	r2, #108	@ 0x6c
   13534:	ebfffd05 	bl	12950 <assertion_failed>

00013538 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   13538:	e92d4070 	push	{r4, r5, r6, lr}
   1353c:	e1a04000 	mov	r4, r0
   13540:	e1a06001 	mov	r6, r1
   13544:	e1a05002 	mov	r5, r2
   13548:	ebffdf73 	bl	b31c <CMachineInfo::Get()>
   1354c:	e1a01006 	mov	r1, r6
   13550:	ebffdf1b 	bl	b1c4 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   13554:	e3a01000 	mov	r1, #0
   13558:	e3500080 	cmp	r0, #128	@ 0x80
   1355c:	e8840003 	stm	r4, {r0, r1}
   13560:	e5841008 	str	r1, [r4, #8]
   13564:	e584500c 	str	r5, [r4, #12]
   13568:	e5c41010 	strb	r1, [r4, #16]
   1356c:	e5841014 	str	r1, [r4, #20]
   13570:	e5841018 	str	r1, [r4, #24]
   13574:	e5c4101c 	strb	r1, [r4, #28]
   13578:	0a00001c 	beq	135f0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xb8>
   1357c:	e350000b 	cmp	r0, #11
   13580:	8a00001f 	bhi	13604 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xcc>
   13584:	e3a0003f 	mov	r0, #63	@ 0x3f
   13588:	ebfff6d5 	bl	110e4 <operator new[](unsigned int, int)>
   1358c:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   13590:	e280301f 	add	r3, r0, #31
   13594:	e3a02a07 	mov	r2, #28672	@ 0x7000
   13598:	e3432f00 	movt	r2, #16128	@ 0x3f00
   1359c:	e3c3301f 	bic	r3, r3, #31
   135a0:	e5941000 	ldr	r1, [r4]
   135a4:	e9840009 	stmib	r4, {r0, r3}
   135a8:	e3a00001 	mov	r0, #1
   135ac:	edc30b06 	vstr	d16, [r3, #24]
   135b0:	e5923ff0 	ldr	r3, [r2, #4080]	@ 0xff0
   135b4:	e1833110 	orr	r3, r3, r0, lsl r1
   135b8:	e3a00ffa 	mov	r0, #1000	@ 0x3e8
   135bc:	e5823ff0 	str	r3, [r2, #4080]	@ 0xff0
   135c0:	ebfff368 	bl	10368 <CTimer::SimpleusDelay(unsigned int)>
   135c4:	e5942000 	ldr	r2, [r4]
   135c8:	e3a03102 	mov	r3, #-2147483648	@ 0x80000000
   135cc:	e282283f 	add	r2, r2, #4128768	@ 0x3f0000
   135d0:	e2822070 	add	r2, r2, #112	@ 0x70
   135d4:	e1a02402 	lsl	r2, r2, #8
   135d8:	e5823000 	str	r3, [r2]
   135dc:	e5923000 	ldr	r3, [r2]
   135e0:	e3530000 	cmp	r3, #0
   135e4:	bafffffc 	blt	135dc <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xa4>
   135e8:	e1a00004 	mov	r0, r4
   135ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   135f0:	e30710ac 	movw	r1, #28844	@ 0x70ac
   135f4:	e3401001 	movt	r1, #1
   135f8:	e3a02039 	mov	r2, #57	@ 0x39
   135fc:	e2810010 	add	r0, r1, #16
   13600:	ebfffcd2 	bl	12950 <assertion_failed>
   13604:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13608:	e3401001 	movt	r1, #1
   1360c:	e3a0203a 	mov	r2, #58	@ 0x3a
   13610:	e2810030 	add	r0, r1, #48	@ 0x30
   13614:	ebfffccd 	bl	12950 <assertion_failed>

00013618 <CDMAChannel::~CDMAChannel()>:
   13618:	e5903000 	ldr	r3, [r0]
   1361c:	e92d4010 	push	{r4, lr}
   13620:	e353000b 	cmp	r3, #11
   13624:	8a00002c 	bhi	136dc <CDMAChannel::~CDMAChannel()+0xc4>
   13628:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   1362c:	e3a02102 	mov	r2, #-2147483648	@ 0x80000000
   13630:	e2833070 	add	r3, r3, #112	@ 0x70
   13634:	e1a04000 	mov	r4, r0
   13638:	e1a03403 	lsl	r3, r3, #8
   1363c:	e5832000 	str	r2, [r3]
   13640:	e5901000 	ldr	r1, [r0]
   13644:	e281283f 	add	r2, r1, #4128768	@ 0x3f0000
   13648:	e2822070 	add	r2, r2, #112	@ 0x70
   1364c:	e1a02402 	lsl	r2, r2, #8
   13650:	e5923000 	ldr	r3, [r2]
   13654:	e3530000 	cmp	r3, #0
   13658:	bafffffc 	blt	13650 <CDMAChannel::~CDMAChannel()+0x38>
   1365c:	e3a03a07 	mov	r3, #28672	@ 0x7000
   13660:	e3433f00 	movt	r3, #16128	@ 0x3f00
   13664:	e594000c 	ldr	r0, [r4, #12]
   13668:	e3a0e001 	mov	lr, #1
   1366c:	e3a0c000 	mov	ip, #0
   13670:	e5932ff0 	ldr	r2, [r3, #4080]	@ 0xff0
   13674:	e150000c 	cmp	r0, ip
   13678:	e1c2211e 	bic	r2, r2, lr, lsl r1
   1367c:	e5832ff0 	str	r2, [r3, #4080]	@ 0xff0
   13680:	e584c014 	str	ip, [r4, #20]
   13684:	0a000009 	beq	136b0 <CDMAChannel::~CDMAChannel()+0x98>
   13688:	e5d43010 	ldrb	r3, [r4, #16]
   1368c:	e153000c 	cmp	r3, ip
   13690:	0a000004 	beq	136a8 <CDMAChannel::~CDMAChannel()+0x90>
   13694:	e5941000 	ldr	r1, [r4]
   13698:	e351000c 	cmp	r1, #12
   1369c:	8a000013 	bhi	136f0 <CDMAChannel::~CDMAChannel()+0xd8>
   136a0:	e2811010 	add	r1, r1, #16
   136a4:	ebfffb4e 	bl	123e4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   136a8:	e3a03000 	mov	r3, #0
   136ac:	e584300c 	str	r3, [r4, #12]
   136b0:	ebffdf19 	bl	b31c <CMachineInfo::Get()>
   136b4:	e5941000 	ldr	r1, [r4]
   136b8:	ebffdef6 	bl	b298 <CMachineInfo::FreeDMAChannel(unsigned int)>
   136bc:	e5940004 	ldr	r0, [r4, #4]
   136c0:	e3a03000 	mov	r3, #0
   136c4:	e5843008 	str	r3, [r4, #8]
   136c8:	e1500003 	cmp	r0, r3
   136cc:	0a000000 	beq	136d4 <CDMAChannel::~CDMAChannel()+0xbc>
   136d0:	ebfff6a3 	bl	11164 <operator delete[](void*)>
   136d4:	e1a00004 	mov	r0, r4
   136d8:	e8bd8010 	pop	{r4, pc}
   136dc:	e30710ac 	movw	r1, #28844	@ 0x70ac
   136e0:	e3401001 	movt	r1, #1
   136e4:	e3a02062 	mov	r2, #98	@ 0x62
   136e8:	e2810030 	add	r0, r1, #48	@ 0x30
   136ec:	ebfffc97 	bl	12950 <assertion_failed>
   136f0:	e30710ac 	movw	r1, #28844	@ 0x70ac
   136f4:	e3401001 	movt	r1, #1
   136f8:	e3a02074 	mov	r2, #116	@ 0x74
   136fc:	e281004c 	add	r0, r1, #76	@ 0x4c
   13700:	ebfffc92 	bl	12950 <assertion_failed>

00013704 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   13704:	e92d4070 	push	{r4, r5, r6, lr}
   13708:	e1a06000 	mov	r6, r0
   1370c:	e59de010 	ldr	lr, [sp, #16]
   13710:	e1a00002 	mov	r0, r2
   13714:	e2515000 	subs	r5, r1, #0
   13718:	e5dd2014 	ldrb	r2, [sp, #20]
   1371c:	0a00004b 	beq	13850 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x14c>
   13720:	e3500000 	cmp	r0, #0
   13724:	0a00004e 	beq	13864 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x160>
   13728:	e1a04003 	mov	r4, r3
   1372c:	e3530000 	cmp	r3, #0
   13730:	0a000050 	beq	13878 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x174>
   13734:	e35e000f 	cmp	lr, #15
   13738:	8a000053 	bhi	1388c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x188>
   1373c:	e596c008 	ldr	ip, [r6, #8]
   13740:	e35c0000 	cmp	ip, #0
   13744:	0a000055 	beq	138a0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x19c>
   13748:	e3730107 	cmn	r3, #-1073741823	@ 0xc0000001
   1374c:	8a000058 	bhi	138b4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1b0>
   13750:	e5961000 	ldr	r1, [r6]
   13754:	e3073020 	movw	r3, #28704	@ 0x7020
   13758:	e3433f00 	movt	r3, #16128	@ 0x3f00
   1375c:	e7933401 	ldr	r3, [r3, r1, lsl #8]
   13760:	e2233201 	eor	r3, r3, #268435456	@ 0x10000000
   13764:	e7e03e53 	ubfx	r3, r3, #28, #1
   13768:	e3540801 	cmp	r4, #65536	@ 0x10000
   1376c:	33833001 	orrcc	r3, r3, #1
   13770:	e3530000 	cmp	r3, #0
   13774:	0a000053 	beq	138c8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c4>
   13778:	e3803103 	orr	r3, r0, #-1073741824	@ 0xc0000000
   1377c:	e1a0e60e 	lsl	lr, lr, #12
   13780:	e38eee33 	orr	lr, lr, #816	@ 0x330
   13784:	e3520000 	cmp	r2, #0
   13788:	e1a03c23 	lsr	r3, r3, #24
   1378c:	e5cc3007 	strb	r3, [ip, #7]
   13790:	e3853103 	orr	r3, r5, #-1073741824	@ 0xc0000000
   13794:	e5cc0004 	strb	r0, [ip, #4]
   13798:	e5cc5008 	strb	r5, [ip, #8]
   1379c:	e1a03c23 	lsr	r3, r3, #24
   137a0:	e5cc400c 	strb	r4, [ip, #12]
   137a4:	e5cc300b 	strb	r3, [ip, #11]
   137a8:	e3a03000 	mov	r3, #0
   137ac:	e5cc3010 	strb	r3, [ip, #16]
   137b0:	e5cc3011 	strb	r3, [ip, #17]
   137b4:	e5cc3012 	strb	r3, [ip, #18]
   137b8:	e5cc3013 	strb	r3, [ip, #19]
   137bc:	e5cc3014 	strb	r3, [ip, #20]
   137c0:	e5cc3015 	strb	r3, [ip, #21]
   137c4:	e5cc3016 	strb	r3, [ip, #22]
   137c8:	e5cc3017 	strb	r3, [ip, #23]
   137cc:	e3a03030 	mov	r3, #48	@ 0x30
   137d0:	e5cc3000 	strb	r3, [ip]
   137d4:	e1a0342e 	lsr	r3, lr, #8
   137d8:	e5cc3001 	strb	r3, [ip, #1]
   137dc:	e7e7385e 	ubfx	r3, lr, #16, #8
   137e0:	e1a0ec2e 	lsr	lr, lr, #24
   137e4:	e5cc3002 	strb	r3, [ip, #2]
   137e8:	e5cce003 	strb	lr, [ip, #3]
   137ec:	e7e73450 	ubfx	r3, r0, #8, #8
   137f0:	e5cc3005 	strb	r3, [ip, #5]
   137f4:	e7e73850 	ubfx	r3, r0, #16, #8
   137f8:	e5cc3006 	strb	r3, [ip, #6]
   137fc:	e7e73455 	ubfx	r3, r5, #8, #8
   13800:	e5cc3009 	strb	r3, [ip, #9]
   13804:	e7e73855 	ubfx	r3, r5, #16, #8
   13808:	e5cc300a 	strb	r3, [ip, #10]
   1380c:	e7e73454 	ubfx	r3, r4, #8, #8
   13810:	e5cc300d 	strb	r3, [ip, #13]
   13814:	e7e73854 	ubfx	r3, r4, #16, #8
   13818:	e5cc300e 	strb	r3, [ip, #14]
   1381c:	e1a03c24 	lsr	r3, r4, #24
   13820:	e5cc300f 	strb	r3, [ip, #15]
   13824:	1a000001 	bne	13830 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x12c>
   13828:	e5862020 	str	r2, [r6, #32]
   1382c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13830:	e1a01004 	mov	r1, r4
   13834:	e5865020 	str	r5, [r6, #32]
   13838:	e5864024 	str	r4, [r6, #36]	@ 0x24
   1383c:	ebfff7de 	bl	117bc <CleanAndInvalidateDataCacheRange>
   13840:	e1a01004 	mov	r1, r4
   13844:	e1a00005 	mov	r0, r5
   13848:	e8bd4070 	pop	{r4, r5, r6, lr}
   1384c:	eafff7da 	b	117bc <CleanAndInvalidateDataCacheRange>
   13850:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13854:	e3401001 	movt	r1, #1
   13858:	e3a0208f 	mov	r2, #143	@ 0x8f
   1385c:	e2810060 	add	r0, r1, #96	@ 0x60
   13860:	ebfffc3a 	bl	12950 <assertion_failed>
   13864:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13868:	e3401001 	movt	r1, #1
   1386c:	e3a02090 	mov	r2, #144	@ 0x90
   13870:	e2810074 	add	r0, r1, #116	@ 0x74
   13874:	ebfffc35 	bl	12950 <assertion_failed>
   13878:	e30710ac 	movw	r1, #28844	@ 0x70ac
   1387c:	e3401001 	movt	r1, #1
   13880:	e3a02091 	mov	r2, #145	@ 0x91
   13884:	e2810084 	add	r0, r1, #132	@ 0x84
   13888:	ebfffc30 	bl	12950 <assertion_failed>
   1388c:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13890:	e3401001 	movt	r1, #1
   13894:	e3a02092 	mov	r2, #146	@ 0x92
   13898:	e2810090 	add	r0, r1, #144	@ 0x90
   1389c:	ebfffc2b 	bl	12950 <assertion_failed>
   138a0:	e30710ac 	movw	r1, #28844	@ 0x70ac
   138a4:	e3401001 	movt	r1, #1
   138a8:	e3a02094 	mov	r2, #148	@ 0x94
   138ac:	e28100a4 	add	r0, r1, #164	@ 0xa4
   138b0:	ebfffc26 	bl	12950 <assertion_failed>
   138b4:	e30710ac 	movw	r1, #28844	@ 0x70ac
   138b8:	e3401001 	movt	r1, #1
   138bc:	e3a02095 	mov	r2, #149	@ 0x95
   138c0:	e28100bc 	add	r0, r1, #188	@ 0xbc
   138c4:	ebfffc21 	bl	12950 <assertion_failed>
   138c8:	e30710ac 	movw	r1, #28844	@ 0x70ac
   138cc:	e3401001 	movt	r1, #1
   138d0:	e3a02096 	mov	r2, #150	@ 0x96
   138d4:	e28100d4 	add	r0, r1, #212	@ 0xd4
   138d8:	ebfffc1c 	bl	12950 <assertion_failed>

000138dc <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   138dc:	e92d4010 	push	{r4, lr}
   138e0:	e1a0e000 	mov	lr, r0
   138e4:	e2510000 	subs	r0, r1, #0
   138e8:	e5dd4008 	ldrb	r4, [sp, #8]
   138ec:	0a00003d 	beq	139e8 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x10c>
   138f0:	e3530000 	cmp	r3, #0
   138f4:	0a000040 	beq	139fc <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x120>
   138f8:	e3730107 	cmn	r3, #-1073741823	@ 0xc0000001
   138fc:	8a000043 	bhi	13a10 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x134>
   13900:	e59ec000 	ldr	ip, [lr]
   13904:	e3071020 	movw	r1, #28704	@ 0x7020
   13908:	e3431f00 	movt	r1, #16128	@ 0x3f00
   1390c:	e791140c 	ldr	r1, [r1, ip, lsl #8]
   13910:	e2211201 	eor	r1, r1, #268435456	@ 0x10000000
   13914:	e7e01e51 	ubfx	r1, r1, #28, #1
   13918:	e3530801 	cmp	r3, #65536	@ 0x10000
   1391c:	33811001 	orrcc	r1, r1, #1
   13920:	e3510000 	cmp	r1, #0
   13924:	0a000048 	beq	13a4c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x170>
   13928:	e3d224ff 	bics	r2, r2, #-16777216	@ 0xff000000
   1392c:	0a00003c 	beq	13a24 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x148>
   13930:	e59ec008 	ldr	ip, [lr, #8]
   13934:	e282247e 	add	r2, r2, #2113929216	@ 0x7e000000
   13938:	e35c0000 	cmp	ip, #0
   1393c:	0a00003d 	beq	13a38 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x15c>
   13940:	e3801103 	orr	r1, r0, #-1073741824	@ 0xc0000000
   13944:	e5cc4002 	strb	r4, [ip, #2]
   13948:	e5cc2004 	strb	r2, [ip, #4]
   1394c:	e1a01c21 	lsr	r1, r1, #24
   13950:	e5cc100b 	strb	r1, [ip, #11]
   13954:	e3001438 	movw	r1, #1080	@ 0x438
   13958:	e5cc0008 	strb	r0, [ip, #8]
   1395c:	e5cc1000 	strb	r1, [ip]
   13960:	e1a01421 	lsr	r1, r1, #8
   13964:	e5cc300c 	strb	r3, [ip, #12]
   13968:	e5cc1001 	strb	r1, [ip, #1]
   1396c:	e3a01000 	mov	r1, #0
   13970:	e5cc1010 	strb	r1, [ip, #16]
   13974:	e5cc1011 	strb	r1, [ip, #17]
   13978:	e5cc1012 	strb	r1, [ip, #18]
   1397c:	e5cc1013 	strb	r1, [ip, #19]
   13980:	e5cc1014 	strb	r1, [ip, #20]
   13984:	e5cc1015 	strb	r1, [ip, #21]
   13988:	e5cc1016 	strb	r1, [ip, #22]
   1398c:	e5cc1017 	strb	r1, [ip, #23]
   13990:	e5cc1003 	strb	r1, [ip, #3]
   13994:	e7e71452 	ubfx	r1, r2, #8, #8
   13998:	e5cc1005 	strb	r1, [ip, #5]
   1399c:	e7e71852 	ubfx	r1, r2, #16, #8
   139a0:	e1a02c22 	lsr	r2, r2, #24
   139a4:	e5cc1006 	strb	r1, [ip, #6]
   139a8:	e5cc2007 	strb	r2, [ip, #7]
   139ac:	e1a01003 	mov	r1, r3
   139b0:	e7e72450 	ubfx	r2, r0, #8, #8
   139b4:	e5cc2009 	strb	r2, [ip, #9]
   139b8:	e7e72850 	ubfx	r2, r0, #16, #8
   139bc:	e5cc200a 	strb	r2, [ip, #10]
   139c0:	e7e72453 	ubfx	r2, r3, #8, #8
   139c4:	e5cc200d 	strb	r2, [ip, #13]
   139c8:	e7e72853 	ubfx	r2, r3, #16, #8
   139cc:	e5cc200e 	strb	r2, [ip, #14]
   139d0:	e1a02c23 	lsr	r2, r3, #24
   139d4:	e5cc200f 	strb	r2, [ip, #15]
   139d8:	e58e0020 	str	r0, [lr, #32]
   139dc:	e58e3024 	str	r3, [lr, #36]	@ 0x24
   139e0:	e8bd4010 	pop	{r4, lr}
   139e4:	eafff774 	b	117bc <CleanAndInvalidateDataCacheRange>
   139e8:	e30710ac 	movw	r1, #28844	@ 0x70ac
   139ec:	e3401001 	movt	r1, #1
   139f0:	e3a020bd 	mov	r2, #189	@ 0xbd
   139f4:	e2810060 	add	r0, r1, #96	@ 0x60
   139f8:	ebfffbd4 	bl	12950 <assertion_failed>
   139fc:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13a00:	e3401001 	movt	r1, #1
   13a04:	e3a020be 	mov	r2, #190	@ 0xbe
   13a08:	e2810084 	add	r0, r1, #132	@ 0x84
   13a0c:	ebfffbcf 	bl	12950 <assertion_failed>
   13a10:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13a14:	e3401001 	movt	r1, #1
   13a18:	e3a020bf 	mov	r2, #191	@ 0xbf
   13a1c:	e28100bc 	add	r0, r1, #188	@ 0xbc
   13a20:	ebfffbca 	bl	12950 <assertion_failed>
   13a24:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13a28:	e3401001 	movt	r1, #1
   13a2c:	e3a020c4 	mov	r2, #196	@ 0xc4
   13a30:	e2810f4b 	add	r0, r1, #300	@ 0x12c
   13a34:	ebfffbc5 	bl	12950 <assertion_failed>
   13a38:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13a3c:	e3401001 	movt	r1, #1
   13a40:	e3a020c7 	mov	r2, #199	@ 0xc7
   13a44:	e28100a4 	add	r0, r1, #164	@ 0xa4
   13a48:	ebfffbc0 	bl	12950 <assertion_failed>
   13a4c:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13a50:	e3401001 	movt	r1, #1
   13a54:	e3a020c0 	mov	r2, #192	@ 0xc0
   13a58:	e28100d4 	add	r0, r1, #212	@ 0xd4
   13a5c:	ebfffbbb 	bl	12950 <assertion_failed>

00013a60 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   13a60:	e92d4070 	push	{r4, r5, r6, lr}
   13a64:	e1a04000 	mov	r4, r0
   13a68:	e2520000 	subs	r0, r2, #0
   13a6c:	e5dd5010 	ldrb	r5, [sp, #16]
   13a70:	0a00003d 	beq	13b6c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x10c>
   13a74:	e1a0e001 	mov	lr, r1
   13a78:	e3530000 	cmp	r3, #0
   13a7c:	e1a01003 	mov	r1, r3
   13a80:	0a00003e 	beq	13b80 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x120>
   13a84:	e3730107 	cmn	r3, #-1073741823	@ 0xc0000001
   13a88:	8a000041 	bhi	13b94 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x134>
   13a8c:	e5942000 	ldr	r2, [r4]
   13a90:	e3073020 	movw	r3, #28704	@ 0x7020
   13a94:	e3433f00 	movt	r3, #16128	@ 0x3f00
   13a98:	e793c402 	ldr	ip, [r3, r2, lsl #8]
   13a9c:	e22cc201 	eor	ip, ip, #268435456	@ 0x10000000
   13aa0:	e7e0ce5c 	ubfx	ip, ip, #28, #1
   13aa4:	e3510801 	cmp	r1, #65536	@ 0x10000
   13aa8:	338cc001 	orrcc	ip, ip, #1
   13aac:	e35c0000 	cmp	ip, #0
   13ab0:	0a000046 	beq	13bd0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x170>
   13ab4:	e3dee4ff 	bics	lr, lr, #-16777216	@ 0xff000000
   13ab8:	0a00003a 	beq	13ba8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x148>
   13abc:	e594c008 	ldr	ip, [r4, #8]
   13ac0:	e28ee47e 	add	lr, lr, #2113929216	@ 0x7e000000
   13ac4:	e35c0000 	cmp	ip, #0
   13ac8:	0a00003b 	beq	13bbc <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x15c>
   13acc:	e3803103 	orr	r3, r0, #-1073741824	@ 0xc0000000
   13ad0:	e3a02048 	mov	r2, #72	@ 0x48
   13ad4:	e5cc5002 	strb	r5, [ip, #2]
   13ad8:	e1a03c23 	lsr	r3, r3, #24
   13adc:	e5cce008 	strb	lr, [ip, #8]
   13ae0:	e5cc3007 	strb	r3, [ip, #7]
   13ae4:	e3a03000 	mov	r3, #0
   13ae8:	e5cc2000 	strb	r2, [ip]
   13aec:	e3a02003 	mov	r2, #3
   13af0:	e5cc0004 	strb	r0, [ip, #4]
   13af4:	e5cc2001 	strb	r2, [ip, #1]
   13af8:	e7e72450 	ubfx	r2, r0, #8, #8
   13afc:	e5cc100c 	strb	r1, [ip, #12]
   13b00:	e5cc2005 	strb	r2, [ip, #5]
   13b04:	e7e72850 	ubfx	r2, r0, #16, #8
   13b08:	e5cc3010 	strb	r3, [ip, #16]
   13b0c:	e5cc2006 	strb	r2, [ip, #6]
   13b10:	e7e7245e 	ubfx	r2, lr, #8, #8
   13b14:	e5cc3011 	strb	r3, [ip, #17]
   13b18:	e5cc2009 	strb	r2, [ip, #9]
   13b1c:	e7e7285e 	ubfx	r2, lr, #16, #8
   13b20:	e5cc3012 	strb	r3, [ip, #18]
   13b24:	e1a0ec2e 	lsr	lr, lr, #24
   13b28:	e5cc200a 	strb	r2, [ip, #10]
   13b2c:	e7e72451 	ubfx	r2, r1, #8, #8
   13b30:	e5cce00b 	strb	lr, [ip, #11]
   13b34:	e5cc200d 	strb	r2, [ip, #13]
   13b38:	e7e72851 	ubfx	r2, r1, #16, #8
   13b3c:	e5cc3013 	strb	r3, [ip, #19]
   13b40:	e5cc200e 	strb	r2, [ip, #14]
   13b44:	e1a02c21 	lsr	r2, r1, #24
   13b48:	e5cc3014 	strb	r3, [ip, #20]
   13b4c:	e5cc3015 	strb	r3, [ip, #21]
   13b50:	e5cc3016 	strb	r3, [ip, #22]
   13b54:	e5cc3017 	strb	r3, [ip, #23]
   13b58:	e5cc3003 	strb	r3, [ip, #3]
   13b5c:	e5cc200f 	strb	r2, [ip, #15]
   13b60:	e5843020 	str	r3, [r4, #32]
   13b64:	e8bd4070 	pop	{r4, r5, r6, lr}
   13b68:	eafff713 	b	117bc <CleanAndInvalidateDataCacheRange>
   13b6c:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13b70:	e3401001 	movt	r1, #1
   13b74:	e3a020e5 	mov	r2, #229	@ 0xe5
   13b78:	e2810074 	add	r0, r1, #116	@ 0x74
   13b7c:	ebfffb73 	bl	12950 <assertion_failed>
   13b80:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13b84:	e3401001 	movt	r1, #1
   13b88:	e3a020e6 	mov	r2, #230	@ 0xe6
   13b8c:	e2810084 	add	r0, r1, #132	@ 0x84
   13b90:	ebfffb6e 	bl	12950 <assertion_failed>
   13b94:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13b98:	e3401001 	movt	r1, #1
   13b9c:	e3a020e7 	mov	r2, #231	@ 0xe7
   13ba0:	e28100bc 	add	r0, r1, #188	@ 0xbc
   13ba4:	ebfffb69 	bl	12950 <assertion_failed>
   13ba8:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13bac:	e3401001 	movt	r1, #1
   13bb0:	e3a020ec 	mov	r2, #236	@ 0xec
   13bb4:	e2810f4b 	add	r0, r1, #300	@ 0x12c
   13bb8:	ebfffb64 	bl	12950 <assertion_failed>
   13bbc:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13bc0:	e3401001 	movt	r1, #1
   13bc4:	e3a020ef 	mov	r2, #239	@ 0xef
   13bc8:	e28100a4 	add	r0, r1, #164	@ 0xa4
   13bcc:	ebfffb5f 	bl	12950 <assertion_failed>
   13bd0:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13bd4:	e3401001 	movt	r1, #1
   13bd8:	e3a020e8 	mov	r2, #232	@ 0xe8
   13bdc:	e28100d4 	add	r0, r1, #212	@ 0xd4
   13be0:	ebfffb5a 	bl	12950 <assertion_failed>

00013be4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   13be4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13be8:	e2516000 	subs	r6, r1, #0
   13bec:	e59d7018 	ldr	r7, [sp, #24]
   13bf0:	e59de01c 	ldr	lr, [sp, #28]
   13bf4:	e59d4020 	ldr	r4, [sp, #32]
   13bf8:	0a00004d 	beq	13d34 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x150>
   13bfc:	e1a05000 	mov	r5, r0
   13c00:	e3520000 	cmp	r2, #0
   13c04:	e1a00002 	mov	r0, r2
   13c08:	0a00004e 	beq	13d48 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x164>
   13c0c:	e3530000 	cmp	r3, #0
   13c10:	0a000051 	beq	13d5c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x178>
   13c14:	e3530801 	cmp	r3, #65536	@ 0x10000
   13c18:	2a000054 	bcs	13d70 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x18c>
   13c1c:	e3570000 	cmp	r7, #0
   13c20:	0a000057 	beq	13d84 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a0>
   13c24:	e3570901 	cmp	r7, #16384	@ 0x4000
   13c28:	2a00005a 	bcs	13d98 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b4>
   13c2c:	e35e0801 	cmp	lr, #65536	@ 0x10000
   13c30:	2a00003a 	bcs	13d20 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x13c>
   13c34:	e354000f 	cmp	r4, #15
   13c38:	8a00005b 	bhi	13dac <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c8>
   13c3c:	e5951000 	ldr	r1, [r5]
   13c40:	e3072020 	movw	r2, #28704	@ 0x7020
   13c44:	e3432f00 	movt	r2, #16128	@ 0x3f00
   13c48:	e7922401 	ldr	r2, [r2, r1, lsl #8]
   13c4c:	e3120201 	tst	r2, #268435456	@ 0x10000000
   13c50:	1a00005a 	bne	13dc0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1dc>
   13c54:	e595c008 	ldr	ip, [r5, #8]
   13c58:	e35c0000 	cmp	ip, #0
   13c5c:	0a00005c 	beq	13dd4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   13c60:	e2472001 	sub	r2, r7, #1
   13c64:	e0010397 	mul	r1, r7, r3
   13c68:	e5cc300c 	strb	r3, [ip, #12]
   13c6c:	e1832802 	orr	r2, r3, r2, lsl #16
   13c70:	e7e73453 	ubfx	r3, r3, #8, #8
   13c74:	e5cc300d 	strb	r3, [ip, #13]
   13c78:	e3003332 	movw	r3, #818	@ 0x332
   13c7c:	e1834604 	orr	r4, r3, r4, lsl #12
   13c80:	e5cc3000 	strb	r3, [ip]
   13c84:	e3803103 	orr	r3, r0, #-1073741824	@ 0xc0000000
   13c88:	e5cc6008 	strb	r6, [ip, #8]
   13c8c:	e5cce012 	strb	lr, [ip, #18]
   13c90:	e7e7e45e 	ubfx	lr, lr, #8, #8
   13c94:	e1a03c23 	lsr	r3, r3, #24
   13c98:	e5cc3007 	strb	r3, [ip, #7]
   13c9c:	e3863103 	orr	r3, r6, #-1073741824	@ 0xc0000000
   13ca0:	e5cce013 	strb	lr, [ip, #19]
   13ca4:	e5cc0004 	strb	r0, [ip, #4]
   13ca8:	e3a0e000 	mov	lr, #0
   13cac:	e1a03c23 	lsr	r3, r3, #24
   13cb0:	e5cce014 	strb	lr, [ip, #20]
   13cb4:	e5cc300b 	strb	r3, [ip, #11]
   13cb8:	e1a03424 	lsr	r3, r4, #8
   13cbc:	e5cce015 	strb	lr, [ip, #21]
   13cc0:	e5cce016 	strb	lr, [ip, #22]
   13cc4:	e5cce017 	strb	lr, [ip, #23]
   13cc8:	e5cc3001 	strb	r3, [ip, #1]
   13ccc:	e7e73854 	ubfx	r3, r4, #16, #8
   13cd0:	e5cce010 	strb	lr, [ip, #16]
   13cd4:	e1a04c24 	lsr	r4, r4, #24
   13cd8:	e5cc3002 	strb	r3, [ip, #2]
   13cdc:	e7e73450 	ubfx	r3, r0, #8, #8
   13ce0:	e5cc4003 	strb	r4, [ip, #3]
   13ce4:	e5cc3005 	strb	r3, [ip, #5]
   13ce8:	e7e73850 	ubfx	r3, r0, #16, #8
   13cec:	e5cce011 	strb	lr, [ip, #17]
   13cf0:	e5cc3006 	strb	r3, [ip, #6]
   13cf4:	e7e73456 	ubfx	r3, r6, #8, #8
   13cf8:	e5cc3009 	strb	r3, [ip, #9]
   13cfc:	e7e73856 	ubfx	r3, r6, #16, #8
   13d00:	e5cc300a 	strb	r3, [ip, #10]
   13d04:	e7e73852 	ubfx	r3, r2, #16, #8
   13d08:	e1a02c22 	lsr	r2, r2, #24
   13d0c:	e5cc300e 	strb	r3, [ip, #14]
   13d10:	e5cc200f 	strb	r2, [ip, #15]
   13d14:	e585e020 	str	lr, [r5, #32]
   13d18:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13d1c:	eafff6a6 	b	117bc <CleanAndInvalidateDataCacheRange>
   13d20:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13d24:	e3401001 	movt	r1, #1
   13d28:	e2810e19 	add	r0, r1, #400	@ 0x190
   13d2c:	e3002115 	movw	r2, #277	@ 0x115
   13d30:	ebfffb06 	bl	12950 <assertion_failed>
   13d34:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13d38:	e3401001 	movt	r1, #1
   13d3c:	e2810060 	add	r0, r1, #96	@ 0x60
   13d40:	e300210f 	movw	r2, #271	@ 0x10f
   13d44:	ebfffb01 	bl	12950 <assertion_failed>
   13d48:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13d4c:	e3401001 	movt	r1, #1
   13d50:	e3a02e11 	mov	r2, #272	@ 0x110
   13d54:	e2810074 	add	r0, r1, #116	@ 0x74
   13d58:	ebfffafc 	bl	12950 <assertion_failed>
   13d5c:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13d60:	e3401001 	movt	r1, #1
   13d64:	e2810f4f 	add	r0, r1, #316	@ 0x13c
   13d68:	e3002111 	movw	r2, #273	@ 0x111
   13d6c:	ebfffaf7 	bl	12950 <assertion_failed>
   13d70:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13d74:	e3401001 	movt	r1, #1
   13d78:	e2810e15 	add	r0, r1, #336	@ 0x150
   13d7c:	e3002112 	movw	r2, #274	@ 0x112
   13d80:	ebfffaf2 	bl	12950 <assertion_failed>
   13d84:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13d88:	e3401001 	movt	r1, #1
   13d8c:	e2810f5a 	add	r0, r1, #360	@ 0x168
   13d90:	e3002113 	movw	r2, #275	@ 0x113
   13d94:	ebfffaed 	bl	12950 <assertion_failed>
   13d98:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13d9c:	e3401001 	movt	r1, #1
   13da0:	e3a02f45 	mov	r2, #276	@ 0x114
   13da4:	e2810f5e 	add	r0, r1, #376	@ 0x178
   13da8:	ebfffae8 	bl	12950 <assertion_failed>
   13dac:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13db0:	e3401001 	movt	r1, #1
   13db4:	e2810090 	add	r0, r1, #144	@ 0x90
   13db8:	e3002116 	movw	r2, #278	@ 0x116
   13dbc:	ebfffae3 	bl	12950 <assertion_failed>
   13dc0:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13dc4:	e3401001 	movt	r1, #1
   13dc8:	e3a02f46 	mov	r2, #280	@ 0x118
   13dcc:	e2810f6a 	add	r0, r1, #424	@ 0x1a8
   13dd0:	ebfffade 	bl	12950 <assertion_failed>
   13dd4:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13dd8:	e3401001 	movt	r1, #1
   13ddc:	e28100a4 	add	r0, r1, #164	@ 0xa4
   13de0:	e300211a 	movw	r2, #282	@ 0x11a
   13de4:	ebfffad9 	bl	12950 <assertion_failed>

00013de8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   13de8:	e92d4070 	push	{r4, r5, r6, lr}
   13dec:	e1a05001 	mov	r5, r1
   13df0:	e5901000 	ldr	r1, [r0]
   13df4:	e351000c 	cmp	r1, #12
   13df8:	8a000014 	bhi	13e50 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x68>
   13dfc:	e1a04000 	mov	r4, r0
   13e00:	e590000c 	ldr	r0, [r0, #12]
   13e04:	e3500000 	cmp	r0, #0
   13e08:	0a000015 	beq	13e64 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x7c>
   13e0c:	e5d43010 	ldrb	r3, [r4, #16]
   13e10:	e1a06002 	mov	r6, r2
   13e14:	e3530000 	cmp	r3, #0
   13e18:	0a000004 	beq	13e30 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   13e1c:	e3550000 	cmp	r5, #0
   13e20:	e5845014 	str	r5, [r4, #20]
   13e24:	0a000013 	beq	13e78 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x90>
   13e28:	e5846018 	str	r6, [r4, #24]
   13e2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13e30:	e1a03004 	mov	r3, r4
   13e34:	e2811010 	add	r1, r1, #16
   13e38:	e30421d8 	movw	r2, #16856	@ 0x41d8
   13e3c:	e3402001 	movt	r2, #1
   13e40:	ebfff934 	bl	12318 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13e44:	e3a03001 	mov	r3, #1
   13e48:	e5c43010 	strb	r3, [r4, #16]
   13e4c:	eafffff2 	b	13e1c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   13e50:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13e54:	e3401001 	movt	r1, #1
   13e58:	e2810e1e 	add	r0, r1, #480	@ 0x1e0
   13e5c:	e3002139 	movw	r2, #313	@ 0x139
   13e60:	ebfffaba 	bl	12950 <assertion_failed>
   13e64:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13e68:	e3401001 	movt	r1, #1
   13e6c:	e2810f7f 	add	r0, r1, #508	@ 0x1fc
   13e70:	e300213a 	movw	r2, #314	@ 0x13a
   13e74:	ebfffab5 	bl	12950 <assertion_failed>
   13e78:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13e7c:	e3401001 	movt	r1, #1
   13e80:	e3a02f51 	mov	r2, #324	@ 0x144
   13e84:	e2810f85 	add	r0, r1, #532	@ 0x214
   13e88:	ebfffab0 	bl	12950 <assertion_failed>

00013e8c <CDMAChannel::Start()>:
   13e8c:	e5902000 	ldr	r2, [r0]
   13e90:	e92d4010 	push	{r4, lr}
   13e94:	e352000b 	cmp	r2, #11
   13e98:	8a000038 	bhi	13f80 <CDMAChannel::Start()+0xf4>
   13e9c:	e1a04000 	mov	r4, r0
   13ea0:	e5900008 	ldr	r0, [r0, #8]
   13ea4:	e3500000 	cmp	r0, #0
   13ea8:	0a000039 	beq	13f94 <CDMAChannel::Start()+0x108>
   13eac:	e5943014 	ldr	r3, [r4, #20]
   13eb0:	e3530000 	cmp	r3, #0
   13eb4:	0a000014 	beq	13f0c <CDMAChannel::Start()+0x80>
   13eb8:	e594300c 	ldr	r3, [r4, #12]
   13ebc:	e3530000 	cmp	r3, #0
   13ec0:	0a000042 	beq	13fd0 <CDMAChannel::Start()+0x144>
   13ec4:	e5d43010 	ldrb	r3, [r4, #16]
   13ec8:	e3530000 	cmp	r3, #0
   13ecc:	0a000026 	beq	13f6c <CDMAChannel::Start()+0xe0>
   13ed0:	e5d01001 	ldrb	r1, [r0, #1]
   13ed4:	e5d03000 	ldrb	r3, [r0]
   13ed8:	e1833401 	orr	r3, r3, r1, lsl #8
   13edc:	e5d01002 	ldrb	r1, [r0, #2]
   13ee0:	e1833801 	orr	r3, r3, r1, lsl #16
   13ee4:	e5d01003 	ldrb	r1, [r0, #3]
   13ee8:	e1833c01 	orr	r3, r3, r1, lsl #24
   13eec:	e3833001 	orr	r3, r3, #1
   13ef0:	e5c03000 	strb	r3, [r0]
   13ef4:	e7e71453 	ubfx	r1, r3, #8, #8
   13ef8:	e5c01001 	strb	r1, [r0, #1]
   13efc:	e7e71853 	ubfx	r1, r3, #16, #8
   13f00:	e1a03c23 	lsr	r3, r3, #24
   13f04:	e5c01002 	strb	r1, [r0, #2]
   13f08:	e5c03003 	strb	r3, [r0, #3]
   13f0c:	e282383f 	add	r3, r2, #4128768	@ 0x3f0000
   13f10:	e2833070 	add	r3, r3, #112	@ 0x70
   13f14:	e1a03403 	lsl	r3, r3, #8
   13f18:	e5931000 	ldr	r1, [r3]
   13f1c:	e3110004 	tst	r1, #4
   13f20:	1a000020 	bne	13fa8 <CDMAChannel::Start()+0x11c>
   13f24:	e3a01a07 	mov	r1, #28672	@ 0x7000
   13f28:	e3431f00 	movt	r1, #16128	@ 0x3f00
   13f2c:	e3a0c001 	mov	ip, #1
   13f30:	e5911fe0 	ldr	r1, [r1, #4064]	@ 0xfe0
   13f34:	e011121c 	ands	r1, r1, ip, lsl r2
   13f38:	1a00001f 	bne	13fbc <CDMAChannel::Start()+0x130>
   13f3c:	e3802103 	orr	r2, r0, #-1073741824	@ 0xc0000000
   13f40:	e3a01020 	mov	r1, #32
   13f44:	e5832004 	str	r2, [r3, #4]
   13f48:	ebfff61b 	bl	117bc <CleanAndInvalidateDataCacheRange>
   13f4c:	e5943000 	ldr	r3, [r4]
   13f50:	e3a02001 	mov	r2, #1
   13f54:	e34120f1 	movt	r2, #4337	@ 0x10f1
   13f58:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   13f5c:	e2833070 	add	r3, r3, #112	@ 0x70
   13f60:	e1a03403 	lsl	r3, r3, #8
   13f64:	e5832000 	str	r2, [r3]
   13f68:	e8bd8010 	pop	{r4, pc}
   13f6c:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13f70:	e3401001 	movt	r1, #1
   13f74:	e2810e23 	add	r0, r1, #560	@ 0x230
   13f78:	e300215a 	movw	r2, #346	@ 0x15a
   13f7c:	ebfffa73 	bl	12950 <assertion_failed>
   13f80:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13f84:	e3401001 	movt	r1, #1
   13f88:	e3a02f55 	mov	r2, #340	@ 0x154
   13f8c:	e2810030 	add	r0, r1, #48	@ 0x30
   13f90:	ebfffa6e 	bl	12950 <assertion_failed>
   13f94:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13f98:	e3401001 	movt	r1, #1
   13f9c:	e28100a4 	add	r0, r1, #164	@ 0xa4
   13fa0:	e3002155 	movw	r2, #341	@ 0x155
   13fa4:	ebfffa69 	bl	12950 <assertion_failed>
   13fa8:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13fac:	e3401001 	movt	r1, #1
   13fb0:	e3a02e16 	mov	r2, #352	@ 0x160
   13fb4:	e2810d09 	add	r0, r1, #576	@ 0x240
   13fb8:	ebfffa64 	bl	12950 <assertion_failed>
   13fbc:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13fc0:	e3401001 	movt	r1, #1
   13fc4:	e2810f9d 	add	r0, r1, #628	@ 0x274
   13fc8:	e3002161 	movw	r2, #353	@ 0x161
   13fcc:	ebfffa5f 	bl	12950 <assertion_failed>
   13fd0:	e30710ac 	movw	r1, #28844	@ 0x70ac
   13fd4:	e3401001 	movt	r1, #1
   13fd8:	e2810f7f 	add	r0, r1, #508	@ 0x1fc
   13fdc:	e3002159 	movw	r2, #345	@ 0x159
   13fe0:	ebfffa5a 	bl	12950 <assertion_failed>

00013fe4 <CDMAChannel::Wait()>:
   13fe4:	e5902000 	ldr	r2, [r0]
   13fe8:	e92d4010 	push	{r4, lr}
   13fec:	e352000b 	cmp	r2, #11
   13ff0:	8a000014 	bhi	14048 <CDMAChannel::Wait()+0x64>
   13ff4:	e5903014 	ldr	r3, [r0, #20]
   13ff8:	e1a04000 	mov	r4, r0
   13ffc:	e3530000 	cmp	r3, #0
   14000:	0282283f 	addeq	r2, r2, #4128768	@ 0x3f0000
   14004:	02822070 	addeq	r2, r2, #112	@ 0x70
   14008:	01a02402 	lsleq	r2, r2, #8
   1400c:	1a000012 	bne	1405c <CDMAChannel::Wait()+0x78>
   14010:	e5923000 	ldr	r3, [r2]
   14014:	e3130001 	tst	r3, #1
   14018:	1afffffc 	bne	14010 <CDMAChannel::Wait()+0x2c>
   1401c:	e5942020 	ldr	r2, [r4, #32]
   14020:	e2233c01 	eor	r3, r3, #256	@ 0x100
   14024:	e3520000 	cmp	r2, #0
   14028:	e7e00453 	ubfx	r0, r3, #8, #1
   1402c:	e5c4001c 	strb	r0, [r4, #28]
   14030:	08bd8010 	popeq	{r4, pc}
   14034:	e1a00002 	mov	r0, r2
   14038:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
   1403c:	ebfff5de 	bl	117bc <CleanAndInvalidateDataCacheRange>
   14040:	e5d4001c 	ldrb	r0, [r4, #28]
   14044:	e8bd8010 	pop	{r4, pc}
   14048:	e30710ac 	movw	r1, #28844	@ 0x70ac
   1404c:	e3401001 	movt	r1, #1
   14050:	e3a02f5e 	mov	r2, #376	@ 0x178
   14054:	e2810030 	add	r0, r1, #48	@ 0x30
   14058:	ebfffa3c 	bl	12950 <assertion_failed>
   1405c:	e30710ac 	movw	r1, #28844	@ 0x70ac
   14060:	e3401001 	movt	r1, #1
   14064:	e2810faa 	add	r0, r1, #680	@ 0x2a8
   14068:	e3002179 	movw	r2, #377	@ 0x179
   1406c:	ebfffa37 	bl	12950 <assertion_failed>

00014070 <CDMAChannel::GetStatus()>:
   14070:	e5903000 	ldr	r3, [r0]
   14074:	e92d4010 	push	{r4, lr}
   14078:	e353000b 	cmp	r3, #11
   1407c:	8a000007 	bhi	140a0 <CDMAChannel::GetStatus()+0x30>
   14080:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   14084:	e2833070 	add	r3, r3, #112	@ 0x70
   14088:	e1a03403 	lsl	r3, r3, #8
   1408c:	e5933000 	ldr	r3, [r3]
   14090:	e3130001 	tst	r3, #1
   14094:	1a000006 	bne	140b4 <CDMAChannel::GetStatus()+0x44>
   14098:	e5d0001c 	ldrb	r0, [r0, #28]
   1409c:	e8bd8010 	pop	{r4, pc}
   140a0:	e30710ac 	movw	r1, #28844	@ 0x70ac
   140a4:	e3401001 	movt	r1, #1
   140a8:	e3a02f66 	mov	r2, #408	@ 0x198
   140ac:	e2810030 	add	r0, r1, #48	@ 0x30
   140b0:	ebfffa26 	bl	12950 <assertion_failed>
   140b4:	e30710ac 	movw	r1, #28844	@ 0x70ac
   140b8:	e3401001 	movt	r1, #1
   140bc:	e2810fb1 	add	r0, r1, #708	@ 0x2c4
   140c0:	e3002199 	movw	r2, #409	@ 0x199
   140c4:	ebfffa21 	bl	12950 <assertion_failed>

000140c8 <CDMAChannel::InterruptHandler()>:
   140c8:	e92d4010 	push	{r4, lr}
   140cc:	e1a04000 	mov	r4, r0
   140d0:	e5900020 	ldr	r0, [r0, #32]
   140d4:	e3500000 	cmp	r0, #0
   140d8:	1a000020 	bne	14160 <CDMAChannel::InterruptHandler()+0x98>
   140dc:	e5941000 	ldr	r1, [r4]
   140e0:	e351000b 	cmp	r1, #11
   140e4:	8a000022 	bhi	14174 <CDMAChannel::InterruptHandler()+0xac>
   140e8:	e3a02a07 	mov	r2, #28672	@ 0x7000
   140ec:	e3432f00 	movt	r2, #16128	@ 0x3f00
   140f0:	e3a03001 	mov	r3, #1
   140f4:	e5920fe0 	ldr	r0, [r2, #4064]	@ 0xfe0
   140f8:	e1a03113 	lsl	r3, r3, r1
   140fc:	e1130000 	tst	r3, r0
   14100:	0a000020 	beq	14188 <CDMAChannel::InterruptHandler()+0xc0>
   14104:	e5823fe0 	str	r3, [r2, #4064]	@ 0xfe0
   14108:	e5943000 	ldr	r3, [r4]
   1410c:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   14110:	e2833070 	add	r3, r3, #112	@ 0x70
   14114:	e1a03403 	lsl	r3, r3, #8
   14118:	e5931000 	ldr	r1, [r3]
   1411c:	e3110004 	tst	r1, #4
   14120:	0a00001d 	beq	1419c <CDMAChannel::InterruptHandler()+0xd4>
   14124:	e3110001 	tst	r1, #1
   14128:	1a000020 	bne	141b0 <CDMAChannel::InterruptHandler()+0xe8>
   1412c:	e594e014 	ldr	lr, [r4, #20]
   14130:	e2211c01 	eor	r1, r1, #256	@ 0x100
   14134:	e3a02004 	mov	r2, #4
   14138:	e5832000 	str	r2, [r3]
   1413c:	e7e01451 	ubfx	r1, r1, #8, #1
   14140:	e35e0000 	cmp	lr, #0
   14144:	e5c4101c 	strb	r1, [r4, #28]
   14148:	0a00001d 	beq	141c4 <CDMAChannel::InterruptHandler()+0xfc>
   1414c:	e5942018 	ldr	r2, [r4, #24]
   14150:	e1a0300e 	mov	r3, lr
   14154:	e5940000 	ldr	r0, [r4]
   14158:	e8bd4010 	pop	{r4, lr}
   1415c:	e12fff13 	bx	r3
   14160:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
   14164:	ebfff594 	bl	117bc <CleanAndInvalidateDataCacheRange>
   14168:	e5941000 	ldr	r1, [r4]
   1416c:	e351000b 	cmp	r1, #11
   14170:	9affffdc 	bls	140e8 <CDMAChannel::InterruptHandler()+0x20>
   14174:	e30710ac 	movw	r1, #28844	@ 0x70ac
   14178:	e3401001 	movt	r1, #1
   1417c:	e2810030 	add	r0, r1, #48	@ 0x30
   14180:	e30021a7 	movw	r2, #423	@ 0x1a7
   14184:	ebfff9f1 	bl	12950 <assertion_failed>
   14188:	e30710ac 	movw	r1, #28844	@ 0x70ac
   1418c:	e3401001 	movt	r1, #1
   14190:	e2810fbe 	add	r0, r1, #760	@ 0x2f8
   14194:	e30021ad 	movw	r2, #429	@ 0x1ad
   14198:	ebfff9ec 	bl	12950 <assertion_failed>
   1419c:	e30710ac 	movw	r1, #28844	@ 0x70ac
   141a0:	e3401001 	movt	r1, #1
   141a4:	e2810e31 	add	r0, r1, #784	@ 0x310
   141a8:	e30021b1 	movw	r2, #433	@ 0x1b1
   141ac:	ebfff9e7 	bl	12950 <assertion_failed>
   141b0:	e30710ac 	movw	r1, #28844	@ 0x70ac
   141b4:	e3401001 	movt	r1, #1
   141b8:	e2810e32 	add	r0, r1, #800	@ 0x320
   141bc:	e30021b2 	movw	r2, #434	@ 0x1b2
   141c0:	ebfff9e2 	bl	12950 <assertion_failed>
   141c4:	e30710ac 	movw	r1, #28844	@ 0x70ac
   141c8:	e3401001 	movt	r1, #1
   141cc:	e2810f85 	add	r0, r1, #532	@ 0x214
   141d0:	e30021b9 	movw	r2, #441	@ 0x1b9
   141d4:	ebfff9dd 	bl	12950 <assertion_failed>

000141d8 <CDMAChannel::InterruptStub(void*)>:
   141d8:	e3500000 	cmp	r0, #0
   141dc:	0a000000 	beq	141e4 <CDMAChannel::InterruptStub(void*)+0xc>
   141e0:	eaffffb8 	b	140c8 <CDMAChannel::InterruptHandler()>
   141e4:	e30710ac 	movw	r1, #28844	@ 0x70ac
   141e8:	e3401001 	movt	r1, #1
   141ec:	e3a02d07 	mov	r2, #448	@ 0x1c0
   141f0:	e2810fcd 	add	r0, r1, #820	@ 0x334
   141f4:	e92d4010 	push	{r4, lr}
   141f8:	ebfff9d4 	bl	12950 <assertion_failed>

000141fc <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   141fc:	e1a03000 	mov	r3, r0
   14200:	e280c0dc 	add	ip, r0, #220	@ 0xdc
   14204:	e3a02000 	mov	r2, #0
   14208:	e5801000 	str	r1, [r0]
   1420c:	e5e32004 	strb	r2, [r3, #4]!
   14210:	e5a32004 	str	r2, [r3, #4]!
   14214:	e153000c 	cmp	r3, ip
   14218:	1afffffc 	bne	14210 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x14>
   1421c:	e12fff1e 	bx	lr

00014220 <CGPIOManager::~CGPIOManager()>:
   14220:	e92d4010 	push	{r4, lr}
   14224:	e2803004 	add	r3, r0, #4
   14228:	e1a04000 	mov	r4, r0
   1422c:	e28010dc 	add	r1, r0, #220	@ 0xdc
   14230:	ea000001 	b	1423c <CGPIOManager::~CGPIOManager()+0x1c>
   14234:	e1530001 	cmp	r3, r1
   14238:	0a000008 	beq	14260 <CGPIOManager::~CGPIOManager()+0x40>
   1423c:	e5b32004 	ldr	r2, [r3, #4]!
   14240:	e3520000 	cmp	r2, #0
   14244:	0afffffa 	beq	14234 <CGPIOManager::~CGPIOManager()+0x14>
   14248:	e30713ec 	movw	r1, #29676	@ 0x73ec
   1424c:	e3401001 	movt	r1, #1
   14250:	e30703fc 	movw	r0, #29692	@ 0x73fc
   14254:	e3400001 	movt	r0, #1
   14258:	e3a0202c 	mov	r2, #44	@ 0x2c
   1425c:	ebfff9bb 	bl	12950 <assertion_failed>
   14260:	e5d43004 	ldrb	r3, [r4, #4]
   14264:	e3530000 	cmp	r3, #0
   14268:	0a000004 	beq	14280 <CGPIOManager::~CGPIOManager()+0x60>
   1426c:	e5940000 	ldr	r0, [r4]
   14270:	e3500000 	cmp	r0, #0
   14274:	0a000003 	beq	14288 <CGPIOManager::~CGPIOManager()+0x68>
   14278:	e3a01034 	mov	r1, #52	@ 0x34
   1427c:	ebfff858 	bl	123e4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   14280:	e1a00004 	mov	r0, r4
   14284:	e8bd8010 	pop	{r4, pc}
   14288:	e30713ec 	movw	r1, #29676	@ 0x73ec
   1428c:	e3401001 	movt	r1, #1
   14290:	e3070410 	movw	r0, #29712	@ 0x7410
   14294:	e3400001 	movt	r0, #1
   14298:	e3a02032 	mov	r2, #50	@ 0x32
   1429c:	ebfff9ab 	bl	12950 <assertion_failed>

000142a0 <CGPIOManager::Initialize()>:
   142a0:	e5d03004 	ldrb	r3, [r0, #4]
   142a4:	e92d4010 	push	{r4, lr}
   142a8:	e3530000 	cmp	r3, #0
   142ac:	1a00000b 	bne	142e0 <CGPIOManager::Initialize()+0x40>
   142b0:	e1a04000 	mov	r4, r0
   142b4:	e5900000 	ldr	r0, [r0]
   142b8:	e3500000 	cmp	r0, #0
   142bc:	0a00000d 	beq	142f8 <CGPIOManager::Initialize()+0x58>
   142c0:	e1a03004 	mov	r3, r4
   142c4:	e3a01034 	mov	r1, #52	@ 0x34
   142c8:	e3042520 	movw	r2, #17696	@ 0x4520
   142cc:	e3402001 	movt	r2, #1
   142d0:	ebfff810 	bl	12318 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   142d4:	e3a00001 	mov	r0, #1
   142d8:	e5c40004 	strb	r0, [r4, #4]
   142dc:	e8bd8010 	pop	{r4, pc}
   142e0:	e30713ec 	movw	r1, #29676	@ 0x73ec
   142e4:	e3401001 	movt	r1, #1
   142e8:	e3070424 	movw	r0, #29732	@ 0x7424
   142ec:	e3400001 	movt	r0, #1
   142f0:	e3a0203b 	mov	r2, #59	@ 0x3b
   142f4:	ebfff995 	bl	12950 <assertion_failed>
   142f8:	e30713ec 	movw	r1, #29676	@ 0x73ec
   142fc:	e3401001 	movt	r1, #1
   14300:	e3070410 	movw	r0, #29712	@ 0x7410
   14304:	e3400001 	movt	r0, #1
   14308:	e3a0203c 	mov	r2, #60	@ 0x3c
   1430c:	ebfff98f 	bl	12950 <assertion_failed>

00014310 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   14310:	e5d03004 	ldrb	r3, [r0, #4]
   14314:	e92d4010 	push	{r4, lr}
   14318:	e3530000 	cmp	r3, #0
   1431c:	0a00000a 	beq	1434c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   14320:	e3510000 	cmp	r1, #0
   14324:	0a00000e 	beq	14364 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   14328:	e5913004 	ldr	r3, [r1, #4]
   1432c:	e3530035 	cmp	r3, #53	@ 0x35
   14330:	8a000011 	bhi	1437c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   14334:	e0800103 	add	r0, r0, r3, lsl #2
   14338:	e5903008 	ldr	r3, [r0, #8]
   1433c:	e3530000 	cmp	r3, #0
   14340:	1a000013 	bne	14394 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   14344:	e5801008 	str	r1, [r0, #8]
   14348:	e8bd8010 	pop	{r4, pc}
   1434c:	e30713ec 	movw	r1, #29676	@ 0x73ec
   14350:	e3401001 	movt	r1, #1
   14354:	e3070438 	movw	r0, #29752	@ 0x7438
   14358:	e3400001 	movt	r0, #1
   1435c:	e3a02045 	mov	r2, #69	@ 0x45
   14360:	ebfff97a 	bl	12950 <assertion_failed>
   14364:	e30713ec 	movw	r1, #29676	@ 0x73ec
   14368:	e3401001 	movt	r1, #1
   1436c:	e3070448 	movw	r0, #29768	@ 0x7448
   14370:	e3400001 	movt	r0, #1
   14374:	e3a02047 	mov	r2, #71	@ 0x47
   14378:	ebfff974 	bl	12950 <assertion_failed>
   1437c:	e30713ec 	movw	r1, #29676	@ 0x73ec
   14380:	e3401001 	movt	r1, #1
   14384:	e3070454 	movw	r0, #29780	@ 0x7454
   14388:	e3400001 	movt	r0, #1
   1438c:	e3a02049 	mov	r2, #73	@ 0x49
   14390:	ebfff96e 	bl	12950 <assertion_failed>
   14394:	e30713ec 	movw	r1, #29676	@ 0x73ec
   14398:	e3401001 	movt	r1, #1
   1439c:	e30703fc 	movw	r0, #29692	@ 0x73fc
   143a0:	e3400001 	movt	r0, #1
   143a4:	e3a0204b 	mov	r2, #75	@ 0x4b
   143a8:	ebfff968 	bl	12950 <assertion_failed>

000143ac <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   143ac:	e5d03004 	ldrb	r3, [r0, #4]
   143b0:	e92d4010 	push	{r4, lr}
   143b4:	e3530000 	cmp	r3, #0
   143b8:	0a00000b 	beq	143ec <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   143bc:	e3510000 	cmp	r1, #0
   143c0:	0a00000f 	beq	14404 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x58>
   143c4:	e5913004 	ldr	r3, [r1, #4]
   143c8:	e3530035 	cmp	r3, #53	@ 0x35
   143cc:	8a000012 	bhi	1441c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   143d0:	e0800103 	add	r0, r0, r3, lsl #2
   143d4:	e5903008 	ldr	r3, [r0, #8]
   143d8:	e3530000 	cmp	r3, #0
   143dc:	0a000014 	beq	14434 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   143e0:	e3a03000 	mov	r3, #0
   143e4:	e5803008 	str	r3, [r0, #8]
   143e8:	e8bd8010 	pop	{r4, pc}
   143ec:	e30713ec 	movw	r1, #29676	@ 0x73ec
   143f0:	e3401001 	movt	r1, #1
   143f4:	e3070438 	movw	r0, #29752	@ 0x7438
   143f8:	e3400001 	movt	r0, #1
   143fc:	e3a02052 	mov	r2, #82	@ 0x52
   14400:	ebfff952 	bl	12950 <assertion_failed>
   14404:	e30713ec 	movw	r1, #29676	@ 0x73ec
   14408:	e3401001 	movt	r1, #1
   1440c:	e3070448 	movw	r0, #29768	@ 0x7448
   14410:	e3400001 	movt	r0, #1
   14414:	e3a02054 	mov	r2, #84	@ 0x54
   14418:	ebfff94c 	bl	12950 <assertion_failed>
   1441c:	e30713ec 	movw	r1, #29676	@ 0x73ec
   14420:	e3401001 	movt	r1, #1
   14424:	e3070454 	movw	r0, #29780	@ 0x7454
   14428:	e3400001 	movt	r0, #1
   1442c:	e3a02056 	mov	r2, #86	@ 0x56
   14430:	ebfff946 	bl	12950 <assertion_failed>
   14434:	e30713ec 	movw	r1, #29676	@ 0x73ec
   14438:	e3401001 	movt	r1, #1
   1443c:	e3070468 	movw	r0, #29800	@ 0x7468
   14440:	e3400001 	movt	r0, #1
   14444:	e3a02058 	mov	r2, #88	@ 0x58
   14448:	ebfff940 	bl	12950 <assertion_failed>

0001444c <CGPIOManager::InterruptHandler()>:
   1444c:	e5d03004 	ldrb	r3, [r0, #4]
   14450:	e92d4070 	push	{r4, r5, r6, lr}
   14454:	e3530000 	cmp	r3, #0
   14458:	0a00002a 	beq	14508 <CGPIOManager::InterruptHandler()+0xbc>
   1445c:	e3a03000 	mov	r3, #0
   14460:	e3433f20 	movt	r3, #16160	@ 0x3f20
   14464:	e3a04000 	mov	r4, #0
   14468:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   1446c:	ea000005 	b	14488 <CGPIOManager::InterruptHandler()+0x3c>
   14470:	e2844001 	add	r4, r4, #1
   14474:	e1a030a3 	lsr	r3, r3, #1
   14478:	e314001f 	tst	r4, #31
   1447c:	0a000011 	beq	144c8 <CGPIOManager::InterruptHandler()+0x7c>
   14480:	e3540036 	cmp	r4, #54	@ 0x36
   14484:	08bd8070 	popeq	{r4, r5, r6, pc}
   14488:	e3130001 	tst	r3, #1
   1448c:	0afffff7 	beq	14470 <CGPIOManager::InterruptHandler()+0x24>
   14490:	e2843002 	add	r3, r4, #2
   14494:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   14498:	e3550000 	cmp	r5, #0
   1449c:	0a00000e 	beq	144dc <CGPIOManager::InterruptHandler()+0x90>
   144a0:	e1a00005 	mov	r0, r5
   144a4:	ebffd4e3 	bl	9838 <CGPIOPin::InterruptHandler()>
   144a8:	e5d53024 	ldrb	r3, [r5, #36]	@ 0x24
   144ac:	e3530000 	cmp	r3, #0
   144b0:	13a03040 	movne	r3, #64	@ 0x40
   144b4:	13433f20 	movtne	r3, #16160	@ 0x3f20
   144b8:	15952008 	ldrne	r2, [r5, #8]
   144bc:	1595100c 	ldrne	r1, [r5, #12]
   144c0:	17821003 	strne	r1, [r2, r3]
   144c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   144c8:	e3a03000 	mov	r3, #0
   144cc:	e3433f20 	movt	r3, #16160	@ 0x3f20
   144d0:	e3a04020 	mov	r4, #32
   144d4:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   144d8:	eaffffea 	b	14488 <CGPIOManager::InterruptHandler()+0x3c>
   144dc:	e1a00004 	mov	r0, r4
   144e0:	ebffd4f3 	bl	98b4 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   144e4:	e3a03010 	mov	r3, #16
   144e8:	e3403fc8 	movt	r3, #4040	@ 0xfc8
   144ec:	e204101f 	and	r1, r4, #31
   144f0:	e08332a4 	add	r3, r3, r4, lsr #5
   144f4:	e3a02001 	mov	r2, #1
   144f8:	e1a03103 	lsl	r3, r3, #2
   144fc:	e1a02112 	lsl	r2, r2, r1
   14500:	e5832000 	str	r2, [r3]
   14504:	e8bd8070 	pop	{r4, r5, r6, pc}
   14508:	e30713ec 	movw	r1, #29676	@ 0x73ec
   1450c:	e3401001 	movt	r1, #1
   14510:	e3070438 	movw	r0, #29752	@ 0x7438
   14514:	e3400001 	movt	r0, #1
   14518:	e3a0205e 	mov	r2, #94	@ 0x5e
   1451c:	ebfff90b 	bl	12950 <assertion_failed>

00014520 <CGPIOManager::InterruptStub(void*)>:
   14520:	e3500000 	cmp	r0, #0
   14524:	0a000000 	beq	1452c <CGPIOManager::InterruptStub(void*)+0xc>
   14528:	eaffffc7 	b	1444c <CGPIOManager::InterruptHandler()>
   1452c:	e30713ec 	movw	r1, #29676	@ 0x73ec
   14530:	e3401001 	movt	r1, #1
   14534:	e307047c 	movw	r0, #29820	@ 0x747c
   14538:	e3400001 	movt	r0, #1
   1453c:	e3a0208e 	mov	r2, #142	@ 0x8e
   14540:	e92d4010 	push	{r4, lr}
   14544:	ebfff901 	bl	12950 <assertion_failed>

00014548 <CPtrList::CPtrList()>:
   14548:	e3a02000 	mov	r2, #0
   1454c:	e5802000 	str	r2, [r0]
   14550:	e12fff1e 	bx	lr

00014554 <CPtrList::~CPtrList()>:
   14554:	e5903000 	ldr	r3, [r0]
   14558:	e3530000 	cmp	r3, #0
   1455c:	012fff1e 	bxeq	lr
   14560:	e3071488 	movw	r1, #29832	@ 0x7488
   14564:	e3401001 	movt	r1, #1
   14568:	e3070494 	movw	r0, #29844	@ 0x7494
   1456c:	e3400001 	movt	r0, #1
   14570:	e3a0202a 	mov	r2, #42	@ 0x2a
   14574:	e92d4010 	push	{r4, lr}
   14578:	ebfff8f4 	bl	12950 <assertion_failed>

0001457c <CPtrList::GetFirst()>:
   1457c:	e5900000 	ldr	r0, [r0]
   14580:	e12fff1e 	bx	lr

00014584 <CPtrList::GetNext(TPtrListElement*)>:
   14584:	e3510000 	cmp	r1, #0
   14588:	e92d4010 	push	{r4, lr}
   1458c:	0a000006 	beq	145ac <CPtrList::GetNext(TPtrListElement*)+0x28>
   14590:	e5912000 	ldr	r2, [r1]
   14594:	e3043d43 	movw	r3, #19779	@ 0x4d43
   14598:	e345304c 	movt	r3, #20556	@ 0x504c
   1459c:	e1520003 	cmp	r2, r3
   145a0:	1a000007 	bne	145c4 <CPtrList::GetNext(TPtrListElement*)+0x40>
   145a4:	e5910008 	ldr	r0, [r1, #8]
   145a8:	e8bd8010 	pop	{r4, pc}
   145ac:	e3071488 	movw	r1, #29832	@ 0x7488
   145b0:	e3401001 	movt	r1, #1
   145b4:	e3070074 	movw	r0, #28788	@ 0x7074
   145b8:	e3400001 	movt	r0, #1
   145bc:	e3a02034 	mov	r2, #52	@ 0x34
   145c0:	ebfff8e2 	bl	12950 <assertion_failed>
   145c4:	e3071488 	movw	r1, #29832	@ 0x7488
   145c8:	e3401001 	movt	r1, #1
   145cc:	e30704a4 	movw	r0, #29860	@ 0x74a4
   145d0:	e3400001 	movt	r0, #1
   145d4:	e3a02035 	mov	r2, #53	@ 0x35
   145d8:	ebfff8dc 	bl	12950 <assertion_failed>

000145dc <CPtrList::GetPtr(TPtrListElement*)>:
   145dc:	e3510000 	cmp	r1, #0
   145e0:	e92d4010 	push	{r4, lr}
   145e4:	0a000006 	beq	14604 <CPtrList::GetPtr(TPtrListElement*)+0x28>
   145e8:	e5912000 	ldr	r2, [r1]
   145ec:	e3043d43 	movw	r3, #19779	@ 0x4d43
   145f0:	e345304c 	movt	r3, #20556	@ 0x504c
   145f4:	e1520003 	cmp	r2, r3
   145f8:	1a000007 	bne	1461c <CPtrList::GetPtr(TPtrListElement*)+0x40>
   145fc:	e591000c 	ldr	r0, [r1, #12]
   14600:	e8bd8010 	pop	{r4, pc}
   14604:	e3071488 	movw	r1, #29832	@ 0x7488
   14608:	e3401001 	movt	r1, #1
   1460c:	e3070074 	movw	r0, #28788	@ 0x7074
   14610:	e3400001 	movt	r0, #1
   14614:	e3a0203c 	mov	r2, #60	@ 0x3c
   14618:	ebfff8cc 	bl	12950 <assertion_failed>
   1461c:	e3071488 	movw	r1, #29832	@ 0x7488
   14620:	e3401001 	movt	r1, #1
   14624:	e30704a4 	movw	r0, #29860	@ 0x74a4
   14628:	e3400001 	movt	r0, #1
   1462c:	e3a0203d 	mov	r2, #61	@ 0x3d
   14630:	ebfff8c6 	bl	12950 <assertion_failed>

00014634 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   14634:	e92d4070 	push	{r4, r5, r6, lr}
   14638:	e1a05000 	mov	r5, r0
   1463c:	e3a00010 	mov	r0, #16
   14640:	e1a06002 	mov	r6, r2
   14644:	e1a04001 	mov	r4, r1
   14648:	ebfff2b3 	bl	1111c <operator new(unsigned int)>
   1464c:	e5952000 	ldr	r2, [r5]
   14650:	e3043d43 	movw	r3, #19779	@ 0x4d43
   14654:	e345304c 	movt	r3, #20556	@ 0x504c
   14658:	e3520000 	cmp	r2, #0
   1465c:	e5803000 	str	r3, [r0]
   14660:	e580600c 	str	r6, [r0, #12]
   14664:	0a000016 	beq	146c4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   14668:	e3540000 	cmp	r4, #0
   1466c:	0a00001a 	beq	146dc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   14670:	e5941000 	ldr	r1, [r4]
   14674:	e1510003 	cmp	r1, r3
   14678:	1a00001d 	bne	146f4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   1467c:	e1520004 	cmp	r2, r4
   14680:	0a000009 	beq	146ac <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   14684:	e5943004 	ldr	r3, [r4, #4]
   14688:	e9800018 	stmib	r0, {r3, r4}
   1468c:	e3530000 	cmp	r3, #0
   14690:	0a000003 	beq	146a4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   14694:	e5932000 	ldr	r2, [r3]
   14698:	e1520001 	cmp	r2, r1
   1469c:	05830008 	streq	r0, [r3, #8]
   146a0:	1a000019 	bne	1470c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   146a4:	e5840004 	str	r0, [r4, #4]
   146a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   146ac:	e3a03000 	mov	r3, #0
   146b0:	e5820004 	str	r0, [r2, #4]
   146b4:	e5803004 	str	r3, [r0, #4]
   146b8:	e5802008 	str	r2, [r0, #8]
   146bc:	e5850000 	str	r0, [r5]
   146c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   146c4:	e3071488 	movw	r1, #29832	@ 0x7488
   146c8:	e3401001 	movt	r1, #1
   146cc:	e30704c8 	movw	r0, #29896	@ 0x74c8
   146d0:	e3400001 	movt	r0, #1
   146d4:	e3a0204c 	mov	r2, #76	@ 0x4c
   146d8:	ebfff89c 	bl	12950 <assertion_failed>
   146dc:	e3071488 	movw	r1, #29832	@ 0x7488
   146e0:	e3401001 	movt	r1, #1
   146e4:	e30704d8 	movw	r0, #29912	@ 0x74d8
   146e8:	e3400001 	movt	r0, #1
   146ec:	e3a0204d 	mov	r2, #77	@ 0x4d
   146f0:	ebfff896 	bl	12950 <assertion_failed>
   146f4:	e3071488 	movw	r1, #29832	@ 0x7488
   146f8:	e3401001 	movt	r1, #1
   146fc:	e30704e4 	movw	r0, #29924	@ 0x74e4
   14700:	e3400001 	movt	r0, #1
   14704:	e3a0204e 	mov	r2, #78	@ 0x4e
   14708:	ebfff890 	bl	12950 <assertion_failed>
   1470c:	e3071488 	movw	r1, #29832	@ 0x7488
   14710:	e3401001 	movt	r1, #1
   14714:	e3070508 	movw	r0, #29960	@ 0x7508
   14718:	e3400001 	movt	r0, #1
   1471c:	e3a02060 	mov	r2, #96	@ 0x60
   14720:	ebfff88a 	bl	12950 <assertion_failed>

00014724 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   14724:	e92d4070 	push	{r4, r5, r6, lr}
   14728:	e1a04001 	mov	r4, r1
   1472c:	e1a05000 	mov	r5, r0
   14730:	e3a00010 	mov	r0, #16
   14734:	e1a06002 	mov	r6, r2
   14738:	ebfff277 	bl	1111c <operator new(unsigned int)>
   1473c:	e3043d43 	movw	r3, #19779	@ 0x4d43
   14740:	e345304c 	movt	r3, #20556	@ 0x504c
   14744:	e3540000 	cmp	r4, #0
   14748:	e5803000 	str	r3, [r0]
   1474c:	e580600c 	str	r6, [r0, #12]
   14750:	0a000010 	beq	14798 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   14754:	e5952000 	ldr	r2, [r5]
   14758:	e3520000 	cmp	r2, #0
   1475c:	0a000014 	beq	147b4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
   14760:	e5942000 	ldr	r2, [r4]
   14764:	e1520003 	cmp	r2, r3
   14768:	1a000017 	bne	147cc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa8>
   1476c:	e5943008 	ldr	r3, [r4, #8]
   14770:	e5804004 	str	r4, [r0, #4]
   14774:	e3530000 	cmp	r3, #0
   14778:	e5803008 	str	r3, [r0, #8]
   1477c:	0a000003 	beq	14790 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   14780:	e5931000 	ldr	r1, [r3]
   14784:	e1510002 	cmp	r1, r2
   14788:	05830004 	streq	r0, [r3, #4]
   1478c:	1a000014 	bne	147e4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   14790:	e5840008 	str	r0, [r4, #8]
   14794:	e8bd8070 	pop	{r4, r5, r6, pc}
   14798:	e5953000 	ldr	r3, [r5]
   1479c:	e3530000 	cmp	r3, #0
   147a0:	1a000015 	bne	147fc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   147a4:	e5803004 	str	r3, [r0, #4]
   147a8:	e5803008 	str	r3, [r0, #8]
   147ac:	e5850000 	str	r0, [r5]
   147b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   147b4:	e3071488 	movw	r1, #29832	@ 0x7488
   147b8:	e3401001 	movt	r1, #1
   147bc:	e30704c8 	movw	r0, #29896	@ 0x74c8
   147c0:	e3400001 	movt	r0, #1
   147c4:	e3a0207d 	mov	r2, #125	@ 0x7d
   147c8:	ebfff860 	bl	12950 <assertion_failed>
   147cc:	e3071488 	movw	r1, #29832	@ 0x7488
   147d0:	e3401001 	movt	r1, #1
   147d4:	e3070530 	movw	r0, #30000	@ 0x7530
   147d8:	e3400001 	movt	r0, #1
   147dc:	e3a0207e 	mov	r2, #126	@ 0x7e
   147e0:	ebfff85a 	bl	12950 <assertion_failed>
   147e4:	e3071488 	movw	r1, #29832	@ 0x7488
   147e8:	e3401001 	movt	r1, #1
   147ec:	e3070554 	movw	r0, #30036	@ 0x7554
   147f0:	e3400001 	movt	r0, #1
   147f4:	e3a02085 	mov	r2, #133	@ 0x85
   147f8:	ebfff854 	bl	12950 <assertion_failed>
   147fc:	e3071488 	movw	r1, #29832	@ 0x7488
   14800:	e3401001 	movt	r1, #1
   14804:	e3070494 	movw	r0, #29844	@ 0x7494
   14808:	e3400001 	movt	r0, #1
   1480c:	e3a02074 	mov	r2, #116	@ 0x74
   14810:	ebfff84e 	bl	12950 <assertion_failed>

00014814 <CPtrList::Remove(TPtrListElement*)>:
   14814:	e1a03000 	mov	r3, r0
   14818:	e92d4010 	push	{r4, lr}
   1481c:	e2510000 	subs	r0, r1, #0
   14820:	0a00002d 	beq	148dc <CPtrList::Remove(TPtrListElement*)+0xc8>
   14824:	e5901000 	ldr	r1, [r0]
   14828:	e3042d43 	movw	r2, #19779	@ 0x4d43
   1482c:	e345204c 	movt	r2, #20556	@ 0x504c
   14830:	e1510002 	cmp	r1, r2
   14834:	1a00002e 	bne	148f4 <CPtrList::Remove(TPtrListElement*)+0xe0>
   14838:	e5932000 	ldr	r2, [r3]
   1483c:	e1520000 	cmp	r2, r0
   14840:	0a000010 	beq	14888 <CPtrList::Remove(TPtrListElement*)+0x74>
   14844:	e5903004 	ldr	r3, [r0, #4]
   14848:	e3530000 	cmp	r3, #0
   1484c:	0a00002e 	beq	1490c <CPtrList::Remove(TPtrListElement*)+0xf8>
   14850:	e593c000 	ldr	ip, [r3]
   14854:	e15c0001 	cmp	ip, r1
   14858:	1a000019 	bne	148c4 <CPtrList::Remove(TPtrListElement*)+0xb0>
   1485c:	e5902008 	ldr	r2, [r0, #8]
   14860:	e5832008 	str	r2, [r3, #8]
   14864:	e3520000 	cmp	r2, #0
   14868:	0a000003 	beq	1487c <CPtrList::Remove(TPtrListElement*)+0x68>
   1486c:	e5921000 	ldr	r1, [r2]
   14870:	e151000c 	cmp	r1, ip
   14874:	05823004 	streq	r3, [r2, #4]
   14878:	1a000029 	bne	14924 <CPtrList::Remove(TPtrListElement*)+0x110>
   1487c:	e8bd4010 	pop	{r4, lr}
   14880:	e3a01010 	mov	r1, #16
   14884:	eafff23c 	b	1117c <operator delete(void*, unsigned int)>
   14888:	e5922008 	ldr	r2, [r2, #8]
   1488c:	e5832000 	str	r2, [r3]
   14890:	e3520000 	cmp	r2, #0
   14894:	0afffff8 	beq	1487c <CPtrList::Remove(TPtrListElement*)+0x68>
   14898:	e5923000 	ldr	r3, [r2]
   1489c:	e1530001 	cmp	r3, r1
   148a0:	03a03000 	moveq	r3, #0
   148a4:	05823004 	streq	r3, [r2, #4]
   148a8:	0afffff3 	beq	1487c <CPtrList::Remove(TPtrListElement*)+0x68>
   148ac:	e3071488 	movw	r1, #29832	@ 0x7488
   148b0:	e3401001 	movt	r1, #1
   148b4:	e3070580 	movw	r0, #30080	@ 0x7580
   148b8:	e3400001 	movt	r0, #1
   148bc:	e3a02098 	mov	r2, #152	@ 0x98
   148c0:	ebfff822 	bl	12950 <assertion_failed>
   148c4:	e3071488 	movw	r1, #29832	@ 0x7488
   148c8:	e3401001 	movt	r1, #1
   148cc:	e30705c4 	movw	r0, #30148	@ 0x75c4
   148d0:	e3400001 	movt	r0, #1
   148d4:	e3a0209f 	mov	r2, #159	@ 0x9f
   148d8:	ebfff81c 	bl	12950 <assertion_failed>
   148dc:	e3071488 	movw	r1, #29832	@ 0x7488
   148e0:	e3401001 	movt	r1, #1
   148e4:	e3070074 	movw	r0, #28788	@ 0x7074
   148e8:	e3400001 	movt	r0, #1
   148ec:	e3a0208f 	mov	r2, #143	@ 0x8f
   148f0:	ebfff816 	bl	12950 <assertion_failed>
   148f4:	e3071488 	movw	r1, #29832	@ 0x7488
   148f8:	e3401001 	movt	r1, #1
   148fc:	e30704a4 	movw	r0, #29860	@ 0x74a4
   14900:	e3400001 	movt	r0, #1
   14904:	e3a02090 	mov	r2, #144	@ 0x90
   14908:	ebfff810 	bl	12950 <assertion_failed>
   1490c:	e3071488 	movw	r1, #29832	@ 0x7488
   14910:	e3401001 	movt	r1, #1
   14914:	e30705ac 	movw	r0, #30124	@ 0x75ac
   14918:	e3400001 	movt	r0, #1
   1491c:	e3a0209e 	mov	r2, #158	@ 0x9e
   14920:	ebfff80a 	bl	12950 <assertion_failed>
   14924:	e3071488 	movw	r1, #29832	@ 0x7488
   14928:	e3401001 	movt	r1, #1
   1492c:	e3070580 	movw	r0, #30080	@ 0x7580
   14930:	e3400001 	movt	r0, #1
   14934:	e3a020a4 	mov	r2, #164	@ 0xa4
   14938:	ebfff804 	bl	12950 <assertion_failed>

0001493c <CPtrList::Find(void*)>:
   1493c:	e5900000 	ldr	r0, [r0]
   14940:	e3500000 	cmp	r0, #0
   14944:	012fff1e 	bxeq	lr
   14948:	e3042d43 	movw	r2, #19779	@ 0x4d43
   1494c:	e345204c 	movt	r2, #20556	@ 0x504c
   14950:	ea000005 	b	1496c <CPtrList::Find(void*)+0x30>
   14954:	e590300c 	ldr	r3, [r0, #12]
   14958:	e1530001 	cmp	r3, r1
   1495c:	012fff1e 	bxeq	lr
   14960:	e5900008 	ldr	r0, [r0, #8]
   14964:	e3500000 	cmp	r0, #0
   14968:	012fff1e 	bxeq	lr
   1496c:	e5903000 	ldr	r3, [r0]
   14970:	e1530002 	cmp	r3, r2
   14974:	0afffff6 	beq	14954 <CPtrList::Find(void*)+0x18>
   14978:	e3071488 	movw	r1, #29832	@ 0x7488
   1497c:	e3401001 	movt	r1, #1
   14980:	e30704a4 	movw	r0, #29860	@ 0x74a4
   14984:	e3400001 	movt	r0, #1
   14988:	e3a020b3 	mov	r2, #179	@ 0xb3
   1498c:	e92d4010 	push	{r4, lr}
   14990:	ebfff7ee 	bl	12950 <assertion_failed>

00014994 <CPageAllocator::CPageAllocator()>:
   14994:	e3a02000 	mov	r2, #0
   14998:	e3a01001 	mov	r1, #1
   1499c:	e5802000 	str	r2, [r0]
   149a0:	e5802004 	str	r2, [r0, #4]
   149a4:	e5802008 	str	r2, [r0, #8]
   149a8:	e580100c 	str	r1, [r0, #12]
   149ac:	e12fff1e 	bx	lr

000149b0 <CPageAllocator::~CPageAllocator()>:
   149b0:	e12fff1e 	bx	lr

000149b4 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   149b4:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   149b8:	e28db000 	add	fp, sp, #0
   149bc:	e24dd014 	sub	sp, sp, #20
   149c0:	e50b0008 	str	r0, [fp, #-8]
   149c4:	e50b100c 	str	r1, [fp, #-12]
   149c8:	e50b2010 	str	r2, [fp, #-16]
   149cc:	e51b300c 	ldr	r3, [fp, #-12]
   149d0:	e2833eff 	add	r3, r3, #4080	@ 0xff0
   149d4:	e283300f 	add	r3, r3, #15
   149d8:	e3c33eff 	bic	r3, r3, #4080	@ 0xff0
   149dc:	e3c3300f 	bic	r3, r3, #15
   149e0:	e1a02003 	mov	r2, r3
   149e4:	e51b3008 	ldr	r3, [fp, #-8]
   149e8:	e5832000 	str	r2, [r3]
   149ec:	e51b200c 	ldr	r2, [fp, #-12]
   149f0:	e51b3010 	ldr	r3, [fp, #-16]
   149f4:	e0823003 	add	r3, r2, r3
   149f8:	e3c33eff 	bic	r3, r3, #4080	@ 0xff0
   149fc:	e3c3300f 	bic	r3, r3, #15
   14a00:	e1a02003 	mov	r2, r3
   14a04:	e51b3008 	ldr	r3, [fp, #-8]
   14a08:	e5832004 	str	r2, [r3, #4]
   14a0c:	e320f000 	nop	{0}
   14a10:	e28bd000 	add	sp, fp, #0
   14a14:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   14a18:	e12fff1e 	bx	lr

00014a1c <CPageAllocator::GetFreeSpace() const>:
   14a1c:	e8900005 	ldm	r0, {r0, r2}
   14a20:	e0420000 	sub	r0, r2, r0
   14a24:	e12fff1e 	bx	lr

00014a28 <CPageAllocator::Allocate()>:
   14a28:	e5903000 	ldr	r3, [r0]
   14a2c:	e92d4070 	push	{r4, r5, r6, lr}
   14a30:	e3530000 	cmp	r3, #0
   14a34:	0a000024 	beq	14acc <CPageAllocator::Allocate()+0xa4>
   14a38:	e1a04000 	mov	r4, r0
   14a3c:	e590000c 	ldr	r0, [r0, #12]
   14a40:	e3500000 	cmp	r0, #0
   14a44:	1a000010 	bne	14a8c <CPageAllocator::Allocate()+0x64>
   14a48:	e5945008 	ldr	r5, [r4, #8]
   14a4c:	e3550000 	cmp	r5, #0
   14a50:	0a000011 	beq	14a9c <CPageAllocator::Allocate()+0x74>
   14a54:	e5952000 	ldr	r2, [r5]
   14a58:	e3043d43 	movw	r3, #19779	@ 0x4d43
   14a5c:	e3453047 	movt	r3, #20551	@ 0x5047
   14a60:	e1520003 	cmp	r2, r3
   14a64:	1a00001d 	bne	14ae0 <CPageAllocator::Allocate()+0xb8>
   14a68:	e594000c 	ldr	r0, [r4, #12]
   14a6c:	e3a03000 	mov	r3, #0
   14a70:	e5952004 	ldr	r2, [r5, #4]
   14a74:	e5842008 	str	r2, [r4, #8]
   14a78:	e3500000 	cmp	r0, #0
   14a7c:	e5853000 	str	r3, [r5]
   14a80:	1a00000e 	bne	14ac0 <CPageAllocator::Allocate()+0x98>
   14a84:	e1a00005 	mov	r0, r5
   14a88:	e8bd8070 	pop	{r4, r5, r6, pc}
   14a8c:	ebfff597 	bl	120f0 <EnterCritical>
   14a90:	e5945008 	ldr	r5, [r4, #8]
   14a94:	e3550000 	cmp	r5, #0
   14a98:	1affffed 	bne	14a54 <CPageAllocator::Allocate()+0x2c>
   14a9c:	e5942000 	ldr	r2, [r4]
   14aa0:	e5941004 	ldr	r1, [r4, #4]
   14aa4:	e2823a01 	add	r3, r2, #4096	@ 0x1000
   14aa8:	e594000c 	ldr	r0, [r4, #12]
   14aac:	e1530001 	cmp	r3, r1
   14ab0:	e5843000 	str	r3, [r4]
   14ab4:	91a05002 	movls	r5, r2
   14ab8:	e3500000 	cmp	r0, #0
   14abc:	0afffff0 	beq	14a84 <CPageAllocator::Allocate()+0x5c>
   14ac0:	ebfff5b5 	bl	1219c <LeaveCritical>
   14ac4:	e1a00005 	mov	r0, r5
   14ac8:	e8bd8070 	pop	{r4, r5, r6, pc}
   14acc:	e30715f0 	movw	r1, #30192	@ 0x75f0
   14ad0:	e3401001 	movt	r1, #1
   14ad4:	e3a02036 	mov	r2, #54	@ 0x36
   14ad8:	e2810014 	add	r0, r1, #20
   14adc:	ebfff79b 	bl	12950 <assertion_failed>
   14ae0:	e30715f0 	movw	r1, #30192	@ 0x75f0
   14ae4:	e3401001 	movt	r1, #1
   14ae8:	e3a02044 	mov	r2, #68	@ 0x44
   14aec:	e2810024 	add	r0, r1, #36	@ 0x24
   14af0:	ebfff796 	bl	12950 <assertion_failed>

00014af4 <CPageAllocator::Free(void*)>:
   14af4:	e92d4070 	push	{r4, r5, r6, lr}
   14af8:	e2514000 	subs	r4, r1, #0
   14afc:	08bd8070 	popeq	{r4, r5, r6, pc}
   14b00:	e1a05000 	mov	r5, r0
   14b04:	e590000c 	ldr	r0, [r0, #12]
   14b08:	e3500000 	cmp	r0, #0
   14b0c:	1a000006 	bne	14b2c <CPageAllocator::Free(void*)+0x38>
   14b10:	e5952008 	ldr	r2, [r5, #8]
   14b14:	e3043d43 	movw	r3, #19779	@ 0x4d43
   14b18:	e3453047 	movt	r3, #20551	@ 0x5047
   14b1c:	e5842004 	str	r2, [r4, #4]
   14b20:	e5843000 	str	r3, [r4]
   14b24:	e5854008 	str	r4, [r5, #8]
   14b28:	e8bd8070 	pop	{r4, r5, r6, pc}
   14b2c:	ebfff56f 	bl	120f0 <EnterCritical>
   14b30:	e595200c 	ldr	r2, [r5, #12]
   14b34:	e5951008 	ldr	r1, [r5, #8]
   14b38:	e3043d43 	movw	r3, #19779	@ 0x4d43
   14b3c:	e3453047 	movt	r3, #20551	@ 0x5047
   14b40:	e3520000 	cmp	r2, #0
   14b44:	e5841004 	str	r1, [r4, #4]
   14b48:	e5843000 	str	r3, [r4]
   14b4c:	e5854008 	str	r4, [r5, #8]
   14b50:	08bd8070 	popeq	{r4, r5, r6, pc}
   14b54:	e8bd4070 	pop	{r4, r5, r6, lr}
   14b58:	eafff58f 	b	1219c <LeaveCritical>

00014b5c <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   14b5c:	e5801000 	str	r1, [r0]
   14b60:	e5c02004 	strb	r2, [r0, #4]
   14b64:	e12fff1e 	bx	lr

00014b68 <CBcmMailBox::~CBcmMailBox()>:
   14b68:	e12fff1e 	bx	lr

00014b6c <CBcmMailBox::WriteRead(unsigned int)>:
   14b6c:	e92d4070 	push	{r4, r5, r6, lr}
   14b70:	e1a05000 	mov	r5, r0
   14b74:	e5d03004 	ldrb	r3, [r0, #4]
   14b78:	e24dd008 	sub	sp, sp, #8
   14b7c:	e1a06001 	mov	r6, r1
   14b80:	e3530000 	cmp	r3, #0
   14b84:	1a000004 	bne	14b9c <CBcmMailBox::WriteRead(unsigned int)+0x30>
   14b88:	e30737a4 	movw	r3, #30628	@ 0x77a4
   14b8c:	e3403001 	movt	r3, #1
   14b90:	e5930000 	ldr	r0, [r3]
   14b94:	e3500000 	cmp	r0, #0
   14b98:	1a000029 	bne	14c44 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   14b9c:	e3a04a0b 	mov	r4, #45056	@ 0xb000
   14ba0:	e3434f00 	movt	r4, #16128	@ 0x3f00
   14ba4:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   14ba8:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   14bac:	1a000005 	bne	14bc8 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   14bb0:	e3a00014 	mov	r0, #20
   14bb4:	e5943880 	ldr	r3, [r4, #2176]	@ 0x880
   14bb8:	ebffeddb 	bl	1032c <CTimer::SimpleMsDelay(unsigned int)>
   14bbc:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   14bc0:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   14bc4:	0afffff9 	beq	14bb0 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   14bc8:	e3a00a0b 	mov	r0, #45056	@ 0xb000
   14bcc:	e3430f00 	movt	r0, #16128	@ 0x3f00
   14bd0:	e59038b8 	ldr	r3, [r0, #2232]	@ 0x8b8
   14bd4:	e3530000 	cmp	r3, #0
   14bd8:	bafffffc 	blt	14bd0 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   14bdc:	e316000f 	tst	r6, #15
   14be0:	1a00001e 	bne	14c60 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   14be4:	e5953000 	ldr	r3, [r5]
   14be8:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   14bec:	e3432f00 	movt	r2, #16128	@ 0x3f00
   14bf0:	e1866003 	orr	r6, r6, r3
   14bf4:	e58068a0 	str	r6, [r0, #2208]	@ 0x8a0
   14bf8:	e5950000 	ldr	r0, [r5]
   14bfc:	e5923898 	ldr	r3, [r2, #2200]	@ 0x898
   14c00:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   14c04:	1afffffc 	bne	14bfc <CBcmMailBox::WriteRead(unsigned int)+0x90>
   14c08:	e5923880 	ldr	r3, [r2, #2176]	@ 0x880
   14c0c:	e203100f 	and	r1, r3, #15
   14c10:	e1510000 	cmp	r1, r0
   14c14:	1afffff8 	bne	14bfc <CBcmMailBox::WriteRead(unsigned int)+0x90>
   14c18:	e5d52004 	ldrb	r2, [r5, #4]
   14c1c:	e3c3000f 	bic	r0, r3, #15
   14c20:	e3520000 	cmp	r2, #0
   14c24:	1a000004 	bne	14c3c <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   14c28:	e30737a4 	movw	r3, #30628	@ 0x77a4
   14c2c:	e3403001 	movt	r3, #1
   14c30:	e5933000 	ldr	r3, [r3]
   14c34:	e3530000 	cmp	r3, #0
   14c38:	1a000003 	bne	14c4c <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   14c3c:	e28dd008 	add	sp, sp, #8
   14c40:	e8bd8070 	pop	{r4, r5, r6, pc}
   14c44:	ebfff529 	bl	120f0 <EnterCritical>
   14c48:	eaffffd3 	b	14b9c <CBcmMailBox::WriteRead(unsigned int)+0x30>
   14c4c:	e58d0004 	str	r0, [sp, #4]
   14c50:	ebfff551 	bl	1219c <LeaveCritical>
   14c54:	e59d0004 	ldr	r0, [sp, #4]
   14c58:	e28dd008 	add	sp, sp, #8
   14c5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14c60:	e3071638 	movw	r1, #30264	@ 0x7638
   14c64:	e3401001 	movt	r1, #1
   14c68:	e3070648 	movw	r0, #30280	@ 0x7648
   14c6c:	e3400001 	movt	r0, #1
   14c70:	e3a02062 	mov	r2, #98	@ 0x62
   14c74:	ebfff735 	bl	12950 <assertion_failed>

00014c78 <CBcmMailBox::Flush()>:
   14c78:	e92d4010 	push	{r4, lr}
   14c7c:	e3a04a0b 	mov	r4, #45056	@ 0xb000
   14c80:	e3434f00 	movt	r4, #16128	@ 0x3f00
   14c84:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   14c88:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   14c8c:	18bd8010 	popne	{r4, pc}
   14c90:	e3a00014 	mov	r0, #20
   14c94:	e5943880 	ldr	r3, [r4, #2176]	@ 0x880
   14c98:	ebffeda3 	bl	1032c <CTimer::SimpleMsDelay(unsigned int)>
   14c9c:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   14ca0:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   14ca4:	0afffff9 	beq	14c90 <CBcmMailBox::Flush()+0x18>
   14ca8:	e8bd8010 	pop	{r4, pc}

00014cac <CBcmMailBox::Read()>:
   14cac:	e5901000 	ldr	r1, [r0]
   14cb0:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   14cb4:	e3432f00 	movt	r2, #16128	@ 0x3f00
   14cb8:	e5923898 	ldr	r3, [r2, #2200]	@ 0x898
   14cbc:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   14cc0:	1afffffc 	bne	14cb8 <CBcmMailBox::Read()+0xc>
   14cc4:	e5920880 	ldr	r0, [r2, #2176]	@ 0x880
   14cc8:	e200300f 	and	r3, r0, #15
   14ccc:	e1530001 	cmp	r3, r1
   14cd0:	1afffff8 	bne	14cb8 <CBcmMailBox::Read()+0xc>
   14cd4:	e3c0000f 	bic	r0, r0, #15
   14cd8:	e12fff1e 	bx	lr

00014cdc <CBcmMailBox::Write(unsigned int)>:
   14cdc:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   14ce0:	e3432f00 	movt	r2, #16128	@ 0x3f00
   14ce4:	e59238b8 	ldr	r3, [r2, #2232]	@ 0x8b8
   14ce8:	e3530000 	cmp	r3, #0
   14cec:	bafffffc 	blt	14ce4 <CBcmMailBox::Write(unsigned int)+0x8>
   14cf0:	e311000f 	tst	r1, #15
   14cf4:	1a000003 	bne	14d08 <CBcmMailBox::Write(unsigned int)+0x2c>
   14cf8:	e5903000 	ldr	r3, [r0]
   14cfc:	e1811003 	orr	r1, r1, r3
   14d00:	e58218a0 	str	r1, [r2, #2208]	@ 0x8a0
   14d04:	e12fff1e 	bx	lr
   14d08:	e3071638 	movw	r1, #30264	@ 0x7638
   14d0c:	e3401001 	movt	r1, #1
   14d10:	e3070648 	movw	r0, #30280	@ 0x7648
   14d14:	e3400001 	movt	r0, #1
   14d18:	e3a02062 	mov	r2, #98	@ 0x62
   14d1c:	e92d4010 	push	{r4, lr}
   14d20:	ebfff70a 	bl	12950 <assertion_failed>

00014d24 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   14d24:	e30737a4 	movw	r3, #30628	@ 0x77a4
   14d28:	e3403001 	movt	r3, #1
   14d2c:	e3a02000 	mov	r2, #0
   14d30:	e5832000 	str	r2, [r3]
   14d34:	e12fff1e 	bx	lr

00014d38 <__aeabi_uldivmod>:
   14d38:	b953      	cbnz	r3, 14d50 <__aeabi_uldivmod+0x18>
   14d3a:	b94a      	cbnz	r2, 14d50 <__aeabi_uldivmod+0x18>
   14d3c:	2900      	cmp	r1, #0
   14d3e:	bf08      	it	eq
   14d40:	2800      	cmpeq	r0, #0
   14d42:	bf1c      	itt	ne
   14d44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
   14d48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
   14d4c:	f000 b888 	b.w	14e60 <__aeabi_idiv0>
   14d50:	f1ad 0c08 	sub.w	ip, sp, #8
   14d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   14d58:	f000 f806 	bl	14d68 <__udivmoddi4>
   14d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
   14d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14d64:	b004      	add	sp, #16
   14d66:	4770      	bx	lr

00014d68 <__udivmoddi4>:
   14d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14d6c:	4290      	cmp	r0, r2
   14d6e:	460d      	mov	r5, r1
   14d70:	9f07      	ldr	r7, [sp, #28]
   14d72:	4604      	mov	r4, r0
   14d74:	eb75 0103 	sbcs.w	r1, r5, r3
   14d78:	d36f      	bcc.n	14e5a <__udivmoddi4+0xf2>
   14d7a:	2b00      	cmp	r3, #0
   14d7c:	d05f      	beq.n	14e3e <__udivmoddi4+0xd6>
   14d7e:	fab3 f683 	clz	r6, r3
   14d82:	2d00      	cmp	r5, #0
   14d84:	d05f      	beq.n	14e46 <__udivmoddi4+0xde>
   14d86:	fab5 f185 	clz	r1, r5
   14d8a:	1a76      	subs	r6, r6, r1
   14d8c:	f1a6 0020 	sub.w	r0, r6, #32
   14d90:	f1c6 0120 	rsb	r1, r6, #32
   14d94:	40b3      	lsls	r3, r6
   14d96:	f1a6 0c20 	sub.w	ip, r6, #32
   14d9a:	fa02 f000 	lsl.w	r0, r2, r0
   14d9e:	f1c6 0e20 	rsb	lr, r6, #32
   14da2:	fa22 f101 	lsr.w	r1, r2, r1
   14da6:	4303      	orrs	r3, r0
   14da8:	40b2      	lsls	r2, r6
   14daa:	430b      	orrs	r3, r1
   14dac:	4294      	cmp	r4, r2
   14dae:	eb75 0103 	sbcs.w	r1, r5, r3
   14db2:	d34c      	bcc.n	14e4e <__udivmoddi4+0xe6>
   14db4:	2001      	movs	r0, #1
   14db6:	1aa4      	subs	r4, r4, r2
   14db8:	eb65 0503 	sbc.w	r5, r5, r3
   14dbc:	fa00 f10c 	lsl.w	r1, r0, ip
   14dc0:	fa20 f80e 	lsr.w	r8, r0, lr
   14dc4:	ea41 0108 	orr.w	r1, r1, r8
   14dc8:	40b0      	lsls	r0, r6
   14dca:	b39e      	cbz	r6, 14e34 <__udivmoddi4+0xcc>
   14dcc:	0852      	lsrs	r2, r2, #1
   14dce:	46b0      	mov	r8, r6
   14dd0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   14dd4:	085b      	lsrs	r3, r3, #1
   14dd6:	4294      	cmp	r4, r2
   14dd8:	eb75 0903 	sbcs.w	r9, r5, r3
   14ddc:	d33a      	bcc.n	14e54 <__udivmoddi4+0xec>
   14dde:	1aa4      	subs	r4, r4, r2
   14de0:	eb65 0503 	sbc.w	r5, r5, r3
   14de4:	1924      	adds	r4, r4, r4
   14de6:	416d      	adcs	r5, r5
   14de8:	3401      	adds	r4, #1
   14dea:	f145 0500 	adc.w	r5, r5, #0
   14dee:	f1b8 0801 	subs.w	r8, r8, #1
   14df2:	d1f0      	bne.n	14dd6 <__udivmoddi4+0x6e>
   14df4:	1900      	adds	r0, r0, r4
   14df6:	fa05 fe0e 	lsl.w	lr, r5, lr
   14dfa:	fa24 f406 	lsr.w	r4, r4, r6
   14dfe:	eb41 0105 	adc.w	r1, r1, r5
   14e02:	fa25 fc0c 	lsr.w	ip, r5, ip
   14e06:	ea44 040e 	orr.w	r4, r4, lr
   14e0a:	ea44 040c 	orr.w	r4, r4, ip
   14e0e:	40f5      	lsrs	r5, r6
   14e10:	f1a6 0c20 	sub.w	ip, r6, #32
   14e14:	f1c6 0220 	rsb	r2, r6, #32
   14e18:	fa05 f306 	lsl.w	r3, r5, r6
   14e1c:	fa04 fc0c 	lsl.w	ip, r4, ip
   14e20:	ea43 030c 	orr.w	r3, r3, ip
   14e24:	fa24 f202 	lsr.w	r2, r4, r2
   14e28:	fa04 f606 	lsl.w	r6, r4, r6
   14e2c:	4313      	orrs	r3, r2
   14e2e:	1b80      	subs	r0, r0, r6
   14e30:	eb61 0103 	sbc.w	r1, r1, r3
   14e34:	b10f      	cbz	r7, 14e3a <__udivmoddi4+0xd2>
   14e36:	e9c7 4500 	strd	r4, r5, [r7]
   14e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14e3e:	fab2 f682 	clz	r6, r2
   14e42:	3620      	adds	r6, #32
   14e44:	e79d      	b.n	14d82 <__udivmoddi4+0x1a>
   14e46:	fab4 f184 	clz	r1, r4
   14e4a:	3120      	adds	r1, #32
   14e4c:	e79d      	b.n	14d8a <__udivmoddi4+0x22>
   14e4e:	2000      	movs	r0, #0
   14e50:	4601      	mov	r1, r0
   14e52:	e7ba      	b.n	14dca <__udivmoddi4+0x62>
   14e54:	1924      	adds	r4, r4, r4
   14e56:	416d      	adcs	r5, r5
   14e58:	e7c9      	b.n	14dee <__udivmoddi4+0x86>
   14e5a:	2000      	movs	r0, #0
   14e5c:	4601      	mov	r1, r0
   14e5e:	e7e9      	b.n	14e34 <__udivmoddi4+0xcc>

00014e60 <__aeabi_idiv0>:
   14e60:	4770      	bx	lr
   14e62:	bf00      	nop
